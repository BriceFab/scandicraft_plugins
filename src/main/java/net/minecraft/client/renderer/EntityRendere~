package net.minecraft.client.renderer;

import com.google.common.base.Predicates;
import com.google.gson.JsonSyntaxException;
import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.FloatBuffer;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Callable;
import net.minecraft.block.Block;
import net.minecraft.block.BlockBed;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.AbstractClientPlayer;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.gui.MapItemRenderer;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.multiplayer.WorldClient;
import net.minecraft.client.particle.EffectRenderer;
import net.minecraft.client.renderer.ActiveRenderInfo;
import net.minecraft.client.renderer.EntityRenderer$1;
import net.minecraft.client.renderer.EntityRenderer$2;
import net.minecraft.client.renderer.GLAllocation;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.ItemRenderer;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.client.renderer.RenderHelper;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.client.renderer.culling.ClippingHelperImpl;
import net.minecraft.client.renderer.culling.Frustum;
import net.minecraft.client.renderer.texture.DynamicTexture;
import net.minecraft.client.renderer.texture.TextureMap;
import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.client.resources.I18n;
import net.minecraft.client.resources.IResourceManager;
import net.minecraft.client.resources.IResourceManagerReloadListener;
import net.minecraft.client.settings.GameSettings;
import net.minecraft.client.shader.ShaderGroup;
import net.minecraft.client.shader.ShaderLinkHelper;
import net.minecraft.crash.CrashReport;
import net.minecraft.crash.CrashReportCategory;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.boss.BossStatus;
import net.minecraft.entity.item.EntityItemFrame;
import net.minecraft.entity.monster.EntityCreeper;
import net.minecraft.entity.monster.EntityEnderman;
import net.minecraft.entity.monster.EntitySpider;
import net.minecraft.entity.passive.EntityAnimal;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.inventory.IInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.potion.Potion;
import net.minecraft.server.integrated.IntegratedServer;
import net.minecraft.src.Config;
import net.minecraft.src.CustomColors;
import net.minecraft.src.Lagometer;
import net.minecraft.src.RandomMobs;
import net.minecraft.src.Reflector;
import net.minecraft.src.ReflectorForge;
import net.minecraft.src.TextureUtils;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.ChatComponentText;
import net.minecraft.util.EntitySelectors;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.EnumWorldBlockLayer;
import net.minecraft.util.MathHelper;
import net.minecraft.util.MouseFilter;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.ReportedException;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.Vec3;
import net.minecraft.world.World;
import net.minecraft.world.WorldProvider;
import net.minecraft.world.WorldSettings;
import net.minecraft.world.biome.BiomeGenBase;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GLContext;
import org.lwjgl.util.glu.GLU;
import org.lwjgl.util.glu.Project;
import shadersmod.client.Shaders;
import shadersmod.client.ShadersRender;

public class EntityRenderer implements IResourceManagerReloadListener {
   private static final Logger LOGGER = LogManager.getLogger();
   private static final ResourceLocation field_110924_q = new ResourceLocation("textures/environment/rain.png");
   private static final ResourceLocation field_110923_r = new ResourceLocation("textures/environment/snow.png");
   public static boolean field_78517_a;
   public static int field_78515_b;
   private Minecraft mc;
   private final IResourceManager resourceManager;
   private Random random = new Random();
   private float farPlaneDistance;
   public ItemRenderer itemRenderer;
   private final MapItemRenderer mapItemRenderer;
   private int rendererUpdateCount;
   private Entity field_78528_u;
   private MouseFilter field_78527_v = new MouseFilter();
   private MouseFilter field_78526_w = new MouseFilter();
   private float field_78490_B = 4.0F;
   private float field_78491_C = 4.0F;
   private float field_78496_H;
   private float field_78497_I;
   private float field_78498_J;
   private float field_78499_K;
   private float field_78492_L;
   private float fovModifierHand;
   private float fovModifierHandPrev;
   private float bossColorModifier;
   private float bossColorModifierPrev;
   private boolean field_78500_U;
   private boolean renderHand = true;
   private boolean drawBlockOutline = true;
   private long prevFrameTime = Minecraft.func_71386_F();
   private long field_78510_Z;
   private final DynamicTexture lightmapTexture;
   private final int[] field_78504_Q;
   private final ResourceLocation field_110922_T;
   private boolean field_78536_aa;
   private float field_78514_e;
   private float field_175075_L;
   private int field_78534_ac;
   private float[] field_175076_N = new float[1024];
   private float[] field_175077_O = new float[1024];
   private FloatBuffer field_78521_m = GLAllocation.createDirectFloatBuffer(16);
   public float field_175080_Q;
   public float field_175082_R;
   public float field_175081_S;
   private float field_78535_ad;
   private float field_78539_ae;
   private int field_175079_V = 0;
   private boolean debugView = false;
   private double cameraZoom = 1.0D;
   private double field_78502_W;
   private double field_78509_X;
   private ShaderGroup shaderGroup;
   private static final ResourceLocation[] SHADERS_TEXTURES = new ResourceLocation[]{new ResourceLocation("shaders/post/notch.json"), new ResourceLocation("shaders/post/fxaa.json"), new ResourceLocation("shaders/post/art.json"), new ResourceLocation("shaders/post/bumpy.json"), new ResourceLocation("shaders/post/blobs2.json"), new ResourceLocation("shaders/post/pencil.json"), new ResourceLocation("shaders/post/color_convolve.json"), new ResourceLocation("shaders/post/deconverge.json"), new ResourceLocation("shaders/post/flip.json"), new ResourceLocation("shaders/post/invert.json"), new ResourceLocation("shaders/post/ntsc.json"), new ResourceLocation("shaders/post/outline.json"), new ResourceLocation("shaders/post/phosphor.json"), new ResourceLocation("shaders/post/scan_pincushion.json"), new ResourceLocation("shaders/post/sobel.json"), new ResourceLocation("shaders/post/bits.json"), new ResourceLocation("shaders/post/desaturate.json"), new ResourceLocation("shaders/post/green.json"), new ResourceLocation("shaders/post/blur.json"), new ResourceLocation("shaders/post/wobble.json"), new ResourceLocation("shaders/post/blobs.json"), new ResourceLocation("shaders/post/antialias.json"), new ResourceLocation("shaders/post/creeper.json"), new ResourceLocation("shaders/post/spider.json")};
   public static final int SHADER_COUNT = SHADERS_TEXTURES.length;
   private int shaderIndex;
   private boolean useShader;
   public int field_175084_ae;
   private static final String __OBFID = "CL_00000947";
   private boolean initialized = false;
   private World updatedWorld = null;
   private boolean showDebugInfo = false;
   public boolean fogStandard = false;
   private float clipDistance = 128.0F;
   private long lastServerTime = 0L;
   private int lastServerTicks = 0;
   private int serverWaitTime = 0;
   private int serverWaitTimeCurrent = 0;
   private float avgServerTimeDiff = 0.0F;
   private float avgServerTickDiff = 0.0F;
   private long lastErrorCheckTimeMs = 0L;
   private ShaderGroup[] fxaaShaders = new ShaderGroup[10];

   public EntityRenderer(Minecraft p_i45076_1_, IResourceManager p_i45076_2_) {
      this.shaderIndex = SHADER_COUNT;
      this.useShader = false;
      this.field_175084_ae = 0;
      this.mc = p_i45076_1_;
      this.resourceManager = p_i45076_2_;
      this.itemRenderer = p_i45076_1_.getFirstPersonRenderer();
      this.mapItemRenderer = new MapItemRenderer(p_i45076_1_.getTextureManager());
      this.lightmapTexture = new DynamicTexture(16, 16);
      this.field_110922_T = p_i45076_1_.getTextureManager().getDynamicTextureLocation("lightMap", this.lightmapTexture);
      this.field_78504_Q = this.lightmapTexture.func_110565_c();
      this.shaderGroup = null;

      for(int i = 0; i < 32; ++i) {
         for(int j = 0; j < 32; ++j) {
            float f = (float)(j - 16);
            float f1 = (float)(i - 16);
            float f2 = MathHelper.sqrt(f * f + f1 * f1);
            this.field_175076_N[i << 5 | j] = -f1 / f2;
            this.field_175077_O[i << 5 | j] = f / f2;
         }
      }

   }

   public boolean func_147702_a() {
      return OpenGlHelper.field_148824_g && this.shaderGroup != null;
   }

   public void stopUseShader() {
      if(this.shaderGroup != null) {
         this.shaderGroup.func_148021_a();
      }

      this.shaderGroup = null;
      this.shaderIndex = SHADER_COUNT;
   }

   public void switchUseShader() {
      this.useShader = !this.useShader;
   }

   public void loadEntityShader(Entity entityIn) {
      if(OpenGlHelper.field_148824_g) {
         if(this.shaderGroup != null) {
            this.shaderGroup.func_148021_a();
         }

         this.shaderGroup = null;
         if(entityIn instanceof EntityCreeper) {
            this.loadShader(new ResourceLocation("shaders/post/creeper.json"));
         } else if(entityIn instanceof EntitySpider) {
            this.loadShader(new ResourceLocation("shaders/post/spider.json"));
         } else if(entityIn instanceof EntityEnderman) {
            this.loadShader(new ResourceLocation("shaders/post/invert.json"));
         } else if(Reflector.ForgeHooksClient_loadEntityShader.exists()) {
            Reflector.call(Reflector.ForgeHooksClient_loadEntityShader, new Object[]{entityIn, this});
         }
      }

   }

   public void func_147705_c() {
      if(OpenGlHelper.field_148824_g && this.mc.getRenderViewEntity() instanceof EntityPlayer) {
         if(this.shaderGroup != null) {
            this.shaderGroup.func_148021_a();
         }

         this.shaderIndex = (this.shaderIndex + 1) % (SHADERS_TEXTURES.length + 1);
         if(this.shaderIndex != SHADER_COUNT) {
            this.loadShader(SHADERS_TEXTURES[this.shaderIndex]);
         } else {
            this.shaderGroup = null;
         }
      }

   }

   private void loadShader(ResourceLocation resourceLocationIn) {
      if(OpenGlHelper.func_148822_b()) {
         try {
            this.shaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
            this.shaderGroup.createBindFramebuffers(this.mc.field_71443_c, this.mc.field_71440_d);
            this.useShader = true;
         } catch (IOException ioexception) {
            LOGGER.warn((String)("Failed to load shader: " + resourceLocationIn), (Throwable)ioexception);
            this.shaderIndex = SHADER_COUNT;
            this.useShader = false;
         } catch (JsonSyntaxException jsonsyntaxexception) {
            LOGGER.warn((String)("Failed to load shader: " + resourceLocationIn), (Throwable)jsonsyntaxexception);
            this.shaderIndex = SHADER_COUNT;
            this.useShader = false;
         }

      }
   }

   public void func_110549_a(IResourceManager p_110549_1_) {
      if(this.shaderGroup != null) {
         this.shaderGroup.func_148021_a();
      }

      this.shaderGroup = null;
      if(this.shaderIndex != SHADER_COUNT) {
         this.loadShader(SHADERS_TEXTURES[this.shaderIndex]);
      } else {
         this.loadEntityShader(this.mc.getRenderViewEntity());
      }

   }

   public void tick() {
      if(OpenGlHelper.field_148824_g && ShaderLinkHelper.func_148074_b() == null) {
         ShaderLinkHelper.func_148076_a();
      }

      this.updateFovModifierHand();
      this.func_78470_f();
      this.field_78535_ad = this.field_78539_ae;
      this.field_78491_C = this.field_78490_B;
      if(this.mc.gameSettings.smoothCamera) {
         float f = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
         float f1 = f * f * f * 8.0F;
         this.field_78498_J = this.field_78527_v.func_76333_a(this.field_78496_H, 0.05F * f1);
         this.field_78499_K = this.field_78526_w.func_76333_a(this.field_78497_I, 0.05F * f1);
         this.field_78492_L = 0.0F;
         this.field_78496_H = 0.0F;
         this.field_78497_I = 0.0F;
      } else {
         this.field_78498_J = 0.0F;
         this.field_78499_K = 0.0F;
         this.field_78527_v.func_180179_a();
         this.field_78526_w.func_180179_a();
      }

      if(this.mc.getRenderViewEntity() == null) {
         this.mc.setRenderViewEntity(this.mc.player);
      }

      Entity entity = this.mc.getRenderViewEntity();
      double d0 = entity.posX;
      double d1 = entity.posY + (double)entity.getEyeHeight();
      double d2 = entity.posZ;
      float f3 = this.mc.world.func_175724_o(new BlockPos(d0, d1, d2));
      float f4 = (float)this.mc.gameSettings.renderDistanceChunks / 16.0F;
      f4 = MathHelper.clamp(f4, 0.0F, 1.0F);
      float f2 = f3 * (1.0F - f4) + f4;
      this.field_78539_ae += (f2 - this.field_78539_ae) * 0.1F;
      ++this.rendererUpdateCount;
      this.itemRenderer.tick();
      this.func_78484_h();
      this.bossColorModifierPrev = this.bossColorModifier;
      if(BossStatus.field_82825_d) {
         this.bossColorModifier += 0.05F;
         if(this.bossColorModifier > 1.0F) {
            this.bossColorModifier = 1.0F;
         }

         BossStatus.field_82825_d = false;
      } else if(this.bossColorModifier > 0.0F) {
         this.bossColorModifier -= 0.0125F;
      }

   }

   public ShaderGroup getShaderGroup() {
      return this.shaderGroup;
   }

   public void updateShaderGroupSize(int width, int height) {
      if(OpenGlHelper.field_148824_g) {
         if(this.shaderGroup != null) {
            this.shaderGroup.createBindFramebuffers(width, height);
         }

         this.mc.worldRenderer.createBindEntityOutlineFbs(width, height);
      }

   }

   public void getMouseOver(float partialTicks) {
      Entity entity = this.mc.getRenderViewEntity();
      if(entity != null && this.mc.world != null) {
         this.mc.profiler.startSection("pick");
         this.mc.pointedEntity = null;
         double d0 = (double)this.mc.playerController.getBlockReachDistance();
         this.mc.objectMouseOver = entity.func_174822_a(d0, partialTicks);
         double d1 = d0;
         Vec3 vec3 = entity.getEyePosition(partialTicks);
         boolean flag = false;
         boolean flag1 = true;
         if(this.mc.playerController.extendedReach()) {
            d0 = 6.0D;
            d1 = 6.0D;
         } else {
            if(d0 > 3.0D) {
               flag = true;
            }

            d0 = d0;
         }

         if(this.field_78531_r.objectMouseOver != null) {
            d1 = this.field_78531_r.objectMouseOver.hitResult.distanceTo(vec3);
         }

         Vec3 vec31 = entity.getLook(partialTicks);
         Vec3 vec32 = vec3.add(vec31.x * d0, vec31.y * d0, vec31.z * d0);
         this.field_78528_u = null;
         Vec3 vec33 = null;
         float f = 1.0F;
         List list = this.field_78531_r.world.getEntitiesInAABBexcluding(entity, entity.getBoundingBox().expand(vec31.x * d0, vec31.y * d0, vec31.z * d0).grow((double)f, (double)f, (double)f), Predicates.and(EntitySelectors.NOT_SPECTATING, new EntityRenderer$1(this)));
         double d2 = d1;

         for(int i = 0; i < list.size(); ++i) {
            Entity entity1 = (Entity)list.get(i);
            float f1 = entity1.getCollisionBorderSize();
            AxisAlignedBB axisalignedbb = entity1.getBoundingBox().grow((double)f1, (double)f1, (double)f1);
            MovingObjectPosition movingobjectposition = axisalignedbb.func_72327_a(vec3, vec32);
            if(axisalignedbb.contains(vec3)) {
               if(d2 >= 0.0D) {
                  this.field_78528_u = entity1;
                  vec33 = movingobjectposition == null?vec3:movingobjectposition.hitResult;
                  d2 = 0.0D;
               }
            } else if(movingobjectposition != null) {
               double d3 = vec3.distanceTo(movingobjectposition.hitResult);
               if(d3 < d2 || d2 == 0.0D) {
                  boolean flag2 = false;
                  if(Reflector.ForgeEntity_canRiderInteract.exists()) {
                     flag2 = Reflector.callBoolean(entity1, Reflector.ForgeEntity_canRiderInteract, new Object[0]);
                  }

                  if(entity1 == entity.field_70154_o && !flag2) {
                     if(d2 == 0.0D) {
                        this.field_78528_u = entity1;
                        vec33 = movingobjectposition.hitResult;
                     }
                  } else {
                     this.field_78528_u = entity1;
                     vec33 = movingobjectposition.hitResult;
                     d2 = d3;
                  }
               }
            }
         }

         if(this.field_78528_u != null && flag && vec3.distanceTo(vec33) > 3.0D) {
            this.field_78528_u = null;
            this.field_78531_r.objectMouseOver = new MovingObjectPosition(MovingObjectPosition.MovingObjectType.MISS, vec33, (EnumFacing)null, new BlockPos(vec33));
         }

         if(this.field_78528_u != null && (d2 < d1 || this.field_78531_r.objectMouseOver == null)) {
            this.field_78531_r.objectMouseOver = new MovingObjectPosition(this.field_78528_u, vec33);
            if(this.field_78528_u instanceof EntityLivingBase || this.field_78528_u instanceof EntityItemFrame) {
               this.field_78531_r.pointedEntity = this.field_78528_u;
            }
         }

         this.field_78531_r.profiler.endSection();
      }

   }

   private void updateFovModifierHand() {
      float f = 1.0F;
      if(this.field_78531_r.getRenderViewEntity() instanceof AbstractClientPlayer) {
         AbstractClientPlayer abstractclientplayer = (AbstractClientPlayer)this.field_78531_r.getRenderViewEntity();
         f = abstractclientplayer.getFovModifier();
      }

      this.fovModifierHandPrev = this.fovModifierHand;
      this.fovModifierHand += (f - this.fovModifierHand) * 0.5F;
      if(this.fovModifierHand > 1.5F) {
         this.fovModifierHand = 1.5F;
      }

      if(this.fovModifierHand < 0.1F) {
         this.fovModifierHand = 0.1F;
      }

   }

   private float func_78481_a(float p_78481_1_, boolean p_78481_2_) {
      if(this.debugView) {
         return 90.0F;
      } else {
         Entity entity = this.field_78531_r.getRenderViewEntity();
         float f = 70.0F;
         if(p_78481_2_) {
            f = this.field_78531_r.gameSettings.fov;
            if(Config.isDynamicFov()) {
               f *= this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * p_78481_1_;
            }
         }

         boolean flag = false;
         if(this.field_78531_r.currentScreen == null) {
            GameSettings gamesettings = this.field_78531_r.gameSettings;
            flag = GameSettings.func_100015_a(this.field_78531_r.gameSettings.ofKeyBindZoom);
         }

         if(flag) {
            if(!Config.zoomMode) {
               Config.zoomMode = true;
               this.field_78531_r.gameSettings.smoothCamera = true;
            }

            if(Config.zoomMode) {
               f /= 4.0F;
            }
         } else if(Config.zoomMode) {
            Config.zoomMode = false;
            this.field_78531_r.gameSettings.smoothCamera = false;
            this.field_78527_v = new MouseFilter();
            this.field_78526_w = new MouseFilter();
            this.field_78531_r.worldRenderer.displayListEntitiesDirty = true;
         }

         if(entity instanceof EntityLivingBase && ((EntityLivingBase)entity).getHealth() <= 0.0F) {
            float f1 = (float)((EntityLivingBase)entity).deathTime + p_78481_1_;
            f /= (1.0F - 500.0F / (f1 + 500.0F)) * 2.0F + 1.0F;
         }

         Block block = ActiveRenderInfo.func_180786_a(this.field_78531_r.world, entity, p_78481_1_);
         if(block.getMaterial() == Material.WATER) {
            f = f * 60.0F / 70.0F;
         }

         return f;
      }
   }

   private void func_78482_e(float p_78482_1_) {
      if(this.field_78531_r.getRenderViewEntity() instanceof EntityLivingBase) {
         EntityLivingBase entitylivingbase = (EntityLivingBase)this.field_78531_r.getRenderViewEntity();
         float f = (float)entitylivingbase.hurtTime - p_78482_1_;
         if(entitylivingbase.getHealth() <= 0.0F) {
            float f1 = (float)entitylivingbase.deathTime + p_78482_1_;
            GlStateManager.func_179114_b(40.0F - 8000.0F / (f1 + 200.0F), 0.0F, 0.0F, 1.0F);
         }

         if(f < 0.0F) {
            return;
         }

         f = f / (float)entitylivingbase.maxHurtTime;
         f = MathHelper.sin(f * f * f * f * 3.1415927F);
         float f2 = entitylivingbase.attackedAtYaw;
         GlStateManager.func_179114_b(-f2, 0.0F, 1.0F, 0.0F);
         GlStateManager.func_179114_b(-f * 14.0F, 0.0F, 0.0F, 1.0F);
         GlStateManager.func_179114_b(f2, 0.0F, 1.0F, 0.0F);
      }

   }

   private void func_78475_f(float p_78475_1_) {
      if(this.field_78531_r.getRenderViewEntity() instanceof EntityPlayer) {
         EntityPlayer entityplayer = (EntityPlayer)this.field_78531_r.getRenderViewEntity();
         float f = entityplayer.distanceWalkedModified - entityplayer.prevDistanceWalkedModified;
         float f1 = -(entityplayer.distanceWalkedModified + f * p_78475_1_);
         float f2 = entityplayer.prevCameraYaw + (entityplayer.cameraYaw - entityplayer.prevCameraYaw) * p_78475_1_;
         float f3 = entityplayer.field_70727_aS + (entityplayer.field_70726_aT - entityplayer.field_70727_aS) * p_78475_1_;
         GlStateManager.func_179109_b(MathHelper.sin(f1 * 3.1415927F) * f2 * 0.5F, -Math.abs(MathHelper.cos(f1 * 3.1415927F) * f2), 0.0F);
         GlStateManager.func_179114_b(MathHelper.sin(f1 * 3.1415927F) * f2 * 3.0F, 0.0F, 0.0F, 1.0F);
         GlStateManager.func_179114_b(Math.abs(MathHelper.cos(f1 * 3.1415927F - 0.2F) * f2) * 5.0F, 1.0F, 0.0F, 0.0F);
         GlStateManager.func_179114_b(f3, 1.0F, 0.0F, 0.0F);
      }

   }

   private void func_78467_g(float p_78467_1_) {
      Entity entity = this.field_78531_r.getRenderViewEntity();
      float f = entity.getEyeHeight();
      double d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double)p_78467_1_;
      double d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)p_78467_1_ + (double)f;
      double d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double)p_78467_1_;
      if(entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isSleeping()) {
         f = (float)((double)f + 1.0D);
         GlStateManager.func_179109_b(0.0F, 0.3F, 0.0F);
         if(!this.field_78531_r.gameSettings.field_74325_U) {
            BlockPos blockpos = new BlockPos(entity);
            IBlockState iblockstate = this.field_78531_r.world.getBlockState(blockpos);
            Block block = iblockstate.getBlock();
            if(Reflector.ForgeHooksClient_orientBedCamera.exists()) {
               Reflector.callVoid(Reflector.ForgeHooksClient_orientBedCamera, new Object[]{this.field_78531_r.world, blockpos, iblockstate, entity});
            } else if(block == Blocks.field_150324_C) {
               int j = ((EnumFacing)iblockstate.get(BlockBed.FACING)).getHorizontalIndex();
               GlStateManager.func_179114_b((float)(j * 90), 0.0F, 1.0F, 0.0F);
            }

            GlStateManager.func_179114_b(entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * p_78467_1_ + 180.0F, 0.0F, -1.0F, 0.0F);
            GlStateManager.func_179114_b(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * p_78467_1_, -1.0F, 0.0F, 0.0F);
         }
      } else if(this.field_78531_r.gameSettings.thirdPersonView > 0) {
         double d3 = (double)(this.field_78491_C + (this.field_78490_B - this.field_78491_C) * p_78467_1_);
         if(this.field_78531_r.gameSettings.field_74325_U) {
            GlStateManager.func_179109_b(0.0F, 0.0F, (float)(-d3));
         } else {
            float f1 = entity.rotationYaw;
            float f2 = entity.rotationPitch;
            if(this.field_78531_r.gameSettings.thirdPersonView == 2) {
               f2 += 180.0F;
            }

            double d4 = (double)(-MathHelper.sin(f1 / 180.0F * 3.1415927F) * MathHelper.cos(f2 / 180.0F * 3.1415927F)) * d3;
            double d5 = (double)(MathHelper.cos(f1 / 180.0F * 3.1415927F) * MathHelper.cos(f2 / 180.0F * 3.1415927F)) * d3;
            double d6 = (double)(-MathHelper.sin(f2 / 180.0F * 3.1415927F)) * d3;

            for(int i = 0; i < 8; ++i) {
               float f3 = (float)((i & 1) * 2 - 1);
               float f4 = (float)((i >> 1 & 1) * 2 - 1);
               float f5 = (float)((i >> 2 & 1) * 2 - 1);
               f3 = f3 * 0.1F;
               f4 = f4 * 0.1F;
               f5 = f5 * 0.1F;
               MovingObjectPosition movingobjectposition = this.field_78531_r.world.func_72933_a(new Vec3(d0 + (double)f3, d1 + (double)f4, d2 + (double)f5), new Vec3(d0 - d4 + (double)f3 + (double)f5, d1 - d6 + (double)f4, d2 - d5 + (double)f5));
               if(movingobjectposition != null) {
                  double d7 = movingobjectposition.hitResult.distanceTo(new Vec3(d0, d1, d2));
                  if(d7 < d3) {
                     d3 = d7;
                  }
               }
            }

            if(this.field_78531_r.gameSettings.thirdPersonView == 2) {
               GlStateManager.func_179114_b(180.0F, 0.0F, 1.0F, 0.0F);
            }

            GlStateManager.func_179114_b(entity.rotationPitch - f2, 1.0F, 0.0F, 0.0F);
            GlStateManager.func_179114_b(entity.rotationYaw - f1, 0.0F, 1.0F, 0.0F);
            GlStateManager.func_179109_b(0.0F, 0.0F, (float)(-d3));
            GlStateManager.func_179114_b(f1 - entity.rotationYaw, 0.0F, 1.0F, 0.0F);
            GlStateManager.func_179114_b(f2 - entity.rotationPitch, 1.0F, 0.0F, 0.0F);
         }
      } else {
         GlStateManager.func_179109_b(0.0F, 0.0F, -0.1F);
      }

      if(Reflector.EntityViewRenderEvent_CameraSetup_Constructor.exists()) {
         if(!this.field_78531_r.gameSettings.field_74325_U) {
            float f6 = entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * p_78467_1_ + 180.0F;
            float f7 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * p_78467_1_;
            float f8 = 0.0F;
            if(entity instanceof EntityAnimal) {
               EntityAnimal entityanimal = (EntityAnimal)entity;
               f6 = entityanimal.prevRotationYawHead + (entityanimal.rotationYawHead - entityanimal.prevRotationYawHead) * p_78467_1_ + 180.0F;
            }

            Block block1 = ActiveRenderInfo.func_180786_a(this.field_78531_r.world, entity, p_78467_1_);
            Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_CameraSetup_Constructor, new Object[]{this, entity, block1, Float.valueOf(p_78467_1_), Float.valueOf(f6), Float.valueOf(f7), Float.valueOf(f8)});
            Reflector.postForgeBusEvent(object);
            f8 = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_roll, f8);
            f7 = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_pitch, f7);
            f6 = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_yaw, f6);
            GlStateManager.func_179114_b(f8, 0.0F, 0.0F, 1.0F);
            GlStateManager.func_179114_b(f7, 1.0F, 0.0F, 0.0F);
            GlStateManager.func_179114_b(f6, 0.0F, 1.0F, 0.0F);
         }
      } else if(!this.field_78531_r.gameSettings.field_74325_U) {
         GlStateManager.func_179114_b(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * p_78467_1_, 1.0F, 0.0F, 0.0F);
         if(entity instanceof EntityAnimal) {
            EntityAnimal entityanimal1 = (EntityAnimal)entity;
            GlStateManager.func_179114_b(entityanimal1.prevRotationYawHead + (entityanimal1.rotationYawHead - entityanimal1.prevRotationYawHead) * p_78467_1_ + 180.0F, 0.0F, 1.0F, 0.0F);
         } else {
            GlStateManager.func_179114_b(entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * p_78467_1_ + 180.0F, 0.0F, 1.0F, 0.0F);
         }
      }

      GlStateManager.func_179109_b(0.0F, -f, 0.0F);
      d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double)p_78467_1_;
      d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)p_78467_1_ + (double)f;
      d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double)p_78467_1_;
      this.field_78500_U = this.field_78531_r.worldRenderer.func_72721_a(d0, d1, d2, p_78467_1_);
   }

   public void func_78479_a(float p_78479_1_, int p_78479_2_) {
      this.farPlaneDistance = (float)(this.field_78531_r.gameSettings.renderDistanceChunks * 16);
      if(Config.isFogFancy()) {
         this.farPlaneDistance *= 0.95F;
      }

      if(Config.isFogFast()) {
         this.farPlaneDistance *= 0.83F;
      }

      GlStateManager.func_179128_n(5889);
      GlStateManager.func_179096_D();
      float f = 0.07F;
      if(this.field_78531_r.gameSettings.field_74337_g) {
         GlStateManager.func_179109_b((float)(-(p_78479_2_ * 2 - 1)) * f, 0.0F, 0.0F);
      }

      this.clipDistance = this.farPlaneDistance * 2.0F;
      if(this.clipDistance < 173.0F) {
         this.clipDistance = 173.0F;
      }

      if(this.field_78531_r.world.dimension.func_177502_q() == 1) {
         this.clipDistance = 256.0F;
      }

      if(this.cameraZoom != 1.0D) {
         GlStateManager.func_179109_b((float)this.field_78502_W, (float)(-this.field_78509_X), 0.0F);
         GlStateManager.func_179139_a(this.cameraZoom, this.cameraZoom, 1.0D);
      }

      Project.gluPerspective(this.func_78481_a(p_78479_1_, true), (float)this.field_78531_r.field_71443_c / (float)this.field_78531_r.field_71440_d, 0.05F, this.clipDistance);
      GlStateManager.func_179128_n(5888);
      GlStateManager.func_179096_D();
      if(this.field_78531_r.gameSettings.field_74337_g) {
         GlStateManager.func_179109_b((float)(p_78479_2_ * 2 - 1) * 0.1F, 0.0F, 0.0F);
      }

      this.func_78482_e(p_78479_1_);
      if(this.field_78531_r.gameSettings.viewBobbing) {
         this.func_78475_f(p_78479_1_);
      }

      float f1 = this.field_78531_r.player.prevTimeInPortal + (this.field_78531_r.player.timeInPortal - this.field_78531_r.player.prevTimeInPortal) * p_78479_1_;
      if(f1 > 0.0F) {
         byte b0 = 20;
         if(this.field_78531_r.player.isPotionActive(Potion.NAUSEA)) {
            b0 = 7;
         }

         float f2 = 5.0F / (f1 * f1 + 5.0F) - f1 * 0.04F;
         f2 = f2 * f2;
         GlStateManager.func_179114_b(((float)this.rendererUpdateCount + p_78479_1_) * (float)b0, 0.0F, 1.0F, 1.0F);
         GlStateManager.func_179152_a(1.0F / f2, 1.0F, 1.0F);
         GlStateManager.func_179114_b(-((float)this.rendererUpdateCount + p_78479_1_) * (float)b0, 0.0F, 1.0F, 1.0F);
      }

      this.func_78467_g(p_78479_1_);
      if(this.debugView) {
         switch(this.field_175079_V) {
         case 0:
            GlStateManager.func_179114_b(90.0F, 0.0F, 1.0F, 0.0F);
            break;
         case 1:
            GlStateManager.func_179114_b(180.0F, 0.0F, 1.0F, 0.0F);
            break;
         case 2:
            GlStateManager.func_179114_b(-90.0F, 0.0F, 1.0F, 0.0F);
            break;
         case 3:
            GlStateManager.func_179114_b(90.0F, 1.0F, 0.0F, 0.0F);
            break;
         case 4:
            GlStateManager.func_179114_b(-90.0F, 1.0F, 0.0F, 0.0F);
         }
      }

   }

   private void func_78476_b(float p_78476_1_, int p_78476_2_) {
      this.renderHand(p_78476_1_, p_78476_2_, true, true, false);
   }

   public void renderHand(float p_renderHand_1_, int p_renderHand_2_, boolean p_renderHand_3_, boolean p_renderHand_4_, boolean p_renderHand_5_) {
      if(!this.debugView) {
         GlStateManager.func_179128_n(5889);
         GlStateManager.func_179096_D();
         float f = 0.07F;
         if(this.field_78531_r.gameSettings.field_74337_g) {
            GlStateManager.func_179109_b((float)(-(p_renderHand_2_ * 2 - 1)) * f, 0.0F, 0.0F);
         }

         if(Config.isShaders()) {
            Shaders.applyHandDepth();
         }

         Project.gluPerspective(this.func_78481_a(p_renderHand_1_, false), (float)this.field_78531_r.field_71443_c / (float)this.field_78531_r.field_71440_d, 0.05F, this.farPlaneDistance * 2.0F);
         GlStateManager.func_179128_n(5888);
         GlStateManager.func_179096_D();
         if(this.field_78531_r.gameSettings.field_74337_g) {
            GlStateManager.func_179109_b((float)(p_renderHand_2_ * 2 - 1) * 0.1F, 0.0F, 0.0F);
         }

         boolean flag = false;
         if(p_renderHand_3_) {
            GlStateManager.func_179094_E();
            this.func_78482_e(p_renderHand_1_);
            if(this.field_78531_r.gameSettings.viewBobbing) {
               this.func_78475_f(p_renderHand_1_);
            }

            flag = this.field_78531_r.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.field_78531_r.getRenderViewEntity()).isSleeping();
            boolean flag1 = !ReflectorForge.renderFirstPersonHand(this.field_78531_r.worldRenderer, p_renderHand_1_, p_renderHand_2_);
            if(flag1 && this.field_78531_r.gameSettings.thirdPersonView == 0 && !flag && !this.field_78531_r.gameSettings.hideGUI && !this.field_78531_r.playerController.func_78747_a()) {
               this.func_180436_i();
               if(Config.isShaders()) {
                  ShadersRender.renderItemFP(this.itemRenderer, p_renderHand_1_, p_renderHand_5_);
               } else {
                  this.itemRenderer.func_78440_a(p_renderHand_1_);
               }

               this.func_175072_h();
            }

            GlStateManager.func_179121_F();
         }

         if(!p_renderHand_4_) {
            return;
         }

         this.func_175072_h();
         if(this.field_78531_r.field_71474_y.thirdPersonView == 0 && !flag) {
            this.itemRenderer.func_78447_b(p_renderHand_1_);
            this.func_78482_e(p_renderHand_1_);
         }

         if(this.field_78531_r.field_71474_y.viewBobbing) {
            this.func_78475_f(p_renderHand_1_);
         }
      }

   }

   public void func_175072_h() {
      GlStateManager.func_179138_g(OpenGlHelper.field_77476_b);
      GlStateManager.func_179090_x();
      GlStateManager.func_179138_g(OpenGlHelper.field_77478_a);
      if(Config.isShaders()) {
         Shaders.disableLightmap();
      }

   }

   public void func_180436_i() {
      GlStateManager.func_179138_g(OpenGlHelper.field_77476_b);
      GlStateManager.func_179128_n(5890);
      GlStateManager.func_179096_D();
      float f = 0.00390625F;
      GlStateManager.func_179152_a(f, f, f);
      GlStateManager.func_179109_b(8.0F, 8.0F, 8.0F);
      GlStateManager.func_179128_n(5888);
      this.field_78531_r.getTextureManager().bindTexture(this.field_110922_T);
      GL11.glTexParameteri(3553, 10241, 9729);
      GL11.glTexParameteri(3553, 10240, 9729);
      GL11.glTexParameteri(3553, 10242, 10496);
      GL11.glTexParameteri(3553, 10243, 10496);
      GlStateManager.func_179131_c(1.0F, 1.0F, 1.0F, 1.0F);
      GlStateManager.func_179098_w();
      GlStateManager.func_179138_g(OpenGlHelper.field_77478_a);
      if(Config.isShaders()) {
         Shaders.enableLightmap();
      }

   }

   private void func_78470_f() {
      this.field_175075_L = (float)((double)this.field_175075_L + (Math.random() - Math.random()) * Math.random() * Math.random());
      this.field_175075_L = (float)((double)this.field_175075_L * 0.9D);
      this.field_78514_e += (this.field_175075_L - this.field_78514_e) * 1.0F;
      this.field_78536_aa = true;
   }

   private void func_78472_g(float p_78472_1_) {
      if(this.field_78536_aa) {
         this.field_78531_r.profiler.startSection("lightTex");
         WorldClient worldclient = this.field_78531_r.world;
         if(worldclient != null) {
            if(Config.isCustomColors() && CustomColors.updateLightmap(worldclient, this.field_78514_e, this.field_78504_Q, this.field_78531_r.player.isPotionActive(Potion.NIGHT_VISION))) {
               this.lightmapTexture.updateDynamicTexture();
               this.field_78536_aa = false;
               this.field_78531_r.profiler.endSection();
               return;
            }

            float f = worldclient.func_72971_b(1.0F);
            float f1 = f * 0.95F + 0.05F;

            for(int i = 0; i < 256; ++i) {
               float f2 = worldclient.dimension.func_177497_p()[i / 16] * f1;
               float f3 = worldclient.dimension.func_177497_p()[i % 16] * (this.field_78514_e * 0.1F + 1.5F);
               if(worldclient.func_175658_ac() > 0) {
                  f2 = worldclient.dimension.func_177497_p()[i / 16];
               }

               float f4 = f2 * (f * 0.65F + 0.35F);
               float f5 = f2 * (f * 0.65F + 0.35F);
               float f6 = f3 * ((f3 * 0.6F + 0.4F) * 0.6F + 0.4F);
               float f7 = f3 * (f3 * f3 * 0.6F + 0.4F);
               float f8 = f4 + f3;
               float f9 = f5 + f6;
               float f10 = f2 + f7;
               f8 = f8 * 0.96F + 0.03F;
               f9 = f9 * 0.96F + 0.03F;
               f10 = f10 * 0.96F + 0.03F;
               if(this.bossColorModifier > 0.0F) {
                  float f11 = this.bossColorModifierPrev + (this.bossColorModifier - this.bossColorModifierPrev) * p_78472_1_;
                  f8 = f8 * (1.0F - f11) + f8 * 0.7F * f11;
                  f9 = f9 * (1.0F - f11) + f9 * 0.6F * f11;
                  f10 = f10 * (1.0F - f11) + f10 * 0.6F * f11;
               }

               if(worldclient.dimension.func_177502_q() == 1) {
                  f8 = 0.22F + f3 * 0.75F;
                  f9 = 0.28F + f6 * 0.75F;
                  f10 = 0.25F + f7 * 0.75F;
               }

               if(this.field_78531_r.player.isPotionActive(Potion.NIGHT_VISION)) {
                  float f15 = this.getNightVisionBrightness(this.field_78531_r.player, p_78472_1_);
                  float f12 = 1.0F / f8;
                  if(f12 > 1.0F / f9) {
                     f12 = 1.0F / f9;
                  }

                  if(f12 > 1.0F / f10) {
                     f12 = 1.0F / f10;
                  }

                  f8 = f8 * (1.0F - f15) + f8 * f12 * f15;
                  f9 = f9 * (1.0F - f15) + f9 * f12 * f15;
                  f10 = f10 * (1.0F - f15) + f10 * f12 * f15;
               }

               if(f8 > 1.0F) {
                  f8 = 1.0F;
               }

               if(f9 > 1.0F) {
                  f9 = 1.0F;
               }

               if(f10 > 1.0F) {
                  f10 = 1.0F;
               }

               float f16 = this.field_78531_r.field_71474_y.gamma;
               float f17 = 1.0F - f8;
               float f13 = 1.0F - f9;
               float f14 = 1.0F - f10;
               f17 = 1.0F - f17 * f17 * f17 * f17;
               f13 = 1.0F - f13 * f13 * f13 * f13;
               f14 = 1.0F - f14 * f14 * f14 * f14;
               f8 = f8 * (1.0F - f16) + f17 * f16;
               f9 = f9 * (1.0F - f16) + f13 * f16;
               f10 = f10 * (1.0F - f16) + f14 * f16;
               f8 = f8 * 0.96F + 0.03F;
               f9 = f9 * 0.96F + 0.03F;
               f10 = f10 * 0.96F + 0.03F;
               if(f8 > 1.0F) {
                  f8 = 1.0F;
               }

               if(f9 > 1.0F) {
                  f9 = 1.0F;
               }

               if(f10 > 1.0F) {
                  f10 = 1.0F;
               }

               if(f8 < 0.0F) {
                  f8 = 0.0F;
               }

               if(f9 < 0.0F) {
                  f9 = 0.0F;
               }

               if(f10 < 0.0F) {
                  f10 = 0.0F;
               }

               short short1 = 255;
               int j = (int)(f8 * 255.0F);
               int k = (int)(f9 * 255.0F);
               int l = (int)(f10 * 255.0F);
               this.field_78504_Q[i] = short1 << 24 | j << 16 | k << 8 | l;
            }

            this.lightmapTexture.updateDynamicTexture();
            this.field_78536_aa = false;
            this.field_78531_r.profiler.endSection();
         }
      }

   }

   public float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float p_180438_2_) {
      int i = entitylivingbaseIn.getActivePotionEffect(Potion.NIGHT_VISION).getDuration();
      return i > 200?1.0F:0.7F + MathHelper.sin(((float)i - p_180438_2_) * 3.1415927F * 0.2F) * 0.3F;
   }

   public void func_181560_a(float p_181560_1_, long p_181560_2_) {
      this.frameInit();
      boolean flag = Display.isActive();
      if(!flag && this.field_78531_r.field_71474_y.pauseOnLostFocus && (!this.field_78531_r.field_71474_y.touchscreen || !Mouse.isButtonDown(1))) {
         if(Minecraft.func_71386_F() - this.prevFrameTime > 500L) {
            this.field_78531_r.displayInGameMenu();
         }
      } else {
         this.prevFrameTime = Minecraft.func_71386_F();
      }

      this.field_78531_r.profiler.startSection("mouse");
      if(flag && Minecraft.IS_RUNNING_ON_MAC && this.field_78531_r.field_71415_G && !Mouse.isInsideWindow()) {
         Mouse.setGrabbed(false);
         Mouse.setCursorPosition(Display.getWidth() / 2, Display.getHeight() / 2);
         Mouse.setGrabbed(true);
      }

      if(this.field_78531_r.field_71415_G && flag) {
         this.field_78531_r.mouseHelper.func_74374_c();
         float f = this.field_78531_r.field_71474_y.mouseSensitivity * 0.6F + 0.2F;
         float f1 = f * f * f * 8.0F;
         float f2 = (float)this.field_78531_r.mouseHelper.field_74377_a * f1;
         float f3 = (float)this.field_78531_r.mouseHelper.field_74375_b * f1;
         byte b0 = 1;
         if(this.field_78531_r.field_71474_y.invertMouse) {
            b0 = -1;
         }

         if(this.field_78531_r.field_71474_y.smoothCamera) {
            this.field_78496_H += f2;
            this.field_78497_I += f3;
            float f4 = p_181560_1_ - this.field_78492_L;
            this.field_78492_L = p_181560_1_;
            f2 = this.field_78498_J * f4;
            f3 = this.field_78499_K * f4;
            this.field_78531_r.player.func_70082_c(f2, f3 * (float)b0);
         } else {
            this.field_78496_H = 0.0F;
            this.field_78497_I = 0.0F;
            this.field_78531_r.player.func_70082_c(f2, f3 * (float)b0);
         }
      }

      this.field_78531_r.profiler.endSection();
      if(!this.field_78531_r.skipRenderWorld) {
         field_78517_a = this.field_78531_r.field_71474_y.field_74337_g;
         final ScaledResolution scaledresolution = new ScaledResolution(this.field_78531_r);
         int l = scaledresolution.func_78326_a();
         int i1 = scaledresolution.func_78328_b();
         final int j1 = Mouse.getX() * l / this.field_78531_r.field_71443_c;
         final int k1 = i1 - Mouse.getY() * i1 / this.field_78531_r.field_71440_d - 1;
         int l1 = this.field_78531_r.field_71474_y.framerateLimit;
         if(this.field_78531_r.world != null) {
            this.field_78531_r.profiler.startSection("level");
            int i = Math.min(Minecraft.func_175610_ah(), l1);
            i = Math.max(i, 60);
            long j = System.nanoTime() - p_181560_2_;
            long k = Math.max((long)(1000000000 / i / 4) - j, 0L);
            this.func_78471_a(p_181560_1_, System.nanoTime() + k);
            if(OpenGlHelper.field_148824_g) {
               this.field_78531_r.worldRenderer.renderEntityOutlineFramebuffer();
               if(this.shaderGroup != null && this.useShader) {
                  GlStateManager.func_179128_n(5890);
                  GlStateManager.func_179094_E();
                  GlStateManager.func_179096_D();
                  this.shaderGroup.render(p_181560_1_);
                  GlStateManager.func_179121_F();
               }

               this.field_78531_r.getFramebuffer().bindFramebuffer(true);
            }

            this.field_78510_Z = System.nanoTime();
            this.field_78531_r.profiler.func_76318_c("gui");
            if(!this.field_78531_r.field_71474_y.hideGUI || this.field_78531_r.currentScreen != null) {
               GlStateManager.func_179092_a(516, 0.1F);
               this.field_78531_r.ingameGUI.renderGameOverlay(p_181560_1_);
               if(this.field_78531_r.field_71474_y.ofShowFps && !this.field_78531_r.field_71474_y.showDebugInfo) {
                  Config.drawFps();
               }

               if(this.field_78531_r.field_71474_y.showDebugInfo) {
                  Lagometer.showLagometer(scaledresolution);
               }
            }

            this.field_78531_r.profiler.endSection();
         } else {
            GlStateManager.func_179083_b(0, 0, this.field_78531_r.field_71443_c, this.field_78531_r.field_71440_d);
            GlStateManager.func_179128_n(5889);
            GlStateManager.func_179096_D();
            GlStateManager.func_179128_n(5888);
            GlStateManager.func_179096_D();
            this.func_78478_c();
            this.field_78510_Z = System.nanoTime();
            TileEntityRendererDispatcher.instance.textureManager = this.field_78531_r.getTextureManager();
         }

         if(this.field_78531_r.currentScreen != null) {
            GlStateManager.func_179086_m(256);

            try {
               if(Reflector.ForgeHooksClient_drawScreen.exists()) {
                  Reflector.callVoid(Reflector.ForgeHooksClient_drawScreen, new Object[]{this.field_78531_r.currentScreen, Integer.valueOf(j1), Integer.valueOf(k1), Float.valueOf(p_181560_1_)});
               } else {
                  this.field_78531_r.currentScreen.func_73863_a(j1, k1, p_181560_1_);
               }
            } catch (Throwable throwable) {
               CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering screen");
               CrashReportCategory crashreportcategory = crashreport.makeCategory("Screen render details");
               crashreportcategory.func_71500_a("Screen name", new EntityRenderer$2(this));
               crashreportcategory.func_71500_a("Mouse location", new Callable() {
                  private static final String __OBFID = "CL_00000950";

                  public String call() throws Exception {
                     return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", new Object[]{Integer.valueOf(j1), Integer.valueOf(k1), Integer.valueOf(Mouse.getX()), Integer.valueOf(Mouse.getY())});
                  }
               });
               crashreportcategory.func_71500_a("Screen size", new Callable() {
                  private static final String __OBFID = "CL_00000951";

                  public String call() throws Exception {
                     return String.format("Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %d", new Object[]{Integer.valueOf(scaledresolution.func_78326_a()), Integer.valueOf(scaledresolution.func_78328_b()), Integer.valueOf(EntityRenderer.this.field_78531_r.field_71443_c), Integer.valueOf(EntityRenderer.this.field_78531_r.field_71440_d), Integer.valueOf(scaledresolution.func_78325_e())});
                  }
               });
               throw new ReportedException(crashreport);
            }
         }
      }

      this.frameFinish();
      this.waitForServerThread();
      Lagometer.updateLagometer();
      if(this.field_78531_r.field_71474_y.ofProfiler) {
         this.field_78531_r.field_71474_y.showDebugProfilerChart = true;
      }

   }

   public void func_152430_c(float p_152430_1_) {
      this.func_78478_c();
      this.field_78531_r.ingameGUI.func_180478_c(new ScaledResolution(this.field_78531_r));
   }

   private boolean isDrawBlockOutline() {
      if(!this.drawBlockOutline) {
         return false;
      } else {
         Entity entity = this.field_78531_r.getRenderViewEntity();
         boolean flag = entity instanceof EntityPlayer && !this.field_78531_r.field_71474_y.hideGUI;
         if(flag && !((EntityPlayer)entity).abilities.allowEdit) {
            ItemStack itemstack = ((EntityPlayer)entity).func_71045_bC();
            if(this.field_78531_r.objectMouseOver != null && this.field_78531_r.objectMouseOver.field_72313_a == MovingObjectPosition.MovingObjectType.BLOCK) {
               BlockPos blockpos = this.field_78531_r.objectMouseOver.func_178782_a();
               IBlockState iblockstate = this.field_78531_r.world.getBlockState(blockpos);
               Block block = iblockstate.getBlock();
               if(this.field_78531_r.playerController.getCurrentGameType() == WorldSettings.GameType.SPECTATOR) {
                  flag = ReflectorForge.blockHasTileEntity(iblockstate) && this.field_78531_r.world.getTileEntity(blockpos) instanceof IInventory;
               } else {
                  flag = itemstack != null && (itemstack.func_179544_c(block) || itemstack.func_179547_d(block));
               }
            }
         }

         return flag;
      }
   }

   private void func_175067_i(float p_175067_1_) {
      if(this.field_78531_r.field_71474_y.showDebugInfo && !this.field_78531_r.field_71474_y.hideGUI && !this.field_78531_r.player.hasReducedDebug() && !this.field_78531_r.field_71474_y.reducedDebugInfo) {
         Entity entity = this.field_78531_r.getRenderViewEntity();
         GlStateManager.func_179147_l();
         GlStateManager.func_179120_a(770, 771, 1, 0);
         GL11.glLineWidth(1.0F);
         GlStateManager.func_179090_x();
         GlStateManager.func_179132_a(false);
         GlStateManager.func_179094_E();
         GlStateManager.func_179128_n(5888);
         GlStateManager.func_179096_D();
         this.func_78467_g(p_175067_1_);
         GlStateManager.func_179109_b(0.0F, entity.getEyeHeight(), 0.0F);
         RenderGlobal.func_181563_a(new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.005D, 1.0E-4D, 1.0E-4D), 255, 0, 0, 255);
         RenderGlobal.func_181563_a(new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0E-4D, 1.0E-4D, 0.005D), 0, 0, 255, 255);
         RenderGlobal.func_181563_a(new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0E-4D, 0.0033D, 1.0E-4D), 0, 255, 0, 255);
         GlStateManager.func_179121_F();
         GlStateManager.func_179132_a(true);
         GlStateManager.func_179098_w();
         GlStateManager.func_179084_k();
      }

   }

   public void func_78471_a(float p_78471_1_, long p_78471_2_) {
      this.func_78472_g(p_78471_1_);
      if(this.field_78531_r.getRenderViewEntity() == null) {
         this.field_78531_r.setRenderViewEntity(this.field_78531_r.player);
      }

      this.getMouseOver(p_78471_1_);
      if(Config.isShaders()) {
         Shaders.beginRender(this.field_78531_r, p_78471_1_, p_78471_2_);
      }

      GlStateManager.func_179126_j();
      GlStateManager.func_179141_d();
      GlStateManager.func_179092_a(516, 0.1F);
      this.field_78531_r.profiler.startSection("center");
      if(this.field_78531_r.field_71474_y.field_74337_g) {
         field_78515_b = 0;
         GlStateManager.func_179135_a(false, true, true, false);
         this.func_175068_a(0, p_78471_1_, p_78471_2_);
         field_78515_b = 1;
         GlStateManager.func_179135_a(true, false, false, false);
         this.func_175068_a(1, p_78471_1_, p_78471_2_);
         GlStateManager.func_179135_a(true, true, true, false);
      } else {
         this.func_175068_a(2, p_78471_1_, p_78471_2_);
      }

      this.field_78531_r.profiler.endSection();
   }

   private void func_175068_a(int p_175068_1_, float p_175068_2_, long p_175068_3_) {
      boolean flag = Config.isShaders();
      if(flag) {
         Shaders.beginRenderPass(p_175068_1_, p_175068_2_, p_175068_3_);
      }

      RenderGlobal renderglobal = this.field_78531_r.worldRenderer;
      EffectRenderer effectrenderer = this.field_78531_r.particles;
      boolean flag1 = this.isDrawBlockOutline();
      GlStateManager.func_179089_o();
      this.field_78531_r.profiler.func_76318_c("clear");
      if(flag) {
         Shaders.setViewport(0, 0, this.field_78531_r.field_71443_c, this.field_78531_r.field_71440_d);
      } else {
         GlStateManager.func_179083_b(0, 0, this.field_78531_r.field_71443_c, this.field_78531_r.field_71440_d);
      }

      this.func_78466_h(p_175068_2_);
      GlStateManager.func_179086_m(16640);
      if(flag) {
         Shaders.clearRenderBuffer();
      }

      this.field_78531_r.profiler.func_76318_c("camera");
      this.func_78479_a(p_175068_2_, p_175068_1_);
      if(flag) {
         Shaders.setCamera(p_175068_2_);
      }

      ActiveRenderInfo.func_74583_a(this.field_78531_r.player, this.field_78531_r.field_71474_y.thirdPersonView == 2);
      this.field_78531_r.profiler.func_76318_c("frustum");
      ClippingHelperImpl.func_78558_a();
      this.field_78531_r.profiler.func_76318_c("culling");
      Frustum frustum = new Frustum();
      Entity entity = this.field_78531_r.getRenderViewEntity();
      double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)p_175068_2_;
      double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)p_175068_2_;
      double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)p_175068_2_;
      if(flag) {
         ShadersRender.setFrustrumPosition(frustum, d0, d1, d2);
      } else {
         frustum.func_78547_a(d0, d1, d2);
      }

      if((Config.isSkyEnabled() || Config.isSunMoonEnabled() || Config.isStarsEnabled()) && !Shaders.isShadowPass) {
         this.func_78468_a(-1, p_175068_2_);
         this.field_78531_r.profiler.func_76318_c("sky");
         GlStateManager.func_179128_n(5889);
         GlStateManager.func_179096_D();
         Project.gluPerspective(this.func_78481_a(p_175068_2_, true), (float)this.field_78531_r.field_71443_c / (float)this.field_78531_r.field_71440_d, 0.05F, this.clipDistance);
         GlStateManager.func_179128_n(5888);
         if(flag) {
            Shaders.beginSky();
         }

         renderglobal.func_174976_a(p_175068_2_, p_175068_1_);
         if(flag) {
            Shaders.endSky();
         }

         GlStateManager.func_179128_n(5889);
         GlStateManager.func_179096_D();
         Project.gluPerspective(this.func_78481_a(p_175068_2_, true), (float)this.field_78531_r.field_71443_c / (float)this.field_78531_r.field_71440_d, 0.05F, this.clipDistance);
         GlStateManager.func_179128_n(5888);
      } else {
         GlStateManager.func_179084_k();
      }

      this.func_78468_a(0, p_175068_2_);
      GlStateManager.func_179103_j(7425);
      if(entity.posY + (double)entity.getEyeHeight() < 128.0D + (double)(this.field_78531_r.field_71474_y.ofCloudsHeight * 128.0F)) {
         this.func_180437_a(renderglobal, p_175068_2_, p_175068_1_);
      }

      this.field_78531_r.profiler.func_76318_c("prepareterrain");
      this.func_78468_a(0, p_175068_2_);
      this.field_78531_r.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
      RenderHelper.disableStandardItemLighting();
      this.field_78531_r.profiler.func_76318_c("terrain_setup");
      if(flag) {
         ShadersRender.setupTerrain(renderglobal, entity, (double)p_175068_2_, frustum, this.field_175084_ae++, this.field_78531_r.player.isSpectator());
      } else {
         renderglobal.func_174970_a(entity, (double)p_175068_2_, frustum, this.field_175084_ae++, this.field_78531_r.player.isSpectator());
      }

      if(p_175068_1_ == 0 || p_175068_1_ == 2) {
         this.field_78531_r.profiler.func_76318_c("updatechunks");
         Lagometer.timerChunkUpload.start();
         this.field_78531_r.worldRenderer.updateChunks(p_175068_3_);
         Lagometer.timerChunkUpload.end();
      }

      this.field_78531_r.profiler.func_76318_c("terrain");
      Lagometer.timerTerrain.start();
      if(this.field_78531_r.field_71474_y.ofSmoothFps && p_175068_1_ > 0) {
         this.field_78531_r.profiler.func_76318_c("finish");
         GL11.glFinish();
         this.field_78531_r.profiler.func_76318_c("terrain");
      }

      GlStateManager.func_179128_n(5888);
      GlStateManager.func_179094_E();
      GlStateManager.func_179118_c();
      if(flag) {
         ShadersRender.beginTerrainSolid();
      }

      renderglobal.func_174977_a(EnumWorldBlockLayer.SOLID, (double)p_175068_2_, p_175068_1_, entity);
      GlStateManager.func_179141_d();
      if(flag) {
         ShadersRender.beginTerrainCutoutMipped();
      }

      renderglobal.func_174977_a(EnumWorldBlockLayer.CUTOUT_MIPPED, (double)p_175068_2_, p_175068_1_, entity);
      this.field_78531_r.getTextureManager().func_110581_b(TextureMap.LOCATION_BLOCKS_TEXTURE).func_174936_b(false, false);
      if(flag) {
         ShadersRender.beginTerrainCutout();
      }

      renderglobal.func_174977_a(EnumWorldBlockLayer.CUTOUT, (double)p_175068_2_, p_175068_1_, entity);
      this.field_78531_r.getTextureManager().func_110581_b(TextureMap.LOCATION_BLOCKS_TEXTURE).func_174935_a();
      if(flag) {
         ShadersRender.endTerrain();
      }

      Lagometer.timerTerrain.end();
      GlStateManager.func_179103_j(7424);
      GlStateManager.func_179092_a(516, 0.1F);
      if(!this.debugView) {
         GlStateManager.func_179128_n(5888);
         GlStateManager.func_179121_F();
         GlStateManager.func_179094_E();
         RenderHelper.func_74519_b();
         this.field_78531_r.profiler.func_76318_c("entities");
         if(Reflector.ForgeHooksClient_setRenderPass.exists()) {
            Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[]{Integer.valueOf(0)});
         }

         renderglobal.func_180446_a(entity, frustum, p_175068_2_);
         if(Reflector.ForgeHooksClient_setRenderPass.exists()) {
            Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[]{Integer.valueOf(-1)});
         }

         RenderHelper.disableStandardItemLighting();
         this.func_175072_h();
         GlStateManager.func_179128_n(5888);
         GlStateManager.func_179121_F();
         GlStateManager.func_179094_E();
         if(this.field_78531_r.objectMouseOver != null && entity.func_70055_a(Material.WATER) && flag1) {
            EntityPlayer entityplayer = (EntityPlayer)entity;
            GlStateManager.func_179118_c();
            this.field_78531_r.field_71424_I.func_76318_c("outline");
            if((!Reflector.ForgeHooksClient_onDrawBlockHighlight.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[]{renderglobal, entityplayer, this.field_78531_r.objectMouseOver, Integer.valueOf(0), entityplayer.func_70694_bm(), Float.valueOf(p_175068_2_)})) && !this.field_78531_r.field_71474_y.hideGUI) {
               renderglobal.func_72731_b(entityplayer, this.field_78531_r.objectMouseOver, 0, p_175068_2_);
            }

            GlStateManager.func_179141_d();
         }
      }

      GlStateManager.func_179128_n(5888);
      GlStateManager.func_179121_F();
      if(flag1 && this.field_78531_r.objectMouseOver != null && !entity.func_70055_a(Material.WATER)) {
         EntityPlayer entityplayer1 = (EntityPlayer)entity;
         GlStateManager.func_179118_c();
         this.field_78531_r.field_71424_I.func_76318_c("outline");
         if((!Reflector.ForgeHooksClient_onDrawBlockHighlight.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[]{renderglobal, entityplayer1, this.field_78531_r.objectMouseOver, Integer.valueOf(0), entityplayer1.func_70694_bm(), Float.valueOf(p_175068_2_)})) && !this.field_78531_r.field_71474_y.hideGUI) {
            renderglobal.func_72731_b(entityplayer1, this.field_78531_r.objectMouseOver, 0, p_175068_2_);
         }

         GlStateManager.func_179141_d();
      }

      if(!renderglobal.damagedBlocks.isEmpty()) {
         this.field_78531_r.field_71424_I.func_76318_c("destroyProgress");
         GlStateManager.func_179147_l();
         GlStateManager.func_179120_a(770, 1, 1, 0);
         this.field_78531_r.getTextureManager().func_110581_b(TextureMap.LOCATION_BLOCKS_TEXTURE).func_174936_b(false, false);
         renderglobal.func_174981_a(Tessellator.getInstance(), Tessellator.getInstance().getBuffer(), entity, p_175068_2_);
         this.field_78531_r.getTextureManager().func_110581_b(TextureMap.LOCATION_BLOCKS_TEXTURE).func_174935_a();
         GlStateManager.func_179084_k();
      }

      GlStateManager.func_179120_a(770, 771, 1, 0);
      GlStateManager.func_179084_k();
      if(!this.debugView) {
         this.func_180436_i();
         this.field_78531_r.field_71424_I.func_76318_c("litParticles");
         if(flag) {
            Shaders.beginLitParticles();
         }

         effectrenderer.func_78872_b(entity, p_175068_2_);
         RenderHelper.disableStandardItemLighting();
         this.func_78468_a(0, p_175068_2_);
         this.field_78531_r.field_71424_I.func_76318_c("particles");
         if(flag) {
            Shaders.beginParticles();
         }

         effectrenderer.func_78874_a(entity, p_175068_2_);
         if(flag) {
            Shaders.endParticles();
         }

         this.func_175072_h();
      }

      GlStateManager.func_179132_a(false);
      GlStateManager.func_179089_o();
      this.field_78531_r.field_71424_I.func_76318_c("weather");
      if(flag) {
         Shaders.beginWeather();
      }

      this.func_78474_d(p_175068_2_);
      if(flag) {
         Shaders.endWeather();
      }

      GlStateManager.func_179132_a(true);
      renderglobal.func_180449_a(entity, p_175068_2_);
      if(flag) {
         ShadersRender.renderHand0(this, p_175068_2_, p_175068_1_);
         Shaders.preWater();
      }

      GlStateManager.func_179084_k();
      GlStateManager.func_179089_o();
      GlStateManager.func_179120_a(770, 771, 1, 0);
      GlStateManager.func_179092_a(516, 0.1F);
      this.func_78468_a(0, p_175068_2_);
      GlStateManager.func_179147_l();
      GlStateManager.func_179132_a(false);
      this.field_78531_r.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
      GlStateManager.func_179103_j(7425);
      this.field_78531_r.field_71424_I.func_76318_c("translucent");
      if(flag) {
         Shaders.beginWater();
      }

      renderglobal.func_174977_a(EnumWorldBlockLayer.TRANSLUCENT, (double)p_175068_2_, p_175068_1_, entity);
      if(flag) {
         Shaders.endWater();
      }

      if(Reflector.ForgeHooksClient_setRenderPass.exists() && !this.debugView) {
         RenderHelper.func_74519_b();
         this.field_78531_r.field_71424_I.func_76318_c("entities");
         Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[]{Integer.valueOf(1)});
         this.field_78531_r.worldRenderer.func_180446_a(entity, frustum, p_175068_2_);
         GlStateManager.func_179120_a(770, 771, 1, 0);
         Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[]{Integer.valueOf(-1)});
         RenderHelper.disableStandardItemLighting();
      }

      GlStateManager.func_179103_j(7424);
      GlStateManager.func_179132_a(true);
      GlStateManager.func_179089_o();
      GlStateManager.func_179084_k();
      GlStateManager.func_179106_n();
      if(entity.posY + (double)entity.getEyeHeight() >= 128.0D + (double)(this.field_78531_r.field_71474_y.ofCloudsHeight * 128.0F)) {
         this.field_78531_r.field_71424_I.func_76318_c("aboveClouds");
         this.func_180437_a(renderglobal, p_175068_2_, p_175068_1_);
      }

      if(Reflector.ForgeHooksClient_dispatchRenderLast.exists()) {
         this.field_78531_r.field_71424_I.func_76318_c("forge_render_last");
         Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, new Object[]{renderglobal, Float.valueOf(p_175068_2_)});
      }

      this.field_78531_r.field_71424_I.func_76318_c("hand");
      boolean flag2 = ReflectorForge.renderFirstPersonHand(this.field_78531_r.worldRenderer, p_175068_2_, p_175068_1_);
      if(!flag2 && this.renderHand && !Shaders.isShadowPass) {
         if(flag) {
            ShadersRender.renderHand1(this, p_175068_2_, p_175068_1_);
            Shaders.renderCompositeFinal();
         }

         GlStateManager.func_179086_m(256);
         if(flag) {
            ShadersRender.renderFPOverlay(this, p_175068_2_, p_175068_1_);
         } else {
            this.func_78476_b(p_175068_2_, p_175068_1_);
         }

         this.func_175067_i(p_175068_2_);
      }

      if(flag) {
         Shaders.endRender();
      }

   }

   private void func_180437_a(RenderGlobal p_180437_1_, float p_180437_2_, int p_180437_3_) {
      if(this.field_78531_r.field_71474_y.renderDistanceChunks >= 4 && !Config.isCloudsOff() && Shaders.shouldRenderClouds(this.field_78531_r.field_71474_y)) {
         this.field_78531_r.field_71424_I.func_76318_c("clouds");
         GlStateManager.func_179128_n(5889);
         GlStateManager.func_179096_D();
         Project.gluPerspective(this.func_78481_a(p_180437_2_, true), (float)this.field_78531_r.field_71443_c / (float)this.field_78531_r.field_71440_d, 0.05F, this.clipDistance * 4.0F);
         GlStateManager.func_179128_n(5888);
         GlStateManager.func_179094_E();
         this.func_78468_a(0, p_180437_2_);
         p_180437_1_.func_180447_b(p_180437_2_, p_180437_3_);
         GlStateManager.func_179106_n();
         GlStateManager.func_179121_F();
         GlStateManager.func_179128_n(5889);
         GlStateManager.func_179096_D();
         Project.gluPerspective(this.func_78481_a(p_180437_2_, true), (float)this.field_78531_r.field_71443_c / (float)this.field_78531_r.field_71440_d, 0.05F, this.clipDistance);
         GlStateManager.func_179128_n(5888);
      }

   }

   private void func_78484_h() {
      float f = this.field_78531_r.world.getRainStrength(1.0F);
      if(!Config.isRainFancy()) {
         f /= 2.0F;
      }

      if(f != 0.0F && Config.isRainSplash()) {
         this.random.setSeed((long)this.rendererUpdateCount * 312987231L);
         Entity entity = this.field_78531_r.getRenderViewEntity();
         WorldClient worldclient = this.field_78531_r.world;
         BlockPos blockpos = new BlockPos(entity);
         byte b0 = 10;
         double d0 = 0.0D;
         double d1 = 0.0D;
         double d2 = 0.0D;
         int i = 0;
         int j = (int)(100.0F * f * f);
         if(this.field_78531_r.field_71474_y.particles == 1) {
            j >>= 1;
         } else if(this.field_78531_r.field_71474_y.particles == 2) {
            j = 0;
         }

         for(int k = 0; k < j; ++k) {
            BlockPos blockpos1 = worldclient.func_175725_q(blockpos.add(this.random.nextInt(b0) - this.random.nextInt(b0), 0, this.random.nextInt(b0) - this.random.nextInt(b0)));
            BiomeGenBase biomegenbase = worldclient.func_180494_b(blockpos1);
            BlockPos blockpos2 = blockpos1.down();
            Block block = worldclient.getBlockState(blockpos2).getBlock();
            if(blockpos1.getY() <= blockpos.getY() + b0 && blockpos1.getY() >= blockpos.getY() - b0 && biomegenbase.func_76738_d() && biomegenbase.getTemperatureRaw(blockpos1) >= 0.15F) {
               double d3 = this.random.nextDouble();
               double d4 = this.random.nextDouble();
               if(block.getMaterial() == Material.LAVA) {
                  this.field_78531_r.world.func_175688_a(EnumParticleTypes.SMOKE_NORMAL, (double)blockpos1.getX() + d3, (double)((float)blockpos1.getY() + 0.1F) - block.func_149665_z(), (double)blockpos1.getZ() + d4, 0.0D, 0.0D, 0.0D, new int[0]);
               } else if(block.getMaterial() != Material.AIR) {
                  block.func_180654_a(worldclient, blockpos2);
                  ++i;
                  if(this.random.nextInt(i) == 0) {
                     d0 = (double)blockpos2.getX() + d3;
                     d1 = (double)((float)blockpos2.getY() + 0.1F) + block.func_149669_A() - 1.0D;
                     d2 = (double)blockpos2.getZ() + d4;
                  }

                  this.field_78531_r.world.func_175688_a(EnumParticleTypes.WATER_DROP, (double)blockpos2.getX() + d3, (double)((float)blockpos2.getY() + 0.1F) + block.func_149669_A(), (double)blockpos2.getZ() + d4, 0.0D, 0.0D, 0.0D, new int[0]);
               }
            }
         }

         if(i > 0 && this.random.nextInt(3) < this.field_78534_ac++) {
            this.field_78534_ac = 0;
            if(d1 > (double)(blockpos.getY() + 1) && worldclient.func_175725_q(blockpos).getY() > MathHelper.floor((float)blockpos.getY())) {
               this.field_78531_r.world.func_72980_b(d0, d1, d2, "ambient.weather.rain", 0.1F, 0.5F, false);
            } else {
               this.field_78531_r.world.func_72980_b(d0, d1, d2, "ambient.weather.rain", 0.2F, 1.0F, false);
            }
         }
      }

   }

   protected void func_78474_d(float p_78474_1_) {
      if(Reflector.ForgeWorldProvider_getWeatherRenderer.exists()) {
         WorldProvider worldprovider = this.field_78531_r.world.dimension;
         Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getWeatherRenderer, new Object[0]);
         if(object != null) {
            Reflector.callVoid(object, Reflector.IRenderHandler_render, new Object[]{Float.valueOf(p_78474_1_), this.field_78531_r.world, this.field_78531_r});
            return;
         }
      }

      float f5 = this.field_78531_r.world.getRainStrength(p_78474_1_);
      if(f5 > 0.0F) {
         if(Config.isRainOff()) {
            return;
         }

         this.func_180436_i();
         Entity entity = this.field_78531_r.func_175606_aa();
         WorldClient worldclient = this.field_78531_r.world;
         int i = MathHelper.floor(entity.posX);
         int j = MathHelper.floor(entity.posY);
         int k = MathHelper.floor(entity.posZ);
         Tessellator tessellator = Tessellator.getInstance();
         WorldRenderer worldrenderer = tessellator.getBuffer();
         GlStateManager.func_179129_p();
         GL11.glNormal3f(0.0F, 1.0F, 0.0F);
         GlStateManager.func_179147_l();
         GlStateManager.func_179120_a(770, 771, 1, 0);
         GlStateManager.func_179092_a(516, 0.1F);
         double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)p_78474_1_;
         double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)p_78474_1_;
         double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)p_78474_1_;
         int l = MathHelper.floor(d1);
         byte b0 = 5;
         if(Config.isRainFancy()) {
            b0 = 10;
         }

         byte b1 = -1;
         float f = (float)this.rendererUpdateCount + p_78474_1_;
         worldrenderer.func_178969_c(-d0, -d1, -d2);
         if(Config.isRainFancy()) {
            b0 = 10;
         }

         GlStateManager.func_179131_c(1.0F, 1.0F, 1.0F, 1.0F);
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();

         for(int i1 = k - b0; i1 <= k + b0; ++i1) {
            for(int j1 = i - b0; j1 <= i + b0; ++j1) {
               int k1 = (i1 - k + 16) * 32 + j1 - i + 16;
               double d3 = (double)this.field_175076_N[k1] * 0.5D;
               double d4 = (double)this.field_175077_O[k1] * 0.5D;
               blockpos$mutableblockpos.setPos(j1, 0, i1);
               BiomeGenBase biomegenbase = worldclient.func_180494_b(blockpos$mutableblockpos);
               if(biomegenbase.func_76738_d() || biomegenbase.func_76746_c()) {
                  int l1 = worldclient.func_175725_q(blockpos$mutableblockpos).getY();
                  int i2 = j - b0;
                  int j2 = j + b0;
                  if(i2 < l1) {
                     i2 = l1;
                  }

                  if(j2 < l1) {
                     j2 = l1;
                  }

                  int k2 = l1;
                  if(l1 < l) {
                     k2 = l;
                  }

                  if(i2 != j2) {
                     this.random.setSeed((long)(j1 * j1 * 3121 + j1 * 45238971 ^ i1 * i1 * 418711 + i1 * 13761));
                     blockpos$mutableblockpos.setPos(j1, i2, i1);
                     float f1 = biomegenbase.getTemperatureRaw(blockpos$mutableblockpos);
                     if(worldclient.func_72959_q().func_76939_a(f1, l1) >= 0.15F) {
                        if(b1 != 0) {
                           if(b1 >= 0) {
                              tessellator.draw();
                           }

                           b1 = 0;
                           this.field_78531_r.getTextureManager().bindTexture(field_110924_q);
                           worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
                        }

                        double d5 = ((double)(this.rendererUpdateCount + j1 * j1 * 3121 + j1 * 45238971 + i1 * i1 * 418711 + i1 * 13761 & 31) + (double)p_78474_1_) / 32.0D * (3.0D + this.random.nextDouble());
                        double d6 = (double)((float)j1 + 0.5F) - entity.posX;
                        double d7 = (double)((float)i1 + 0.5F) - entity.posZ;
                        float f2 = MathHelper.sqrt(d6 * d6 + d7 * d7) / (float)b0;
                        float f3 = ((1.0F - f2 * f2) * 0.5F + 0.5F) * f5;
                        blockpos$mutableblockpos.setPos(j1, k2, i1);
                        int l2 = worldclient.func_175626_b(blockpos$mutableblockpos, 0);
                        int i3 = l2 >> 16 & '\uffff';
                        int j3 = l2 & '\uffff';
                        worldrenderer.func_181662_b((double)j1 - d3 + 0.5D, (double)i2, (double)i1 - d4 + 0.5D).func_181673_a(0.0D, (double)i2 * 0.25D + d5).func_181666_a(1.0F, 1.0F, 1.0F, f3).func_181671_a(i3, j3).endVertex();
                        worldrenderer.func_181662_b((double)j1 + d3 + 0.5D, (double)i2, (double)i1 + d4 + 0.5D).func_181673_a(1.0D, (double)i2 * 0.25D + d5).func_181666_a(1.0F, 1.0F, 1.0F, f3).func_181671_a(i3, j3).endVertex();
                        worldrenderer.func_181662_b((double)j1 + d3 + 0.5D, (double)j2, (double)i1 + d4 + 0.5D).func_181673_a(1.0D, (double)j2 * 0.25D + d5).func_181666_a(1.0F, 1.0F, 1.0F, f3).func_181671_a(i3, j3).endVertex();
                        worldrenderer.func_181662_b((double)j1 - d3 + 0.5D, (double)j2, (double)i1 - d4 + 0.5D).func_181673_a(0.0D, (double)j2 * 0.25D + d5).func_181666_a(1.0F, 1.0F, 1.0F, f3).func_181671_a(i3, j3).endVertex();
                     } else {
                        if(b1 != 1) {
                           if(b1 >= 0) {
                              tessellator.draw();
                           }

                           b1 = 1;
                           this.field_78531_r.getTextureManager().bindTexture(field_110923_r);
                           worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
                        }

                        double d8 = (double)(((float)(this.rendererUpdateCount & 511) + p_78474_1_) / 512.0F);
                        double d9 = this.random.nextDouble() + (double)f * 0.01D * (double)((float)this.random.nextGaussian());
                        double d10 = this.random.nextDouble() + (double)(f * (float)this.random.nextGaussian()) * 0.001D;
                        double d11 = (double)((float)j1 + 0.5F) - entity.posX;
                        double d12 = (double)((float)i1 + 0.5F) - entity.posZ;
                        float f6 = MathHelper.sqrt(d11 * d11 + d12 * d12) / (float)b0;
                        float f4 = ((1.0F - f6 * f6) * 0.3F + 0.5F) * f5;
                        blockpos$mutableblockpos.setPos(j1, k2, i1);
                        int k3 = (worldclient.func_175626_b(blockpos$mutableblockpos, 0) * 3 + 15728880) / 4;
                        int l3 = k3 >> 16 & '\uffff';
                        int i4 = k3 & '\uffff';
                        worldrenderer.func_181662_b((double)j1 - d3 + 0.5D, (double)i2, (double)i1 - d4 + 0.5D).func_181673_a(0.0D + d9, (double)i2 * 0.25D + d8 + d10).func_181666_a(1.0F, 1.0F, 1.0F, f4).func_181671_a(l3, i4).endVertex();
                        worldrenderer.func_181662_b((double)j1 + d3 + 0.5D, (double)i2, (double)i1 + d4 + 0.5D).func_181673_a(1.0D + d9, (double)i2 * 0.25D + d8 + d10).func_181666_a(1.0F, 1.0F, 1.0F, f4).func_181671_a(l3, i4).endVertex();
                        worldrenderer.func_181662_b((double)j1 + d3 + 0.5D, (double)j2, (double)i1 + d4 + 0.5D).func_181673_a(1.0D + d9, (double)j2 * 0.25D + d8 + d10).func_181666_a(1.0F, 1.0F, 1.0F, f4).func_181671_a(l3, i4).endVertex();
                        worldrenderer.func_181662_b((double)j1 - d3 + 0.5D, (double)j2, (double)i1 - d4 + 0.5D).func_181673_a(0.0D + d9, (double)j2 * 0.25D + d8 + d10).func_181666_a(1.0F, 1.0F, 1.0F, f4).func_181671_a(l3, i4).endVertex();
                     }
                  }
               }
            }
         }

         if(b1 >= 0) {
            tessellator.draw();
         }

         worldrenderer.func_178969_c(0.0D, 0.0D, 0.0D);
         GlStateManager.func_179089_o();
         GlStateManager.func_179084_k();
         GlStateManager.func_179092_a(516, 0.1F);
         this.func_175072_h();
      }

   }

   public void func_78478_c() {
      ScaledResolution scaledresolution = new ScaledResolution(this.field_78531_r);
      GlStateManager.func_179086_m(256);
      GlStateManager.func_179128_n(5889);
      GlStateManager.func_179096_D();
      GlStateManager.func_179130_a(0.0D, scaledresolution.func_78327_c(), scaledresolution.func_78324_d(), 0.0D, 1000.0D, 3000.0D);
      GlStateManager.func_179128_n(5888);
      GlStateManager.func_179096_D();
      GlStateManager.func_179109_b(0.0F, 0.0F, -2000.0F);
   }

   private void func_78466_h(float p_78466_1_) {
      WorldClient worldclient = this.field_78531_r.world;
      Entity entity = this.field_78531_r.func_175606_aa();
      float f = 0.25F + 0.75F * (float)this.field_78531_r.field_71474_y.renderDistanceChunks / 32.0F;
      f = 1.0F - (float)Math.pow((double)f, 0.25D);
      Vec3 vec3 = worldclient.func_72833_a(this.field_78531_r.func_175606_aa(), p_78466_1_);
      vec3 = CustomColors.getWorldSkyColor(vec3, worldclient, this.field_78531_r.func_175606_aa(), p_78466_1_);
      float f1 = (float)vec3.x;
      float f2 = (float)vec3.y;
      float f3 = (float)vec3.z;
      Vec3 vec31 = worldclient.func_72948_g(p_78466_1_);
      vec31 = CustomColors.getWorldFogColor(vec31, worldclient, this.field_78531_r.func_175606_aa(), p_78466_1_);
      this.field_175080_Q = (float)vec31.x;
      this.field_175082_R = (float)vec31.y;
      this.field_175081_S = (float)vec31.z;
      if(this.field_78531_r.field_71474_y.renderDistanceChunks >= 4) {
         double d0 = -1.0D;
         Vec3 vec32 = MathHelper.sin(worldclient.getCelestialAngleRadians(p_78466_1_)) > 0.0F?new Vec3(d0, 0.0D, 0.0D):new Vec3(1.0D, 0.0D, 0.0D);
         float f4 = (float)entity.getLook(p_78466_1_).dotProduct(vec32);
         if(f4 < 0.0F) {
            f4 = 0.0F;
         }

         if(f4 > 0.0F) {
            float[] afloat = worldclient.dimension.calcSunriseSunsetColors(worldclient.getCelestialAngle(p_78466_1_), p_78466_1_);
            if(afloat != null) {
               f4 = f4 * afloat[3];
               this.field_175080_Q = this.field_175080_Q * (1.0F - f4) + afloat[0] * f4;
               this.field_175082_R = this.field_175082_R * (1.0F - f4) + afloat[1] * f4;
               this.field_175081_S = this.field_175081_S * (1.0F - f4) + afloat[2] * f4;
            }
         }
      }

      this.field_175080_Q += (f1 - this.field_175080_Q) * f;
      this.field_175082_R += (f2 - this.field_175082_R) * f;
      this.field_175081_S += (f3 - this.field_175081_S) * f;
      float f10 = worldclient.getRainStrength(p_78466_1_);
      if(f10 > 0.0F) {
         float f5 = 1.0F - f10 * 0.5F;
         float f12 = 1.0F - f10 * 0.4F;
         this.field_175080_Q *= f5;
         this.field_175082_R *= f5;
         this.field_175081_S *= f12;
      }

      float f11 = worldclient.getThunderStrength(p_78466_1_);
      if(f11 > 0.0F) {
         float f13 = 1.0F - f11 * 0.5F;
         this.field_175080_Q *= f13;
         this.field_175082_R *= f13;
         this.field_175081_S *= f13;
      }

      Block block = ActiveRenderInfo.func_180786_a(this.field_78531_r.field_71441_e, entity, p_78466_1_);
      if(this.field_78500_U) {
         Vec3 vec33 = worldclient.func_72824_f(p_78466_1_);
         this.field_175080_Q = (float)vec33.x;
         this.field_175082_R = (float)vec33.y;
         this.field_175081_S = (float)vec33.z;
      } else if(block.getMaterial() == Material.WATER) {
         float f8 = (float)EnchantmentHelper.func_180319_a(entity) * 0.2F;
         if(entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.WATER_BREATHING)) {
            f8 = f8 * 0.3F + 0.6F;
         }

         this.field_175080_Q = 0.02F + f8;
         this.field_175082_R = 0.02F + f8;
         this.field_175081_S = 0.2F + f8;
         Vec3 vec34 = CustomColors.getUnderwaterColor(this.field_78531_r.field_71441_e, this.field_78531_r.func_175606_aa().posX, this.field_78531_r.func_175606_aa().posY + 1.0D, this.field_78531_r.func_175606_aa().posZ);
         if(vec34 != null) {
            this.field_175080_Q = (float)vec34.x;
            this.field_175082_R = (float)vec34.y;
            this.field_175081_S = (float)vec34.z;
         }
      } else if(block.getMaterial() == Material.LAVA) {
         this.field_175080_Q = 0.6F;
         this.field_175082_R = 0.1F;
         this.field_175081_S = 0.0F;
      }

      float f9 = this.field_78535_ad + (this.field_78539_ae - this.field_78535_ad) * p_78466_1_;
      this.field_175080_Q *= f9;
      this.field_175082_R *= f9;
      this.field_175081_S *= f9;
      double d2 = worldclient.dimension.getVoidFogYFactor();
      double d1 = (entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)p_78466_1_) * d2;
      if(entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.BLINDNESS)) {
         int i = ((EntityLivingBase)entity).getActivePotionEffect(Potion.BLINDNESS).getDuration();
         if(i < 20) {
            d1 *= (double)(1.0F - (float)i / 20.0F);
         } else {
            d1 = 0.0D;
         }
      }

      if(d1 < 1.0D) {
         if(d1 < 0.0D) {
            d1 = 0.0D;
         }

         d1 = d1 * d1;
         this.field_175080_Q = (float)((double)this.field_175080_Q * d1);
         this.field_175082_R = (float)((double)this.field_175082_R * d1);
         this.field_175081_S = (float)((double)this.field_175081_S * d1);
      }

      if(this.bossColorModifier > 0.0F) {
         float f14 = this.bossColorModifierPrev + (this.bossColorModifier - this.bossColorModifierPrev) * p_78466_1_;
         this.field_175080_Q = this.field_175080_Q * (1.0F - f14) + this.field_175080_Q * 0.7F * f14;
         this.field_175082_R = this.field_175082_R * (1.0F - f14) + this.field_175082_R * 0.6F * f14;
         this.field_175081_S = this.field_175081_S * (1.0F - f14) + this.field_175081_S * 0.6F * f14;
      }

      if(entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.NIGHT_VISION)) {
         float f15 = this.getNightVisionBrightness((EntityLivingBase)entity, p_78466_1_);
         float f6 = 1.0F / this.field_175080_Q;
         if(f6 > 1.0F / this.field_175082_R) {
            f6 = 1.0F / this.field_175082_R;
         }

         if(f6 > 1.0F / this.field_175081_S) {
            f6 = 1.0F / this.field_175081_S;
         }

         this.field_175080_Q = this.field_175080_Q * (1.0F - f15) + this.field_175080_Q * f6 * f15;
         this.field_175082_R = this.field_175082_R * (1.0F - f15) + this.field_175082_R * f6 * f15;
         this.field_175081_S = this.field_175081_S * (1.0F - f15) + this.field_175081_S * f6 * f15;
      }

      if(this.field_78531_r.field_71474_y.field_74337_g) {
         float f16 = (this.field_175080_Q * 30.0F + this.field_175082_R * 59.0F + this.field_175081_S * 11.0F) / 100.0F;
         float f17 = (this.field_175080_Q * 30.0F + this.field_175082_R * 70.0F) / 100.0F;
         float f7 = (this.field_175080_Q * 30.0F + this.field_175081_S * 70.0F) / 100.0F;
         this.field_175080_Q = f16;
         this.field_175082_R = f17;
         this.field_175081_S = f7;
      }

      if(Reflector.EntityViewRenderEvent_FogColors_Constructor.exists()) {
         Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_FogColors_Constructor, new Object[]{this, entity, block, Float.valueOf(p_78466_1_), Float.valueOf(this.field_175080_Q), Float.valueOf(this.field_175082_R), Float.valueOf(this.field_175081_S)});
         Reflector.postForgeBusEvent(object);
         this.field_175080_Q = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_FogColors_red, this.field_175080_Q);
         this.field_175082_R = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_FogColors_green, this.field_175082_R);
         this.field_175081_S = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_FogColors_blue, this.field_175081_S);
      }

      Shaders.setClearColor(this.field_175080_Q, this.field_175082_R, this.field_175081_S, 0.0F);
   }

   private void func_78468_a(int p_78468_1_, float p_78468_2_) {
      Entity entity = this.field_78531_r.func_175606_aa();
      boolean flag = false;
      this.fogStandard = false;
      if(entity instanceof EntityPlayer) {
         flag = ((EntityPlayer)entity).abilities.isCreativeMode;
      }

      GL11.glFog(2918, (FloatBuffer)this.func_78469_a(this.field_175080_Q, this.field_175082_R, this.field_175081_S, 1.0F));
      GL11.glNormal3f(0.0F, -1.0F, 0.0F);
      GlStateManager.func_179131_c(1.0F, 1.0F, 1.0F, 1.0F);
      Block block = ActiveRenderInfo.func_180786_a(this.field_78531_r.field_71441_e, entity, p_78468_2_);
      float f1 = -1.0F;
      if(Reflector.ForgeHooksClient_getFogDensity.exists()) {
         f1 = Reflector.callFloat(Reflector.ForgeHooksClient_getFogDensity, new Object[]{this, entity, block, Float.valueOf(p_78468_2_), Float.valueOf(0.1F)});
      }

      if(f1 >= 0.0F) {
         GlStateManager.func_179095_a(f1);
      } else if(entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.BLINDNESS)) {
         float f2 = 5.0F;
         int i = ((EntityLivingBase)entity).getActivePotionEffect(Potion.BLINDNESS).getDuration();
         if(i < 20) {
            f2 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)i / 20.0F);
         }

         if(Config.isShaders()) {
            Shaders.setFog(9729);
         } else {
            GlStateManager.func_179093_d(9729);
         }

         if(p_78468_1_ == -1) {
            GlStateManager.func_179102_b(0.0F);
            GlStateManager.func_179153_c(f2 * 0.8F);
         } else {
            GlStateManager.func_179102_b(f2 * 0.25F);
            GlStateManager.func_179153_c(f2);
         }

         if(GLContext.getCapabilities().GL_NV_fog_distance && Config.isFogFancy()) {
            GL11.glFogi('\u855a', '\u855b');
         }
      } else if(this.field_78500_U) {
         if(Config.isShaders()) {
            Shaders.setFog(2048);
         } else {
            GlStateManager.func_179093_d(2048);
         }

         GlStateManager.func_179095_a(0.1F);
      } else if(block.getMaterial() == Material.WATER) {
         if(Config.isShaders()) {
            Shaders.setFog(2048);
         } else {
            GlStateManager.func_179093_d(2048);
         }

         if(entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.WATER_BREATHING)) {
            GlStateManager.func_179095_a(0.01F);
         } else {
            GlStateManager.func_179095_a(0.1F - (float)EnchantmentHelper.func_180319_a(entity) * 0.03F);
         }

         if(Config.isClearWater()) {
            GlStateManager.func_179095_a(0.02F);
         }
      } else if(block.getMaterial() == Material.LAVA) {
         if(Config.isShaders()) {
            Shaders.setFog(2048);
         } else {
            GlStateManager.func_179093_d(2048);
         }

         GlStateManager.func_179095_a(2.0F);
      } else {
         float f = this.farPlaneDistance;
         this.fogStandard = true;
         if(Config.isShaders()) {
            Shaders.setFog(9729);
         } else {
            GlStateManager.func_179093_d(9729);
         }

         if(p_78468_1_ == -1) {
            GlStateManager.func_179102_b(0.0F);
            GlStateManager.func_179153_c(f);
         } else {
            GlStateManager.func_179102_b(f * Config.getFogStart());
            GlStateManager.func_179153_c(f);
         }

         if(GLContext.getCapabilities().GL_NV_fog_distance) {
            if(Config.isFogFancy()) {
               GL11.glFogi('\u855a', '\u855b');
            }

            if(Config.isFogFast()) {
               GL11.glFogi('\u855a', '\u855c');
            }
         }

         if(this.field_78531_r.field_71441_e.dimension.doesXZShowFog((int)entity.posX, (int)entity.posZ)) {
            GlStateManager.func_179102_b(f * 0.05F);
            GlStateManager.func_179153_c(f);
         }

         if(Reflector.ForgeHooksClient_onFogRender.exists()) {
            Reflector.callVoid(Reflector.ForgeHooksClient_onFogRender, new Object[]{this, entity, block, Float.valueOf(p_78468_2_), Integer.valueOf(p_78468_1_), Float.valueOf(f)});
         }
      }

      GlStateManager.func_179142_g();
      GlStateManager.func_179127_m();
      GlStateManager.func_179104_a(1028, 4608);
   }

   private FloatBuffer func_78469_a(float p_78469_1_, float p_78469_2_, float p_78469_3_, float p_78469_4_) {
      if(Config.isShaders()) {
         Shaders.setFogColor(p_78469_1_, p_78469_2_, p_78469_3_);
      }

      this.field_78521_m.clear();
      this.field_78521_m.put(p_78469_1_).put(p_78469_2_).put(p_78469_3_).put(p_78469_4_);
      this.field_78521_m.flip();
      return this.field_78521_m;
   }

   public MapItemRenderer getMapItemRenderer() {
      return this.mapItemRenderer;
   }

   private void waitForServerThread() {
      this.serverWaitTimeCurrent = 0;
      if(Config.isSmoothWorld() && Config.isSingleProcessor()) {
         if(this.field_78531_r.isIntegratedServerRunning()) {
            IntegratedServer integratedserver = this.field_78531_r.getIntegratedServer();
            if(integratedserver != null) {
               boolean flag = this.field_78531_r.isGamePaused();
               if(!flag && !(this.field_78531_r.currentScreen instanceof GuiDownloadTerrain)) {
                  if(this.serverWaitTime > 0) {
                     Lagometer.timerServer.start();
                     Config.sleep((long)this.serverWaitTime);
                     Lagometer.timerServer.end();
                     this.serverWaitTimeCurrent = this.serverWaitTime;
                  }

                  long i = System.nanoTime() / 1000000L;
                  if(this.lastServerTime != 0L && this.lastServerTicks != 0) {
                     long j = i - this.lastServerTime;
                     if(j < 0L) {
                        this.lastServerTime = i;
                        j = 0L;
                     }

                     if(j >= 50L) {
                        this.lastServerTime = i;
                        int k = integratedserver.getTickCounter();
                        int l = k - this.lastServerTicks;
                        if(l < 0) {
                           this.lastServerTicks = k;
                           l = 0;
                        }

                        if(l < 1 && this.serverWaitTime < 100) {
                           this.serverWaitTime += 2;
                        }

                        if(l > 1 && this.serverWaitTime > 0) {
                           --this.serverWaitTime;
                        }

                        this.lastServerTicks = k;
                     }
                  } else {
                     this.lastServerTime = i;
                     this.lastServerTicks = integratedserver.getTickCounter();
                     this.avgServerTickDiff = 1.0F;
                     this.avgServerTimeDiff = 50.0F;
                  }
               } else {
                  if(this.field_78531_r.currentScreen instanceof GuiDownloadTerrain) {
                     Config.sleep(20L);
                  }

                  this.lastServerTime = 0L;
                  this.lastServerTicks = 0;
               }
            }
         }
      } else {
         this.lastServerTime = 0L;
         this.lastServerTicks = 0;
      }
   }

   private void frameInit() {
      if(!this.initialized) {
         TextureUtils.registerResourceListener();
         if(Config.getBitsOs() == 64 && Config.getBitsJre() == 32) {
            Config.setNotify64BitJava(true);
         }

         this.initialized = true;
      }

      Config.checkDisplayMode();
      World world = this.field_78531_r.field_71441_e;
      if(world != null) {
         if(Config.getNewRelease() != null) {
            String s = "HD_U".replace("HD_U", "HD Ultra").replace("L", "Light");
            String s1 = s + " " + Config.getNewRelease();
            ChatComponentText chatcomponenttext = new ChatComponentText(I18n.format("of.message.newVersion", new Object[]{s1}));
            this.field_78531_r.ingameGUI.getChatGUI().printChatMessage(chatcomponenttext);
            Config.setNewRelease((String)null);
         }

         if(Config.isNotify64BitJava()) {
            Config.setNotify64BitJava(false);
            ChatComponentText chatcomponenttext1 = new ChatComponentText(I18n.format("of.message.java64Bit", new Object[0]));
            this.field_78531_r.ingameGUI.getChatGUI().printChatMessage(chatcomponenttext1);
         }
      }

      if(this.field_78531_r.currentScreen instanceof GuiMainMenu) {
         this.updateMainMenu((GuiMainMenu)this.field_78531_r.currentScreen);
      }

      if(this.updatedWorld != world) {
         RandomMobs.worldChanged(this.updatedWorld, world);
         Config.updateThreadPriorities();
         this.lastServerTime = 0L;
         this.lastServerTicks = 0;
         this.updatedWorld = world;
      }

      if(!this.setFxaaShader(Shaders.configAntialiasingLevel)) {
         Shaders.configAntialiasingLevel = 0;
      }

   }

   private void frameFinish() {
      if(this.field_78531_r.field_71441_e != null) {
         long i = System.currentTimeMillis();
         if(i > this.lastErrorCheckTimeMs + 10000L) {
            this.lastErrorCheckTimeMs = i;
            int j = GL11.glGetError();
            if(j != 0) {
               String s = GLU.gluErrorString(j);
               ChatComponentText chatcomponenttext = new ChatComponentText(I18n.format("of.message.openglError", new Object[]{Integer.valueOf(j), s}));
               this.field_78531_r.ingameGUI.getChatGUI().printChatMessage(chatcomponenttext);
            }
         }
      }

   }

   private void updateMainMenu(GuiMainMenu p_updateMainMenu_1_) {
      try {
         String s = null;
         Calendar calendar = Calendar.getInstance();
         calendar.setTime(new Date());
         int i = calendar.get(5);
         int j = calendar.get(2) + 1;
         if(i == 8 && j == 4) {
            s = "Happy birthday, OptiFine!";
         }

         if(i == 14 && j == 8) {
            s = "Happy birthday, sp614x!";
         }

         if(s == null) {
            return;
         }

         Field[] afield = GuiMainMenu.class.getDeclaredFields();

         for(int k = 0; k < afield.length; ++k) {
            if(afield[k].getType() == String.class) {
               afield[k].setAccessible(true);
               afield[k].set(p_updateMainMenu_1_, s);
               break;
            }
         }
      } catch (Throwable var8) {
         ;
      }

   }

   public boolean setFxaaShader(int p_setFxaaShader_1_) {
      if(!OpenGlHelper.func_148822_b()) {
         return false;
      } else if(this.shaderGroup != null && this.shaderGroup != this.fxaaShaders[2] && this.field_147707_d != this.fxaaShaders[4]) {
         return true;
      } else if(p_setFxaaShader_1_ != 2 && p_setFxaaShader_1_ != 4) {
         if(this.field_147707_d == null) {
            return true;
         } else {
            this.field_147707_d.func_148021_a();
            this.field_147707_d = null;
            return true;
         }
      } else if(this.field_147707_d != null && this.field_147707_d == this.fxaaShaders[p_setFxaaShader_1_]) {
         return true;
      } else if(this.field_78531_r.field_71441_e == null) {
         return true;
      } else {
         this.loadShader(new ResourceLocation("shaders/post/fxaa_of_" + p_setFxaaShader_1_ + "x.json"));
         this.fxaaShaders[p_setFxaaShader_1_] = this.field_147707_d;
         return this.useShader;
      }
   }
}
