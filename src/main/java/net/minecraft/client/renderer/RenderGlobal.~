package net.minecraft.client.renderer;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.google.gson.JsonSyntaxException;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Deque;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.Callable;
import net.minecraft.block.Block;
import net.minecraft.block.BlockChest;
import net.minecraft.block.BlockEnderChest;
import net.minecraft.block.BlockSign;
import net.minecraft.block.BlockSkull;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.client.audio.ISound;
import net.minecraft.client.audio.PositionedSoundRecord;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.multiplayer.WorldClient;
import net.minecraft.client.particle.EntityFX;
import net.minecraft.client.renderer.BlockModelRenderer;
import net.minecraft.client.renderer.BlockRendererDispatcher;
import net.minecraft.client.renderer.ChunkRenderContainer;
import net.minecraft.client.renderer.DestroyBlockProgress;
import net.minecraft.client.renderer.GLAllocation;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.RenderHelper;
import net.minecraft.client.renderer.RenderList;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.VboRenderList;
import net.minecraft.client.renderer.ViewFrustum;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.client.renderer.chunk.ChunkRenderDispatcher;
import net.minecraft.client.renderer.chunk.CompiledChunk;
import net.minecraft.client.renderer.chunk.IRenderChunkFactory;
import net.minecraft.client.renderer.chunk.ListChunkFactory;
import net.minecraft.client.renderer.chunk.RenderChunk;
import net.minecraft.client.renderer.chunk.VboChunkFactory;
import net.minecraft.client.renderer.chunk.VisGraph;
import net.minecraft.client.renderer.culling.ClippingHelper;
import net.minecraft.client.renderer.culling.ClippingHelperImpl;
import net.minecraft.client.renderer.culling.Frustum;
import net.minecraft.client.renderer.culling.ICamera;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.renderer.texture.TextureMap;
import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.client.renderer.vertex.VertexBuffer;
import net.minecraft.client.renderer.vertex.VertexFormat;
import net.minecraft.client.renderer.vertex.VertexFormatElement;
import net.minecraft.client.resources.IResourceManager;
import net.minecraft.client.resources.IResourceManagerReloadListener;
import net.minecraft.client.shader.Framebuffer;
import net.minecraft.client.shader.ShaderGroup;
import net.minecraft.client.shader.ShaderLinkHelper;
import net.minecraft.crash.CrashReport;
import net.minecraft.crash.CrashReportCategory;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.item.EntityItemFrame;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.projectile.EntityWitherSkull;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemDye;
import net.minecraft.item.ItemRecord;
import net.minecraft.src.ChunkUtils;
import net.minecraft.src.CloudRenderer;
import net.minecraft.src.Config;
import net.minecraft.src.CustomColors;
import net.minecraft.src.CustomSky;
import net.minecraft.src.DynamicLights;
import net.minecraft.src.Lagometer;
import net.minecraft.src.RandomMobs;
import net.minecraft.src.Reflector;
import net.minecraft.src.RenderInfoLazy;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntityChest;
import net.minecraft.tileentity.TileEntitySign;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.ClassInheritanceMultiMap;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.EnumWorldBlockLayer;
import net.minecraft.util.MathHelper;
import net.minecraft.util.Matrix4f;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.ReportedException;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.Vec3;
import net.minecraft.util.Vector3d;
import net.minecraft.world.IWorldAccess;
import net.minecraft.world.WorldProvider;
import net.minecraft.world.border.WorldBorder;
import net.minecraft.world.chunk.Chunk;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;
import shadersmod.client.Shaders;
import shadersmod.client.ShadersRender;
import shadersmod.client.ShadowUtils;

public class RenderGlobal implements IWorldAccess, IResourceManagerReloadListener {
   private static final Logger LOGGER = LogManager.getLogger();
   private static final ResourceLocation MOON_PHASES_TEXTURES = new ResourceLocation("textures/environment/moon_phases.png");
   private static final ResourceLocation SUN_TEXTURES = new ResourceLocation("textures/environment/sun.png");
   private static final ResourceLocation CLOUDS_TEXTURES = new ResourceLocation("textures/environment/clouds.png");
   private static final ResourceLocation END_SKY_TEXTURES = new ResourceLocation("textures/environment/end_sky.png");
   private static final ResourceLocation FORCEFIELD_TEXTURES = new ResourceLocation("textures/misc/forcefield.png");
   public final Minecraft mc;
   private final TextureManager textureManager;
   private final RenderManager renderManager;
   private WorldClient world;
   private Set chunksToUpdate = Sets.newLinkedHashSet();
   private List renderInfos = Lists.newArrayListWithCapacity(69696);
   private final Set setTileEntities = Sets.newHashSet();
   private ViewFrustum viewFrustum;
   private int field_72772_v = -1;
   private int field_72771_w = -1;
   private int field_72781_x = -1;
   private VertexFormat skyVertexFormat;
   private VertexBuffer starVBO;
   private VertexBuffer skyVBO;
   private VertexBuffer sky2VBO;
   private int ticks;
   public final Map damagedBlocks = Maps.newHashMap();
   private final Map mapSoundPositions = Maps.newHashMap();
   private final TextureAtlasSprite[] field_94141_F = new TextureAtlasSprite[10];
   private Framebuffer entityOutlineFramebuffer;
   private ShaderGroup entityOutlineShader;
   private double frustumUpdatePosX = Double.MIN_VALUE;
   private double frustumUpdatePosY = Double.MIN_VALUE;
   private double frustumUpdatePosZ = Double.MIN_VALUE;
   private int frustumUpdatePosChunkX = Integer.MIN_VALUE;
   private int frustumUpdatePosChunkY = Integer.MIN_VALUE;
   private int frustumUpdatePosChunkZ = Integer.MIN_VALUE;
   private double lastViewEntityX = Double.MIN_VALUE;
   private double lastViewEntityY = Double.MIN_VALUE;
   private double lastViewEntityZ = Double.MIN_VALUE;
   private double lastViewEntityPitch = Double.MIN_VALUE;
   private double lastViewEntityYaw = Double.MIN_VALUE;
   private final ChunkRenderDispatcher renderDispatcher = new ChunkRenderDispatcher();
   private ChunkRenderContainer field_174996_N;
   private int renderDistanceChunks = -1;
   private int field_72740_G = 2;
   private int field_72748_H;
   private int countEntitiesRendered;
   private int countEntitiesHidden;
   private boolean debugFixTerrainFrustum = false;
   private ClippingHelper debugFixedClippingHelper;
   private final Vector4f[] debugTerrainMatrix = new Vector4f[8];
   private final Vector3d debugTerrainFrustumPosition = new Vector3d();
   private boolean field_175005_X = false;
   IRenderChunkFactory field_175007_a;
   private double prevRenderSortX;
   private double prevRenderSortY;
   private double prevRenderSortZ;
   public boolean displayListEntitiesDirty = true;
   private static final String __OBFID = "CL_00000954";
   private CloudRenderer cloudRenderer;
   public Entity renderedEntity;
   public Set chunksToResortTransparency = new LinkedHashSet();
   public Set chunksToUpdateForced = new LinkedHashSet();
   private Deque visibilityDeque = new ArrayDeque();
   private List renderInfosEntities = new ArrayList(1024);
   private List renderInfosTileEntities = new ArrayList(1024);
   private List renderInfosNormal = new ArrayList(1024);
   private List renderInfosEntitiesNormal = new ArrayList(1024);
   private List renderInfosTileEntitiesNormal = new ArrayList(1024);
   private List renderInfosShadow = new ArrayList(1024);
   private List renderInfosEntitiesShadow = new ArrayList(1024);
   private List renderInfosTileEntitiesShadow = new ArrayList(1024);
   private int renderDistance = 0;
   private int renderDistanceSq = 0;
   private static final Set SET_ALL_FACINGS = Collections.unmodifiableSet(new HashSet(Arrays.asList(EnumFacing.BY_INDEX)));
   private int countTileEntitiesRendered;

   public RenderGlobal(Minecraft p_i1249_1_) {
      this.cloudRenderer = new CloudRenderer(p_i1249_1_);
      this.mc = p_i1249_1_;
      this.renderManager = p_i1249_1_.getRenderManager();
      this.textureManager = p_i1249_1_.getTextureManager();
      this.textureManager.bindTexture(FORCEFIELD_TEXTURES);
      GL11.glTexParameteri(3553, 10242, 10497);
      GL11.glTexParameteri(3553, 10243, 10497);
      GlStateManager.func_179144_i(0);
      this.func_174971_n();
      this.field_175005_X = OpenGlHelper.func_176075_f();
      if(this.field_175005_X) {
         this.field_174996_N = new VboRenderList();
         this.field_175007_a = new VboChunkFactory();
      } else {
         this.field_174996_N = new RenderList();
         this.field_175007_a = new ListChunkFactory();
      }

      this.skyVertexFormat = new VertexFormat();
      this.skyVertexFormat.func_181721_a(new VertexFormatElement(0, VertexFormatElement.EnumType.FLOAT, VertexFormatElement.EnumUsage.POSITION, 3));
      this.generateStars();
      this.generateSky();
      this.generateSky2();
   }

   public void func_110549_a(IResourceManager p_110549_1_) {
      this.func_174971_n();
   }

   private void func_174971_n() {
      TextureMap texturemap = this.mc.func_147117_R();

      for(int i = 0; i < this.field_94141_F.length; ++i) {
         this.field_94141_F[i] = texturemap.func_110572_b("minecraft:blocks/destroy_stage_" + i);
      }

   }

   public void makeEntityOutlineShader() {
      if(OpenGlHelper.field_148824_g) {
         if(ShaderLinkHelper.func_148074_b() == null) {
            ShaderLinkHelper.func_148076_a();
         }

         ResourceLocation resourcelocation = new ResourceLocation("shaders/post/entity_outline.json");

         try {
            this.entityOutlineShader = new ShaderGroup(this.mc.getTextureManager(), this.mc.func_110442_L(), this.mc.getFramebuffer(), resourcelocation);
            this.entityOutlineShader.createBindFramebuffers(this.mc.field_71443_c, this.mc.field_71440_d);
            this.entityOutlineFramebuffer = this.entityOutlineShader.getFramebufferRaw("final");
         } catch (IOException ioexception) {
            LOGGER.warn((String)("Failed to load shader: " + resourcelocation), (Throwable)ioexception);
            this.entityOutlineShader = null;
            this.entityOutlineFramebuffer = null;
         } catch (JsonSyntaxException jsonsyntaxexception) {
            LOGGER.warn((String)("Failed to load shader: " + resourcelocation), (Throwable)jsonsyntaxexception);
            this.entityOutlineShader = null;
            this.entityOutlineFramebuffer = null;
         }
      } else {
         this.entityOutlineShader = null;
         this.entityOutlineFramebuffer = null;
      }

   }

   public void renderEntityOutlineFramebuffer() {
      if(this.isRenderEntityOutlines()) {
         GlStateManager.func_179147_l();
         GlStateManager.func_179120_a(770, 771, 0, 1);
         this.entityOutlineFramebuffer.framebufferRenderExt(this.mc.field_71443_c, this.mc.field_71440_d, false);
         GlStateManager.func_179084_k();
      }

   }

   protected boolean isRenderEntityOutlines() {
      return !Config.isFastRender() && !Config.isShaders() && !Config.isAntialiasing()?this.entityOutlineFramebuffer != null && this.entityOutlineShader != null && this.mc.player != null && this.mc.player.isSpectator() && this.mc.gameSettings.keyBindSpectatorOutlines.isKeyDown():false;
   }

   private void generateSky2() {
      Tessellator tessellator = Tessellator.getInstance();
      WorldRenderer worldrenderer = tessellator.getBuffer();
      if(this.sky2VBO != null) {
         this.sky2VBO.func_177362_c();
      }

      if(this.field_72781_x >= 0) {
         GLAllocation.func_74523_b(this.field_72781_x);
         this.field_72781_x = -1;
      }

      if(this.field_175005_X) {
         this.sky2VBO = new VertexBuffer(this.skyVertexFormat);
         this.renderSky(worldrenderer, -16.0F, true);
         worldrenderer.finishDrawing();
         worldrenderer.reset();
         this.sky2VBO.func_181722_a(worldrenderer.func_178966_f());
      } else {
         this.field_72781_x = GLAllocation.func_74526_a(1);
         GL11.glNewList(this.field_72781_x, 4864);
         this.renderSky(worldrenderer, -16.0F, true);
         tessellator.draw();
         GL11.glEndList();
      }

   }

   private void generateSky() {
      Tessellator tessellator = Tessellator.getInstance();
      WorldRenderer worldrenderer = tessellator.getBuffer();
      if(this.skyVBO != null) {
         this.skyVBO.func_177362_c();
      }

      if(this.field_72771_w >= 0) {
         GLAllocation.func_74523_b(this.field_72771_w);
         this.field_72771_w = -1;
      }

      if(this.field_175005_X) {
         this.skyVBO = new VertexBuffer(this.skyVertexFormat);
         this.renderSky(worldrenderer, 16.0F, false);
         worldrenderer.finishDrawing();
         worldrenderer.reset();
         this.skyVBO.func_181722_a(worldrenderer.func_178966_f());
      } else {
         this.field_72771_w = GLAllocation.func_74526_a(1);
         GL11.glNewList(this.field_72771_w, 4864);
         this.renderSky(worldrenderer, 16.0F, false);
         tessellator.draw();
         GL11.glEndList();
      }

   }

   private void renderSky(WorldRenderer bufferBuilderIn, float posY, boolean reverseX) {
      boolean flag = true;
      boolean flag1 = true;
      bufferBuilderIn.begin(7, DefaultVertexFormats.POSITION);

      for(int i = -384; i <= 384; i += 64) {
         for(int j = -384; j <= 384; j += 64) {
            float f = (float)i;
            float f1 = (float)(i + 64);
            if(reverseX) {
               f1 = (float)i;
               f = (float)(i + 64);
            }

            bufferBuilderIn.func_181662_b((double)f, (double)posY, (double)j).endVertex();
            bufferBuilderIn.func_181662_b((double)f1, (double)posY, (double)j).endVertex();
            bufferBuilderIn.func_181662_b((double)f1, (double)posY, (double)(j + 64)).endVertex();
            bufferBuilderIn.func_181662_b((double)f, (double)posY, (double)(j + 64)).endVertex();
         }
      }

   }

   private void generateStars() {
      Tessellator tessellator = Tessellator.getInstance();
      WorldRenderer worldrenderer = tessellator.getBuffer();
      if(this.starVBO != null) {
         this.starVBO.func_177362_c();
      }

      if(this.field_72772_v >= 0) {
         GLAllocation.func_74523_b(this.field_72772_v);
         this.field_72772_v = -1;
      }

      if(this.field_175005_X) {
         this.starVBO = new VertexBuffer(this.skyVertexFormat);
         this.renderStars(worldrenderer);
         worldrenderer.finishDrawing();
         worldrenderer.reset();
         this.starVBO.func_181722_a(worldrenderer.func_178966_f());
      } else {
         this.field_72772_v = GLAllocation.func_74526_a(1);
         GlStateManager.func_179094_E();
         GL11.glNewList(this.field_72772_v, 4864);
         this.renderStars(worldrenderer);
         tessellator.draw();
         GL11.glEndList();
         GlStateManager.func_179121_F();
      }

   }

   private void renderStars(WorldRenderer bufferBuilderIn) {
      Random random = new Random(10842L);
      bufferBuilderIn.begin(7, DefaultVertexFormats.POSITION);

      for(int i = 0; i < 1500; ++i) {
         double d0 = (double)(random.nextFloat() * 2.0F - 1.0F);
         double d1 = (double)(random.nextFloat() * 2.0F - 1.0F);
         double d2 = (double)(random.nextFloat() * 2.0F - 1.0F);
         double d3 = (double)(0.15F + random.nextFloat() * 0.1F);
         double d4 = d0 * d0 + d1 * d1 + d2 * d2;
         if(d4 < 1.0D && d4 > 0.01D) {
            d4 = 1.0D / Math.sqrt(d4);
            d0 = d0 * d4;
            d1 = d1 * d4;
            d2 = d2 * d4;
            double d5 = d0 * 100.0D;
            double d6 = d1 * 100.0D;
            double d7 = d2 * 100.0D;
            double d8 = Math.atan2(d0, d2);
            double d9 = Math.sin(d8);
            double d10 = Math.cos(d8);
            double d11 = Math.atan2(Math.sqrt(d0 * d0 + d2 * d2), d1);
            double d12 = Math.sin(d11);
            double d13 = Math.cos(d11);
            double d14 = random.nextDouble() * 3.141592653589793D * 2.0D;
            double d15 = Math.sin(d14);
            double d16 = Math.cos(d14);

            for(int j = 0; j < 4; ++j) {
               double d17 = 0.0D;
               double d18 = (double)((j & 2) - 1) * d3;
               double d19 = (double)((j + 1 & 2) - 1) * d3;
               double d20 = 0.0D;
               double d21 = d18 * d16 - d19 * d15;
               double d22 = d19 * d16 + d18 * d15;
               double d23 = d21 * d12 + 0.0D * d13;
               double d24 = 0.0D * d12 - d21 * d13;
               double d25 = d24 * d9 - d22 * d10;
               double d26 = d22 * d9 + d24 * d10;
               bufferBuilderIn.func_181662_b(d5 + d25, d6 + d23, d7 + d26).endVertex();
            }
         }
      }

   }

   public void setWorldAndLoadRenderers(WorldClient worldClientIn) {
      if(this.world != null) {
         this.world.func_72848_b(this);
      }

      this.frustumUpdatePosX = Double.MIN_VALUE;
      this.frustumUpdatePosY = Double.MIN_VALUE;
      this.frustumUpdatePosZ = Double.MIN_VALUE;
      this.frustumUpdatePosChunkX = Integer.MIN_VALUE;
      this.frustumUpdatePosChunkY = Integer.MIN_VALUE;
      this.frustumUpdatePosChunkZ = Integer.MIN_VALUE;
      this.renderManager.setWorld(worldClientIn);
      this.world = worldClientIn;
      if(Config.isDynamicLights()) {
         DynamicLights.clear();
      }

      if(worldClientIn != null) {
         worldClientIn.func_72954_a(this);
         this.loadRenderers();
      }

   }

   public void loadRenderers() {
      if(this.world != null) {
         this.displayListEntitiesDirty = true;
         Blocks.field_150362_t.func_150122_b(Config.isTreesFancy());
         Blocks.field_150361_u.func_150122_b(Config.isTreesFancy());
         BlockModelRenderer.updateAoLightValue();
         if(Config.isDynamicLights()) {
            DynamicLights.clear();
         }

         this.renderDistanceChunks = this.mc.gameSettings.renderDistanceChunks;
         this.renderDistance = this.renderDistanceChunks * 16;
         this.renderDistanceSq = this.renderDistance * this.renderDistance;
         boolean flag = this.field_175005_X;
         this.field_175005_X = OpenGlHelper.func_176075_f();
         if(flag && !this.field_175005_X) {
            this.field_174996_N = new RenderList();
            this.field_175007_a = new ListChunkFactory();
         } else if(!flag && this.field_175005_X) {
            this.field_174996_N = new VboRenderList();
            this.field_175007_a = new VboChunkFactory();
         }

         if(flag != this.field_175005_X) {
            this.generateStars();
            this.generateSky();
            this.generateSky2();
         }

         if(this.viewFrustum != null) {
            this.viewFrustum.deleteGlResources();
         }

         this.stopChunkUpdates();
         Set var5 = this.setTileEntities;
         synchronized(this.setTileEntities) {
            this.setTileEntities.clear();
         }

         this.viewFrustum = new ViewFrustum(this.world, this.mc.gameSettings.renderDistanceChunks, this, this.field_175007_a);
         if(this.world != null) {
            Entity entity = this.mc.getRenderViewEntity();
            if(entity != null) {
               this.viewFrustum.updateChunkPositions(entity.posX, entity.posZ);
            }
         }

         this.field_72740_G = 2;
      }

   }

   protected void stopChunkUpdates() {
      this.chunksToUpdate.clear();
      this.renderDispatcher.stopChunkUpdates();
   }

   public void createBindEntityOutlineFbs(int width, int height) {
      if(OpenGlHelper.field_148824_g && this.entityOutlineShader != null) {
         this.entityOutlineShader.createBindFramebuffers(width, height);
      }

   }

   public void func_180446_a(Entity p_180446_1_, ICamera p_180446_2_, float p_180446_3_) {
      int i = 0;
      if(Reflector.MinecraftForgeClient_getRenderPass.exists()) {
         i = Reflector.callInt(Reflector.MinecraftForgeClient_getRenderPass, new Object[0]);
      }

      if(this.field_72740_G > 0) {
         if(i > 0) {
            return;
         }

         --this.field_72740_G;
      } else {
         double d0 = p_180446_1_.prevPosX + (p_180446_1_.posX - p_180446_1_.prevPosX) * (double)p_180446_3_;
         double d1 = p_180446_1_.prevPosY + (p_180446_1_.posY - p_180446_1_.prevPosY) * (double)p_180446_3_;
         double d2 = p_180446_1_.prevPosZ + (p_180446_1_.posZ - p_180446_1_.prevPosZ) * (double)p_180446_3_;
         this.world.profiler.startSection("prepare");
         TileEntityRendererDispatcher.instance.func_178470_a(this.world, this.mc.getTextureManager(), this.mc.fontRenderer, this.mc.getRenderViewEntity(), p_180446_3_);
         this.renderManager.func_180597_a(this.world, this.mc.fontRenderer, this.mc.getRenderViewEntity(), this.mc.pointedEntity, this.mc.gameSettings, p_180446_3_);
         if(i == 0) {
            this.field_72748_H = 0;
            this.countEntitiesRendered = 0;
            this.countEntitiesHidden = 0;
            this.countTileEntitiesRendered = 0;
         }

         Entity entity = this.mc.getRenderViewEntity();
         double d3 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)p_180446_3_;
         double d4 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)p_180446_3_;
         double d5 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)p_180446_3_;
         TileEntityRendererDispatcher.field_147554_b = d3;
         TileEntityRendererDispatcher.field_147555_c = d4;
         TileEntityRendererDispatcher.field_147552_d = d5;
         this.renderManager.func_178628_a(d3, d4, d5);
         this.field_72777_q.gameRenderer.func_180436_i();
         this.world.profiler.func_76318_c("global");
         List list = this.world.func_72910_y();
         if(i == 0) {
            this.field_72748_H = list.size();
         }

         if(Config.isFogOff() && this.field_72777_q.gameRenderer.fogStandard) {
            GlStateManager.func_179106_n();
         }

         boolean flag = Reflector.ForgeEntity_shouldRenderInPass.exists();
         boolean flag1 = Reflector.ForgeTileEntity_shouldRenderInPass.exists();

         for(int j = 0; j < this.world.field_73007_j.size(); ++j) {
            Entity entity1 = (Entity)this.world.field_73007_j.get(j);
            if(!flag || Reflector.callBoolean(entity1, Reflector.ForgeEntity_shouldRenderInPass, new Object[]{Integer.valueOf(i)})) {
               ++this.countEntitiesRendered;
               if(entity1.isInRangeToRender3d(d0, d1, d2)) {
                  this.renderManager.func_147937_a(entity1, p_180446_3_);
               }
            }
         }

         if(this.isRenderEntityOutlines()) {
            GlStateManager.func_179143_c(519);
            GlStateManager.func_179106_n();
            this.entityOutlineFramebuffer.func_147614_f();
            this.entityOutlineFramebuffer.bindFramebuffer(false);
            this.world.profiler.func_76318_c("entityOutlines");
            RenderHelper.disableStandardItemLighting();
            this.renderManager.func_178632_c(true);

            for(int k = 0; k < list.size(); ++k) {
               Entity entity3 = (Entity)list.get(k);
               if(!flag || Reflector.callBoolean(entity3, Reflector.ForgeEntity_shouldRenderInPass, new Object[]{Integer.valueOf(i)})) {
                  boolean flag2 = this.field_72777_q.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.field_72777_q.getRenderViewEntity()).isSleeping();
                  boolean flag3 = entity3.isInRangeToRender3d(d0, d1, d2) && (entity3.ignoreFrustumCheck || p_180446_2_.func_78546_a(entity3.getBoundingBox()) || entity3.field_70153_n == this.field_72777_q.player) && entity3 instanceof EntityPlayer;
                  if((entity3 != this.field_72777_q.getRenderViewEntity() || this.field_72777_q.gameSettings.thirdPersonView != 0 || flag2) && flag3) {
                     this.renderManager.func_147937_a(entity3, p_180446_3_);
                  }
               }
            }

            this.renderManager.func_178632_c(false);
            RenderHelper.func_74519_b();
            GlStateManager.func_179132_a(false);
            this.entityOutlineShader.render(p_180446_3_);
            GlStateManager.func_179145_e();
            GlStateManager.func_179132_a(true);
            this.field_72777_q.getFramebuffer().bindFramebuffer(false);
            GlStateManager.func_179127_m();
            GlStateManager.func_179147_l();
            GlStateManager.func_179142_g();
            GlStateManager.func_179143_c(515);
            GlStateManager.func_179126_j();
            GlStateManager.func_179141_d();
         }

         this.world.profiler.func_76318_c("entities");
         boolean flag7 = Config.isShaders();
         if(flag7) {
            Shaders.beginEntities();
         }

         Iterator iterator1 = this.renderInfosEntities.iterator();
         boolean flag4 = this.field_72777_q.gameSettings.fancyGraphics;
         this.field_72777_q.gameSettings.fancyGraphics = Config.isDroppedItemsFancy();

         label920:
         while(iterator1.hasNext()) {
            RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = (RenderGlobal.ContainerLocalRenderInformation)iterator1.next();
            Chunk chunk = this.world.getChunkAt(renderglobal$containerlocalrenderinformation.renderChunk.getPosition());
            ClassInheritanceMultiMap classinheritancemultimap = chunk.getEntityLists()[renderglobal$containerlocalrenderinformation.renderChunk.getPosition().getY() / 16];
            if(!classinheritancemultimap.isEmpty()) {
               Iterator iterator = classinheritancemultimap.iterator();

               while(true) {
                  Entity entity2;
                  boolean flag5;
                  while(true) {
                     if(!iterator.hasNext()) {
                        continue label920;
                     }

                     entity2 = (Entity)iterator.next();
                     if(!flag || Reflector.callBoolean(entity2, Reflector.ForgeEntity_shouldRenderInPass, new Object[]{Integer.valueOf(i)})) {
                        flag5 = this.renderManager.func_178635_a(entity2, p_180446_2_, d0, d1, d2) || entity2.field_70153_n == this.field_72777_q.player;
                        if(!flag5) {
                           break;
                        }

                        boolean flag6 = this.field_72777_q.getRenderViewEntity() instanceof EntityLivingBase?((EntityLivingBase)this.field_72777_q.getRenderViewEntity()).isSleeping():false;
                        if((entity2 != this.field_72777_q.getRenderViewEntity() || this.field_72777_q.gameSettings.thirdPersonView != 0 || flag6) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.world.isBlockLoaded(new BlockPos(entity2)))) {
                           ++this.countEntitiesRendered;
                           if(entity2.getClass() == EntityItemFrame.class) {
                              entity2.renderDistanceWeight = 0.06D;
                           }

                           this.renderedEntity = entity2;
                           if(flag7) {
                              Shaders.nextEntity(entity2);
                           }

                           this.renderManager.func_147937_a(entity2, p_180446_3_);
                           this.renderedEntity = null;
                           break;
                        }
                     }
                  }

                  if(!flag5 && entity2 instanceof EntityWitherSkull) {
                     if(flag7) {
                        Shaders.nextEntity(entity2);
                     }

                     this.field_72777_q.getRenderManager().func_178630_b(entity2, p_180446_3_);
                  }
               }
            }
         }

         this.field_72777_q.gameSettings.fancyGraphics = flag4;
         FontRenderer fontrenderer = TileEntityRendererDispatcher.instance.getFontRenderer();
         if(flag7) {
            Shaders.endEntities();
            Shaders.beginBlockEntities();
         }

         this.world.profiler.func_76318_c("blockentities");
         RenderHelper.func_74519_b();
         if(Reflector.ForgeTileEntityRendererDispatcher_preDrawBatch.exists()) {
            Reflector.call(TileEntityRendererDispatcher.instance, Reflector.ForgeTileEntityRendererDispatcher_preDrawBatch, new Object[0]);
         }

         label1385:
         for(RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 : this.renderInfosTileEntities) {
            List list1 = renderglobal$containerlocalrenderinformation1.renderChunk.getCompiledChunk().getTileEntities();
            if(!list1.isEmpty()) {
               Iterator iterator2 = list1.iterator();

               while(true) {
                  TileEntity tileentity;
                  while(true) {
                     if(!iterator2.hasNext()) {
                        continue label1385;
                     }

                     tileentity = (TileEntity)iterator2.next();
                     if(!flag1) {
                        break;
                     }

                     if(Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_shouldRenderInPass, new Object[]{Integer.valueOf(i)})) {
                        AxisAlignedBB axisalignedbb = (AxisAlignedBB)Reflector.call(tileentity, Reflector.ForgeTileEntity_getRenderBoundingBox, new Object[0]);
                        if(axisalignedbb == null || p_180446_2_.func_78546_a(axisalignedbb)) {
                           break;
                        }
                     }
                  }

                  Class oclass = tileentity.getClass();
                  if(oclass == TileEntitySign.class && !Config.zoomMode) {
                     EntityPlayer entityplayer = this.field_72777_q.player;
                     double d6 = tileentity.getDistanceSq(entityplayer.posX, entityplayer.posY, entityplayer.posZ);
                     if(d6 > 256.0D) {
                        fontrenderer.enabled = false;
                     }
                  }

                  if(flag7) {
                     Shaders.nextBlockEntity(tileentity);
                  }

                  TileEntityRendererDispatcher.instance.func_180546_a(tileentity, p_180446_3_, -1);
                  ++this.countTileEntitiesRendered;
                  fontrenderer.enabled = true;
               }
            }
         }

         Set var32 = this.setTileEntities;
         synchronized(this.setTileEntities) {
            for(TileEntity tileentity1 : this.setTileEntities) {
               if(flag1) {
                  if(!Reflector.callBoolean(tileentity1, Reflector.ForgeTileEntity_shouldRenderInPass, new Object[]{Integer.valueOf(i)})) {
                     continue;
                  }

                  AxisAlignedBB axisalignedbb1 = (AxisAlignedBB)Reflector.call(tileentity1, Reflector.ForgeTileEntity_getRenderBoundingBox, new Object[0]);
                  if(axisalignedbb1 != null && !p_180446_2_.func_78546_a(axisalignedbb1)) {
                     continue;
                  }
               }

               Class oclass1 = tileentity1.getClass();
               if(oclass1 == TileEntitySign.class && !Config.zoomMode) {
                  EntityPlayer entityplayer1 = this.field_72777_q.player;
                  double d7 = tileentity1.getDistanceSq(entityplayer1.posX, entityplayer1.posY, entityplayer1.posZ);
                  if(d7 > 256.0D) {
                     fontrenderer.enabled = false;
                  }
               }

               if(flag7) {
                  Shaders.nextBlockEntity(tileentity1);
               }

               TileEntityRendererDispatcher.instance.func_180546_a(tileentity1, p_180446_3_, -1);
               fontrenderer.enabled = true;
            }
         }

         if(Reflector.ForgeTileEntityRendererDispatcher_drawBatch.exists()) {
            Reflector.call(TileEntityRendererDispatcher.instance, Reflector.ForgeTileEntityRendererDispatcher_drawBatch, new Object[]{Integer.valueOf(i)});
         }

         this.func_180443_s();

         for(DestroyBlockProgress destroyblockprogress : this.damagedBlocks.values()) {
            BlockPos blockpos = destroyblockprogress.getPosition();
            TileEntity tileentity2 = this.world.getTileEntity(blockpos);
            if(tileentity2 instanceof TileEntityChest) {
               TileEntityChest tileentitychest = (TileEntityChest)tileentity2;
               if(tileentitychest.field_145991_k != null) {
                  blockpos = blockpos.offset(EnumFacing.WEST);
                  tileentity2 = this.world.getTileEntity(blockpos);
               } else if(tileentitychest.field_145992_i != null) {
                  blockpos = blockpos.offset(EnumFacing.NORTH);
                  tileentity2 = this.world.getTileEntity(blockpos);
               }
            }

            Block block = this.world.getBlockState(blockpos).getBlock();
            boolean flag8;
            if(flag1) {
               flag8 = false;
               if(tileentity2 != null && Reflector.callBoolean(tileentity2, Reflector.ForgeTileEntity_shouldRenderInPass, new Object[]{Integer.valueOf(i)}) && Reflector.callBoolean(tileentity2, Reflector.ForgeTileEntity_canRenderBreaking, new Object[0])) {
                  AxisAlignedBB axisalignedbb2 = (AxisAlignedBB)Reflector.call(tileentity2, Reflector.ForgeTileEntity_getRenderBoundingBox, new Object[0]);
                  if(axisalignedbb2 != null) {
                     flag8 = p_180446_2_.func_78546_a(axisalignedbb2);
                  }
               }
            } else {
               flag8 = tileentity2 != null && (block instanceof BlockChest || block instanceof BlockEnderChest || block instanceof BlockSign || block instanceof BlockSkull);
            }

            if(flag8) {
               if(flag7) {
                  Shaders.nextBlockEntity(tileentity2);
               }

               TileEntityRendererDispatcher.instance.func_180546_a(tileentity2, p_180446_3_, destroyblockprogress.getPartialBlockDamage());
            }
         }

         this.func_174969_t();
         this.field_72777_q.gameRenderer.func_175072_h();
         this.field_72777_q.profiler.endSection();
      }

   }

   public String getDebugInfoRenders() {
      int i = this.viewFrustum.renderChunks.length;
      int j = 0;

      for(RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos) {
         CompiledChunk compiledchunk = renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk;
         if(compiledchunk != CompiledChunk.DUMMY && !compiledchunk.isEmpty()) {
            ++j;
         }
      }

      return String.format("C: %d/%d %sD: %d, %s", new Object[]{Integer.valueOf(j), Integer.valueOf(i), this.field_72777_q.renderChunksMany?"(s) ":"", Integer.valueOf(this.renderDistanceChunks), this.renderDispatcher.getDebugInfo()});
   }

   public String getDebugInfoEntities() {
      return "E: " + this.countEntitiesRendered + "/" + this.field_72748_H + ", B: " + this.countEntitiesHidden + ", I: " + (this.field_72748_H - this.countEntitiesHidden - this.countEntitiesRendered) + ", " + Config.getVersionDebug();
   }

   public void func_174970_a(Entity p_174970_1_, double p_174970_2_, ICamera p_174970_4_, int p_174970_5_, boolean p_174970_6_) {
      if(this.field_72777_q.gameSettings.renderDistanceChunks != this.renderDistanceChunks) {
         this.loadRenderers();
      }

      this.world.profiler.startSection("camera");
      double d0 = p_174970_1_.posX - this.frustumUpdatePosX;
      double d1 = p_174970_1_.posY - this.frustumUpdatePosY;
      double d2 = p_174970_1_.posZ - this.frustumUpdatePosZ;
      if(this.frustumUpdatePosChunkX != p_174970_1_.chunkCoordX || this.frustumUpdatePosChunkY != p_174970_1_.chunkCoordY || this.frustumUpdatePosChunkZ != p_174970_1_.chunkCoordZ || d0 * d0 + d1 * d1 + d2 * d2 > 16.0D) {
         this.frustumUpdatePosX = p_174970_1_.posX;
         this.frustumUpdatePosY = p_174970_1_.posY;
         this.frustumUpdatePosZ = p_174970_1_.posZ;
         this.frustumUpdatePosChunkX = p_174970_1_.chunkCoordX;
         this.frustumUpdatePosChunkY = p_174970_1_.chunkCoordY;
         this.frustumUpdatePosChunkZ = p_174970_1_.chunkCoordZ;
         this.viewFrustum.updateChunkPositions(p_174970_1_.posX, p_174970_1_.posZ);
      }

      if(Config.isDynamicLights()) {
         DynamicLights.update(this);
      }

      this.field_72769_h.profiler.func_76318_c("renderlistcamera");
      double d3 = p_174970_1_.lastTickPosX + (p_174970_1_.posX - p_174970_1_.lastTickPosX) * p_174970_2_;
      double d4 = p_174970_1_.lastTickPosY + (p_174970_1_.posY - p_174970_1_.lastTickPosY) * p_174970_2_;
      double d5 = p_174970_1_.lastTickPosZ + (p_174970_1_.posZ - p_174970_1_.lastTickPosZ) * p_174970_2_;
      this.field_174996_N.func_178004_a(d3, d4, d5);
      this.field_72769_h.profiler.func_76318_c("cull");
      if(this.debugFixedClippingHelper != null) {
         Frustum frustum = new Frustum(this.debugFixedClippingHelper);
         frustum.func_78547_a(this.debugTerrainFrustumPosition.x, this.debugTerrainFrustumPosition.y, this.debugTerrainFrustumPosition.z);
         p_174970_4_ = frustum;
      }

      this.field_72777_q.profiler.func_76318_c("culling");
      BlockPos blockpos2 = new BlockPos(d3, d4 + (double)p_174970_1_.getEyeHeight(), d5);
      RenderChunk renderchunk = this.viewFrustum.getRenderChunk(blockpos2);
      BlockPos blockpos = new BlockPos(MathHelper.floor(d3 / 16.0D) * 16, MathHelper.floor(d4 / 16.0D) * 16, MathHelper.floor(d5 / 16.0D) * 16);
      this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || p_174970_1_.posX != this.lastViewEntityX || p_174970_1_.posY != this.lastViewEntityY || p_174970_1_.posZ != this.lastViewEntityZ || (double)p_174970_1_.rotationPitch != this.lastViewEntityPitch || (double)p_174970_1_.rotationYaw != this.lastViewEntityYaw;
      this.lastViewEntityX = p_174970_1_.posX;
      this.lastViewEntityY = p_174970_1_.posY;
      this.lastViewEntityZ = p_174970_1_.posZ;
      this.lastViewEntityPitch = (double)p_174970_1_.rotationPitch;
      this.lastViewEntityYaw = (double)p_174970_1_.rotationYaw;
      boolean flag = this.debugFixedClippingHelper != null;
      Lagometer.timerVisibility.start();
      if(Shaders.isShadowPass) {
         this.renderInfos = this.renderInfosShadow;
         this.renderInfosEntities = this.renderInfosEntitiesShadow;
         this.renderInfosTileEntities = this.renderInfosTileEntitiesShadow;
         if(!flag && this.displayListEntitiesDirty) {
            this.renderInfos.clear();
            this.renderInfosEntities.clear();
            this.renderInfosTileEntities.clear();
            RenderInfoLazy renderinfolazy = new RenderInfoLazy();
            Iterator<RenderChunk> iterator = ShadowUtils.makeShadowChunkIterator(this.field_72769_h, p_174970_2_, p_174970_1_, this.renderDistanceChunks, this.viewFrustum);

            while(iterator.hasNext()) {
               RenderChunk renderchunk1 = (RenderChunk)iterator.next();
               if(renderchunk1 != null) {
                  renderinfolazy.setRenderChunk(renderchunk1);
                  if(!renderchunk1.compiledChunk.isEmpty() || renderchunk1.needsUpdate()) {
                     this.renderInfos.add(renderinfolazy.getRenderInfo());
                  }

                  BlockPos blockpos1 = renderchunk1.getPosition();
                  if(ChunkUtils.hasEntities(this.field_72769_h.getChunkAt(blockpos1))) {
                     this.renderInfosEntities.add(renderinfolazy.getRenderInfo());
                  }

                  if(renderchunk1.getCompiledChunk().getTileEntities().size() > 0) {
                     this.renderInfosTileEntities.add(renderinfolazy.getRenderInfo());
                  }
               }
            }
         }
      } else {
         this.renderInfos = this.renderInfosNormal;
         this.renderInfosEntities = this.renderInfosEntitiesNormal;
         this.renderInfosTileEntities = this.renderInfosTileEntitiesNormal;
      }

      if(!flag && this.displayListEntitiesDirty && !Shaders.isShadowPass) {
         this.displayListEntitiesDirty = false;
         this.renderInfos.clear();
         this.renderInfosEntities.clear();
         this.renderInfosTileEntities.clear();
         this.visibilityDeque.clear();
         Deque deque = this.visibilityDeque;
         boolean flag1 = this.field_72777_q.renderChunksMany;
         if(renderchunk != null) {
            boolean flag2 = false;
            RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation3 = new RenderGlobal.ContainerLocalRenderInformation(renderchunk, (EnumFacing)null, 0, (Object)null);
            Set set1 = SET_ALL_FACINGS;
            if(set1.size() == 1) {
               Vector3f vector3f = this.func_174962_a(p_174970_1_, p_174970_2_);
               EnumFacing enumfacing = EnumFacing.getFacingFromVector(vector3f.x, vector3f.y, vector3f.z).getOpposite();
               set1.remove(enumfacing);
            }

            if(set1.isEmpty()) {
               flag2 = true;
            }

            if(flag2 && !p_174970_6_) {
               this.renderInfos.add(renderglobal$containerlocalrenderinformation3);
            } else {
               if(p_174970_6_ && this.field_72769_h.getBlockState(blockpos2).getBlock().func_149662_c()) {
                  flag1 = false;
               }

               renderchunk.setFrameIndex(p_174970_5_);
               deque.add(renderglobal$containerlocalrenderinformation3);
            }
         } else {
            int i = blockpos2.getY() > 0?248:8;

            for(int j = -this.renderDistanceChunks; j <= this.renderDistanceChunks; ++j) {
               for(int k = -this.renderDistanceChunks; k <= this.renderDistanceChunks; ++k) {
                  RenderChunk renderchunk2 = this.viewFrustum.getRenderChunk(new BlockPos((j << 4) + 8, i, (k << 4) + 8));
                  if(renderchunk2 != null && ((ICamera)p_174970_4_).func_78546_a(renderchunk2.boundingBox)) {
                     renderchunk2.setFrameIndex(p_174970_5_);
                     deque.add(new RenderGlobal.ContainerLocalRenderInformation(renderchunk2, (EnumFacing)null, 0, (Object)null));
                  }
               }
            }
         }

         EnumFacing[] aenumfacing = EnumFacing.BY_INDEX;
         int l = aenumfacing.length;

         while(!deque.isEmpty()) {
            RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 = (RenderGlobal.ContainerLocalRenderInformation)deque.poll();
            RenderChunk renderchunk4 = renderglobal$containerlocalrenderinformation1.renderChunk;
            EnumFacing enumfacing2 = renderglobal$containerlocalrenderinformation1.facing;
            BlockPos blockpos3 = renderchunk4.getPosition();
            if(!renderchunk4.compiledChunk.isEmpty() || renderchunk4.needsUpdate()) {
               this.renderInfos.add(renderglobal$containerlocalrenderinformation1);
            }

            if(ChunkUtils.hasEntities(this.field_72769_h.getChunkAt(blockpos3))) {
               this.renderInfosEntities.add(renderglobal$containerlocalrenderinformation1);
            }

            if(renderchunk4.getCompiledChunk().getTileEntities().size() > 0) {
               this.renderInfosTileEntities.add(renderglobal$containerlocalrenderinformation1);
            }

            for(int i1 = 0; i1 < l; ++i1) {
               EnumFacing enumfacing1 = aenumfacing[i1];
               if((!flag1 || !renderglobal$containerlocalrenderinformation1.setFacing.contains(enumfacing1.getOpposite())) && (!flag1 || enumfacing2 == null || renderchunk4.getCompiledChunk().isVisible(enumfacing2.getOpposite(), enumfacing1))) {
                  RenderChunk renderchunk3 = this.getRenderChunkOffset(blockpos2, renderchunk4, enumfacing1);
                  if(renderchunk3 != null && renderchunk3.setFrameIndex(p_174970_5_) && ((ICamera)p_174970_4_).func_78546_a(renderchunk3.boundingBox)) {
                     RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = new RenderGlobal.ContainerLocalRenderInformation(renderchunk3, enumfacing1, renderglobal$containerlocalrenderinformation1.counter + 1, (Object)null);
                     renderglobal$containerlocalrenderinformation.setFacing.addAll(renderglobal$containerlocalrenderinformation1.setFacing);
                     renderglobal$containerlocalrenderinformation.setFacing.add(enumfacing1);
                     deque.add(renderglobal$containerlocalrenderinformation);
                  }
               }
            }
         }
      }

      if(this.debugFixTerrainFrustum) {
         this.func_174984_a(d3, d4, d5);
         this.debugFixTerrainFrustum = false;
      }

      Lagometer.timerVisibility.end();
      if(Shaders.isShadowPass) {
         Shaders.mcProfilerEndSection();
      } else {
         this.renderDispatcher.clearChunkUpdates();
         Set set = this.chunksToUpdate;
         this.chunksToUpdate = Sets.newLinkedHashSet();
         Iterator iterator1 = this.renderInfos.iterator();
         Lagometer.timerChunkUpdate.start();

         while(iterator1.hasNext()) {
            RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation2 = (RenderGlobal.ContainerLocalRenderInformation)iterator1.next();
            RenderChunk renderchunk5 = renderglobal$containerlocalrenderinformation2.renderChunk;
            if(renderchunk5.needsUpdate() || set.contains(renderchunk5)) {
               this.displayListEntitiesDirty = true;
               if(this.func_174983_a(blockpos, renderglobal$containerlocalrenderinformation2.renderChunk)) {
                  if(!renderchunk5.isPlayerUpdate()) {
                     this.chunksToUpdateForced.add(renderchunk5);
                  } else {
                     this.field_72777_q.profiler.startSection("build near");
                     this.renderDispatcher.func_178505_b(renderchunk5);
                     renderchunk5.setNeedsUpdate(false);
                     this.field_72777_q.profiler.endSection();
                  }
               } else {
                  this.chunksToUpdate.add(renderchunk5);
               }
            }
         }

         Lagometer.timerChunkUpdate.end();
         this.chunksToUpdate.addAll(set);
         this.field_72777_q.profiler.endSection();
      }
   }

   private boolean func_174983_a(BlockPos p_174983_1_, RenderChunk p_174983_2_) {
      BlockPos blockpos = p_174983_2_.getPosition();
      return MathHelper.abs(p_174983_1_.getX() - blockpos.getX()) > 16?false:(MathHelper.abs(p_174983_1_.getY() - blockpos.getY()) > 16?false:MathHelper.abs(p_174983_1_.getZ() - blockpos.getZ()) <= 16);
   }

   private Set getVisibleFacings(BlockPos pos) {
      VisGraph visgraph = new VisGraph();
      BlockPos blockpos = new BlockPos(pos.getX() >> 4 << 4, pos.getY() >> 4 << 4, pos.getZ() >> 4 << 4);
      Chunk chunk = this.field_72769_h.getChunkAt(blockpos);

      for(BlockPos.MutableBlockPos blockpos$mutableblockpos : BlockPos.func_177975_b(blockpos, blockpos.add(15, 15, 15))) {
         if(chunk.func_177428_a(blockpos$mutableblockpos).func_149662_c()) {
            visgraph.setOpaqueCube(blockpos$mutableblockpos);
         }
      }

      return visgraph.getVisibleFacings(pos);
   }

   private RenderChunk getRenderChunkOffset(BlockPos playerPos, RenderChunk renderChunkBase, EnumFacing facing) {
      BlockPos blockpos = renderChunkBase.getPositionOffset16(facing);
      if(blockpos.getY() >= 0 && blockpos.getY() < 256) {
         int i = MathHelper.abs(playerPos.getX() - blockpos.getX());
         int j = MathHelper.abs(playerPos.getZ() - blockpos.getZ());
         if(Config.isFogOff()) {
            if(i > this.renderDistance || j > this.renderDistance) {
               return null;
            }
         } else {
            int k = i * i + j * j;
            if(k > this.renderDistanceSq) {
               return null;
            }
         }

         return this.viewFrustum.getRenderChunk(blockpos);
      } else {
         return null;
      }
   }

   private void func_174984_a(double p_174984_1_, double p_174984_3_, double p_174984_5_) {
      this.debugFixedClippingHelper = new ClippingHelperImpl();
      ((ClippingHelperImpl)this.debugFixedClippingHelper).func_78560_b();
      Matrix4f matrix4f = new Matrix4f(this.debugFixedClippingHelper.field_178626_c);
      matrix4f.transpose();
      Matrix4f matrix4f1 = new Matrix4f(this.debugFixedClippingHelper.field_178625_b);
      matrix4f1.transpose();
      Matrix4f matrix4f2 = new Matrix4f();
      Matrix4f.mul(matrix4f1, matrix4f, matrix4f2);
      matrix4f2.invert();
      this.debugTerrainFrustumPosition.x = p_174984_1_;
      this.debugTerrainFrustumPosition.y = p_174984_3_;
      this.debugTerrainFrustumPosition.z = p_174984_5_;
      this.debugTerrainMatrix[0] = new Vector4f(-1.0F, -1.0F, -1.0F, 1.0F);
      this.debugTerrainMatrix[1] = new Vector4f(1.0F, -1.0F, -1.0F, 1.0F);
      this.debugTerrainMatrix[2] = new Vector4f(1.0F, 1.0F, -1.0F, 1.0F);
      this.debugTerrainMatrix[3] = new Vector4f(-1.0F, 1.0F, -1.0F, 1.0F);
      this.debugTerrainMatrix[4] = new Vector4f(-1.0F, -1.0F, 1.0F, 1.0F);
      this.debugTerrainMatrix[5] = new Vector4f(1.0F, -1.0F, 1.0F, 1.0F);
      this.debugTerrainMatrix[6] = new Vector4f(1.0F, 1.0F, 1.0F, 1.0F);
      this.debugTerrainMatrix[7] = new Vector4f(-1.0F, 1.0F, 1.0F, 1.0F);

      for(int i = 0; i < 8; ++i) {
         Matrix4f.transform(matrix4f2, this.debugTerrainMatrix[i], this.debugTerrainMatrix[i]);
         this.debugTerrainMatrix[i].x /= this.debugTerrainMatrix[i].w;
         this.debugTerrainMatrix[i].y /= this.debugTerrainMatrix[i].w;
         this.debugTerrainMatrix[i].z /= this.debugTerrainMatrix[i].w;
         this.debugTerrainMatrix[i].w = 1.0F;
      }

   }

   protected Vector3f func_174962_a(Entity p_174962_1_, double p_174962_2_) {
      float f = (float)((double)p_174962_1_.prevRotationPitch + (double)(p_174962_1_.rotationPitch - p_174962_1_.prevRotationPitch) * p_174962_2_);
      float f1 = (float)((double)p_174962_1_.prevRotationYaw + (double)(p_174962_1_.rotationYaw - p_174962_1_.prevRotationYaw) * p_174962_2_);
      if(Minecraft.getInstance().gameSettings.thirdPersonView == 2) {
         f += 180.0F;
      }

      float f2 = MathHelper.cos(-f1 * 0.017453292F - 3.1415927F);
      float f3 = MathHelper.sin(-f1 * 0.017453292F - 3.1415927F);
      float f4 = -MathHelper.cos(-f * 0.017453292F);
      float f5 = MathHelper.sin(-f * 0.017453292F);
      return new Vector3f(f3 * f4, f5, f2 * f4);
   }

   public int func_174977_a(EnumWorldBlockLayer p_174977_1_, double p_174977_2_, int p_174977_4_, Entity p_174977_5_) {
      RenderHelper.disableStandardItemLighting();
      if(p_174977_1_ == EnumWorldBlockLayer.TRANSLUCENT) {
         this.field_72777_q.profiler.startSection("translucent_sort");
         double d0 = p_174977_5_.posX - this.prevRenderSortX;
         double d1 = p_174977_5_.posY - this.prevRenderSortY;
         double d2 = p_174977_5_.posZ - this.prevRenderSortZ;
         if(d0 * d0 + d1 * d1 + d2 * d2 > 1.0D) {
            this.prevRenderSortX = p_174977_5_.posX;
            this.prevRenderSortY = p_174977_5_.posY;
            this.prevRenderSortZ = p_174977_5_.posZ;
            int k = 0;
            Iterator iterator = this.renderInfos.iterator();
            this.chunksToResortTransparency.clear();

            while(iterator.hasNext()) {
               RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = (RenderGlobal.ContainerLocalRenderInformation)iterator.next();
               if(renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk.func_178492_d(p_174977_1_) && k++ < 15) {
                  this.chunksToResortTransparency.add(renderglobal$containerlocalrenderinformation.renderChunk);
               }
            }
         }

         this.field_72777_q.profiler.endSection();
      }

      this.field_72777_q.profiler.startSection("filterempty");
      int l = 0;
      boolean flag = p_174977_1_ == EnumWorldBlockLayer.TRANSLUCENT;
      int i1 = flag?this.renderInfos.size() - 1:0;
      int i = flag?-1:this.renderInfos.size();
      int j1 = flag?-1:1;

      for(int j = i1; j != i; j += j1) {
         RenderChunk renderchunk = ((RenderGlobal.ContainerLocalRenderInformation)this.renderInfos.get(j)).renderChunk;
         if(!renderchunk.getCompiledChunk().func_178491_b(p_174977_1_)) {
            ++l;
            this.field_174996_N.func_178002_a(renderchunk, p_174977_1_);
         }
      }

      if(l == 0) {
         this.field_72777_q.profiler.endSection();
         return l;
      } else {
         if(Config.isFogOff() && this.field_72777_q.gameRenderer.fogStandard) {
            GlStateManager.func_179106_n();
         }

         this.field_72777_q.profiler.func_76318_c("render_" + p_174977_1_);
         this.func_174982_a(p_174977_1_);
         this.field_72777_q.profiler.endSection();
         return l;
      }
   }

   private void func_174982_a(EnumWorldBlockLayer p_174982_1_) {
      this.field_72777_q.gameRenderer.func_180436_i();
      if(OpenGlHelper.func_176075_f()) {
         GL11.glEnableClientState('\u8074');
         OpenGlHelper.func_77472_b(OpenGlHelper.field_77478_a);
         GL11.glEnableClientState('\u8078');
         OpenGlHelper.func_77472_b(OpenGlHelper.field_77476_b);
         GL11.glEnableClientState('\u8078');
         OpenGlHelper.func_77472_b(OpenGlHelper.field_77478_a);
         GL11.glEnableClientState('\u8076');
      }

      if(Config.isShaders()) {
         ShadersRender.preRenderChunkLayer(p_174982_1_);
      }

      this.field_174996_N.func_178001_a(p_174982_1_);
      if(Config.isShaders()) {
         ShadersRender.postRenderChunkLayer(p_174982_1_);
      }

      if(OpenGlHelper.func_176075_f()) {
         for(VertexFormatElement vertexformatelement : DefaultVertexFormats.BLOCK.func_177343_g()) {
            VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
            int i = vertexformatelement.getIndex();
            switch(RenderGlobal.RenderGlobal$2.field_178037_a[vertexformatelement$enumusage.ordinal()]) {
            case 1:
               GL11.glDisableClientState('\u8074');
               break;
            case 2:
               OpenGlHelper.func_77472_b(OpenGlHelper.field_77478_a + i);
               GL11.glDisableClientState('\u8078');
               OpenGlHelper.func_77472_b(OpenGlHelper.field_77478_a);
               break;
            case 3:
               GL11.glDisableClientState('\u8076');
               GlStateManager.func_179117_G();
            }
         }
      }

      this.field_72777_q.gameRenderer.func_175072_h();
   }

   private void func_174965_a(Iterator p_174965_1_) {
      while(p_174965_1_.hasNext()) {
         DestroyBlockProgress destroyblockprogress = (DestroyBlockProgress)p_174965_1_.next();
         int i = destroyblockprogress.getCreationCloudUpdateTick();
         if(this.ticks - i > 400) {
            p_174965_1_.remove();
         }
      }

   }

   public void tick() {
      if(Config.isShaders() && Keyboard.isKeyDown(61) && Keyboard.isKeyDown(19)) {
         Shaders.uninit();
         Shaders.loadShaderPack();
      }

      ++this.ticks;
      if(this.ticks % 20 == 0) {
         this.func_174965_a(this.damagedBlocks.values().iterator());
      }

   }

   private void func_180448_r() {
      if(Config.isSkyEnabled()) {
         GlStateManager.func_179106_n();
         GlStateManager.func_179118_c();
         GlStateManager.func_179147_l();
         GlStateManager.func_179120_a(770, 771, 1, 0);
         RenderHelper.disableStandardItemLighting();
         GlStateManager.func_179132_a(false);
         this.textureManager.bindTexture(END_SKY_TEXTURES);
         Tessellator tessellator = Tessellator.getInstance();
         WorldRenderer worldrenderer = tessellator.getBuffer();

         for(int i = 0; i < 6; ++i) {
            GlStateManager.func_179094_E();
            if(i == 1) {
               GlStateManager.func_179114_b(90.0F, 1.0F, 0.0F, 0.0F);
            }

            if(i == 2) {
               GlStateManager.func_179114_b(-90.0F, 1.0F, 0.0F, 0.0F);
            }

            if(i == 3) {
               GlStateManager.func_179114_b(180.0F, 1.0F, 0.0F, 0.0F);
            }

            if(i == 4) {
               GlStateManager.func_179114_b(90.0F, 0.0F, 0.0F, 1.0F);
            }

            if(i == 5) {
               GlStateManager.func_179114_b(-90.0F, 0.0F, 0.0F, 1.0F);
            }

            worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
            worldrenderer.func_181662_b(-100.0D, -100.0D, -100.0D).func_181673_a(0.0D, 0.0D).func_181669_b(40, 40, 40, 255).endVertex();
            worldrenderer.func_181662_b(-100.0D, -100.0D, 100.0D).func_181673_a(0.0D, 16.0D).func_181669_b(40, 40, 40, 255).endVertex();
            worldrenderer.func_181662_b(100.0D, -100.0D, 100.0D).func_181673_a(16.0D, 16.0D).func_181669_b(40, 40, 40, 255).endVertex();
            worldrenderer.func_181662_b(100.0D, -100.0D, -100.0D).func_181673_a(16.0D, 0.0D).func_181669_b(40, 40, 40, 255).endVertex();
            tessellator.draw();
            GlStateManager.func_179121_F();
         }

         GlStateManager.func_179132_a(true);
         GlStateManager.func_179098_w();
         GlStateManager.func_179141_d();
      }
   }

   public void func_174976_a(float p_174976_1_, int p_174976_2_) {
      if(Reflector.ForgeWorldProvider_getSkyRenderer.exists()) {
         WorldProvider worldprovider = this.field_72777_q.world.dimension;
         Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getSkyRenderer, new Object[0]);
         if(object != null) {
            Reflector.callVoid(object, Reflector.IRenderHandler_render, new Object[]{Float.valueOf(p_174976_1_), this.field_72769_h, this.field_72777_q});
            return;
         }
      }

      if(this.field_72777_q.world.dimension.func_177502_q() == 1) {
         this.func_180448_r();
      } else if(this.field_72777_q.world.dimension.isSurfaceWorld()) {
         GlStateManager.func_179090_x();
         boolean flag1 = Config.isShaders();
         if(flag1) {
            Shaders.disableTexture2D();
         }

         Vec3 vec3 = this.field_72769_h.func_72833_a(this.field_72777_q.getRenderViewEntity(), p_174976_1_);
         vec3 = CustomColors.getSkyColor(vec3, this.field_72777_q.world, this.field_72777_q.getRenderViewEntity().posX, this.field_72777_q.getRenderViewEntity().posY + 1.0D, this.field_72777_q.getRenderViewEntity().posZ);
         if(flag1) {
            Shaders.setSkyColor(vec3);
         }

         float f = (float)vec3.x;
         float f1 = (float)vec3.y;
         float f2 = (float)vec3.z;
         if(p_174976_2_ != 2) {
            float f3 = (f * 30.0F + f1 * 59.0F + f2 * 11.0F) / 100.0F;
            float f4 = (f * 30.0F + f1 * 70.0F) / 100.0F;
            float f5 = (f * 30.0F + f2 * 70.0F) / 100.0F;
            f = f3;
            f1 = f4;
            f2 = f5;
         }

         GlStateManager.func_179124_c(f, f1, f2);
         Tessellator tessellator = Tessellator.getInstance();
         WorldRenderer worldrenderer = tessellator.getBuffer();
         GlStateManager.func_179132_a(false);
         GlStateManager.func_179127_m();
         if(flag1) {
            Shaders.enableFog();
         }

         GlStateManager.func_179124_c(f, f1, f2);
         if(flag1) {
            Shaders.preSkyList();
         }

         if(Config.isSkyEnabled()) {
            if(this.field_175005_X) {
               this.skyVBO.bindBuffer();
               GL11.glEnableClientState('\u8074');
               GL11.glVertexPointer(3, 5126, 12, 0L);
               this.skyVBO.func_177358_a(7);
               this.skyVBO.unbindBuffer();
               GL11.glDisableClientState('\u8074');
            } else {
               GlStateManager.func_179148_o(this.field_72771_w);
            }
         }

         GlStateManager.func_179106_n();
         if(flag1) {
            Shaders.disableFog();
         }

         GlStateManager.func_179118_c();
         GlStateManager.func_179147_l();
         GlStateManager.func_179120_a(770, 771, 1, 0);
         RenderHelper.disableStandardItemLighting();
         float[] afloat = this.field_72769_h.dimension.calcSunriseSunsetColors(this.field_72769_h.getCelestialAngle(p_174976_1_), p_174976_1_);
         if(afloat != null && Config.isSunMoonEnabled()) {
            GlStateManager.func_179090_x();
            if(flag1) {
               Shaders.disableTexture2D();
            }

            GlStateManager.func_179103_j(7425);
            GlStateManager.func_179094_E();
            GlStateManager.func_179114_b(90.0F, 1.0F, 0.0F, 0.0F);
            GlStateManager.func_179114_b(MathHelper.sin(this.field_72769_h.getCelestialAngleRadians(p_174976_1_)) < 0.0F?180.0F:0.0F, 0.0F, 0.0F, 1.0F);
            GlStateManager.func_179114_b(90.0F, 0.0F, 0.0F, 1.0F);
            float f6 = afloat[0];
            float f7 = afloat[1];
            float f8 = afloat[2];
            if(p_174976_2_ != 2) {
               float f9 = (f6 * 30.0F + f7 * 59.0F + f8 * 11.0F) / 100.0F;
               float f10 = (f6 * 30.0F + f7 * 70.0F) / 100.0F;
               float f11 = (f6 * 30.0F + f8 * 70.0F) / 100.0F;
               f6 = f9;
               f7 = f10;
               f8 = f11;
            }

            worldrenderer.begin(6, DefaultVertexFormats.POSITION_COLOR);
            worldrenderer.func_181662_b(0.0D, 100.0D, 0.0D).func_181666_a(f6, f7, f8, afloat[3]).endVertex();
            boolean flag = true;

            for(int i = 0; i <= 16; ++i) {
               float f20 = (float)i * 3.1415927F * 2.0F / 16.0F;
               float f12 = MathHelper.sin(f20);
               float f13 = MathHelper.cos(f20);
               worldrenderer.func_181662_b((double)(f12 * 120.0F), (double)(f13 * 120.0F), (double)(-f13 * 40.0F * afloat[3])).func_181666_a(afloat[0], afloat[1], afloat[2], 0.0F).endVertex();
            }

            tessellator.draw();
            GlStateManager.func_179121_F();
            GlStateManager.func_179103_j(7424);
         }

         GlStateManager.func_179098_w();
         if(flag1) {
            Shaders.enableTexture2D();
         }

         GlStateManager.func_179120_a(770, 1, 1, 0);
         GlStateManager.func_179094_E();
         float f15 = 1.0F - this.field_72769_h.getRainStrength(p_174976_1_);
         GlStateManager.func_179131_c(1.0F, 1.0F, 1.0F, f15);
         GlStateManager.func_179114_b(-90.0F, 0.0F, 1.0F, 0.0F);
         CustomSky.renderSky(this.field_72769_h, this.textureManager, this.field_72769_h.getCelestialAngle(p_174976_1_), f15);
         if(flag1) {
            Shaders.preCelestialRotate();
         }

         GlStateManager.func_179114_b(this.field_72769_h.getCelestialAngle(p_174976_1_) * 360.0F, 1.0F, 0.0F, 0.0F);
         if(flag1) {
            Shaders.postCelestialRotate();
         }

         float f16 = 30.0F;
         if(Config.isSunTexture()) {
            this.textureManager.bindTexture(SUN_TEXTURES);
            worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
            worldrenderer.func_181662_b((double)(-f16), 100.0D, (double)(-f16)).func_181673_a(0.0D, 0.0D).endVertex();
            worldrenderer.func_181662_b((double)f16, 100.0D, (double)(-f16)).func_181673_a(1.0D, 0.0D).endVertex();
            worldrenderer.func_181662_b((double)f16, 100.0D, (double)f16).func_181673_a(1.0D, 1.0D).endVertex();
            worldrenderer.func_181662_b((double)(-f16), 100.0D, (double)f16).func_181673_a(0.0D, 1.0D).endVertex();
            tessellator.draw();
         }

         f16 = 20.0F;
         if(Config.isMoonTexture()) {
            this.textureManager.bindTexture(MOON_PHASES_TEXTURES);
            int l = this.field_72769_h.getMoonPhase();
            int j = l % 4;
            int k = l / 4 % 2;
            float f21 = (float)(j + 0) / 4.0F;
            float f22 = (float)(k + 0) / 2.0F;
            float f23 = (float)(j + 1) / 4.0F;
            float f14 = (float)(k + 1) / 2.0F;
            worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
            worldrenderer.func_181662_b((double)(-f16), -100.0D, (double)f16).func_181673_a((double)f23, (double)f14).endVertex();
            worldrenderer.func_181662_b((double)f16, -100.0D, (double)f16).func_181673_a((double)f21, (double)f14).endVertex();
            worldrenderer.func_181662_b((double)f16, -100.0D, (double)(-f16)).func_181673_a((double)f21, (double)f22).endVertex();
            worldrenderer.func_181662_b((double)(-f16), -100.0D, (double)(-f16)).func_181673_a((double)f23, (double)f22).endVertex();
            tessellator.draw();
         }

         GlStateManager.func_179090_x();
         if(flag1) {
            Shaders.disableTexture2D();
         }

         float f24 = this.field_72769_h.func_72880_h(p_174976_1_) * f15;
         if(f24 > 0.0F && Config.isStarsEnabled() && !CustomSky.hasSkyLayers(this.field_72769_h)) {
            GlStateManager.func_179131_c(f24, f24, f24, f24);
            if(this.field_175005_X) {
               this.starVBO.bindBuffer();
               GL11.glEnableClientState('\u8074');
               GL11.glVertexPointer(3, 5126, 12, 0L);
               this.starVBO.func_177358_a(7);
               this.starVBO.unbindBuffer();
               GL11.glDisableClientState('\u8074');
            } else {
               GlStateManager.func_179148_o(this.field_72772_v);
            }
         }

         GlStateManager.func_179131_c(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.func_179084_k();
         GlStateManager.func_179141_d();
         GlStateManager.func_179127_m();
         if(flag1) {
            Shaders.enableFog();
         }

         GlStateManager.func_179121_F();
         GlStateManager.func_179090_x();
         if(flag1) {
            Shaders.disableTexture2D();
         }

         GlStateManager.func_179124_c(0.0F, 0.0F, 0.0F);
         double d0 = this.field_72777_q.player.getEyePosition(p_174976_1_).y - this.field_72769_h.func_72919_O();
         if(d0 < 0.0D) {
            GlStateManager.func_179094_E();
            GlStateManager.func_179109_b(0.0F, 12.0F, 0.0F);
            if(this.field_175005_X) {
               this.sky2VBO.bindBuffer();
               GL11.glEnableClientState('\u8074');
               GL11.glVertexPointer(3, 5126, 12, 0L);
               this.sky2VBO.func_177358_a(7);
               this.sky2VBO.unbindBuffer();
               GL11.glDisableClientState('\u8074');
            } else {
               GlStateManager.func_179148_o(this.field_72781_x);
            }

            GlStateManager.func_179121_F();
            float f17 = 1.0F;
            float f18 = -((float)(d0 + 65.0D));
            float f19 = -1.0F;
            worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
            worldrenderer.func_181662_b(-1.0D, (double)f18, 1.0D).func_181669_b(0, 0, 0, 255).endVertex();
            worldrenderer.func_181662_b(1.0D, (double)f18, 1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(1.0D, -1.0D, 1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(-1.0D, -1.0D, 1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(-1.0D, -1.0D, -1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(1.0D, -1.0D, -1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(1.0D, (double)f18, -1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(-1.0D, (double)f18, -1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(1.0D, -1.0D, -1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(1.0D, -1.0D, 1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(1.0D, (double)f18, 1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(1.0D, (double)f18, -1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(-1.0D, (double)f18, -1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(-1.0D, (double)f18, 1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(-1.0D, -1.0D, 1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(-1.0D, -1.0D, -1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(-1.0D, -1.0D, -1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(-1.0D, -1.0D, 1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(1.0D, -1.0D, 1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            worldrenderer.func_181662_b(1.0D, -1.0D, -1.0D).func_181669_b(0, 0, 0, 255).func_181675_d();
            tessellator.draw();
         }

         if(this.field_72769_h.dimension.isSkyColored()) {
            GlStateManager.func_179124_c(f * 0.2F + 0.04F, f1 * 0.2F + 0.04F, f2 * 0.6F + 0.1F);
         } else {
            GlStateManager.func_179124_c(f, f1, f2);
         }

         if(this.field_72777_q.gameSettings.renderDistanceChunks <= 4) {
            GlStateManager.func_179124_c(this.field_72777_q.gameRenderer.field_175080_Q, this.field_72777_q.gameRenderer.field_175082_R, this.field_72777_q.gameRenderer.field_175081_S);
         }

         GlStateManager.func_179094_E();
         GlStateManager.func_179109_b(0.0F, -((float)(d0 - 16.0D)), 0.0F);
         if(Config.isSkyEnabled()) {
            GlStateManager.func_179148_o(this.field_72781_x);
         }

         GlStateManager.func_179121_F();
         GlStateManager.func_179098_w();
         if(flag1) {
            Shaders.enableTexture2D();
         }

         GlStateManager.func_179132_a(true);
      }

   }

   public void func_180447_b(float p_180447_1_, int p_180447_2_) {
      if(!Config.isCloudsOff()) {
         if(Reflector.ForgeWorldProvider_getCloudRenderer.exists()) {
            WorldProvider worldprovider = this.field_72777_q.world.dimension;
            Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getCloudRenderer, new Object[0]);
            if(object != null) {
               Reflector.callVoid(object, Reflector.IRenderHandler_render, new Object[]{Float.valueOf(p_180447_1_), this.field_72769_h, this.field_72777_q});
               return;
            }
         }

         if(this.field_72777_q.world.dimension.isSurfaceWorld()) {
            if(Config.isShaders()) {
               Shaders.beginClouds();
            }

            if(Config.isCloudsFancy()) {
               this.func_180445_c(p_180447_1_, p_180447_2_);
            } else {
               this.cloudRenderer.prepareToRender(false, this.ticks, p_180447_1_);
               p_180447_1_ = 0.0F;
               GlStateManager.func_179129_p();
               float f9 = (float)(this.field_72777_q.getRenderViewEntity().lastTickPosY + (this.field_72777_q.getRenderViewEntity().posY - this.field_72777_q.getRenderViewEntity().lastTickPosY) * (double)p_180447_1_);
               boolean flag = true;
               boolean flag1 = true;
               Tessellator tessellator = Tessellator.getInstance();
               WorldRenderer worldrenderer = tessellator.getBuffer();
               this.textureManager.bindTexture(CLOUDS_TEXTURES);
               GlStateManager.func_179147_l();
               GlStateManager.func_179120_a(770, 771, 1, 0);
               if(this.cloudRenderer.shouldUpdateGlList()) {
                  this.cloudRenderer.startUpdateGlList();
                  Vec3 vec3 = this.field_72769_h.func_72824_f(p_180447_1_);
                  float f = (float)vec3.x;
                  float f1 = (float)vec3.y;
                  float f2 = (float)vec3.z;
                  if(p_180447_2_ != 2) {
                     float f3 = (f * 30.0F + f1 * 59.0F + f2 * 11.0F) / 100.0F;
                     float f4 = (f * 30.0F + f1 * 70.0F) / 100.0F;
                     float f5 = (f * 30.0F + f2 * 70.0F) / 100.0F;
                     f = f3;
                     f1 = f4;
                     f2 = f5;
                  }

                  float f10 = 4.8828125E-4F;
                  double d2 = (double)((float)this.ticks + p_180447_1_);
                  double d0 = this.field_72777_q.getRenderViewEntity().prevPosX + (this.field_72777_q.getRenderViewEntity().posX - this.field_72777_q.getRenderViewEntity().prevPosX) * (double)p_180447_1_ + d2 * 0.029999999329447746D;
                  double d1 = this.field_72777_q.func_175606_aa().prevPosZ + (this.field_72777_q.func_175606_aa().posZ - this.field_72777_q.func_175606_aa().prevPosZ) * (double)p_180447_1_;
                  int i = MathHelper.floor(d0 / 2048.0D);
                  int j = MathHelper.floor(d1 / 2048.0D);
                  d0 = d0 - (double)(i * 2048);
                  d1 = d1 - (double)(j * 2048);
                  float f6 = this.field_72769_h.dimension.getCloudHeight() - f9 + 0.33F;
                  f6 = f6 + this.field_72777_q.gameSettings.ofCloudsHeight * 128.0F;
                  float f7 = (float)(d0 * 4.8828125E-4D);
                  float f8 = (float)(d1 * 4.8828125E-4D);
                  worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);

                  for(int k = -256; k < 256; k += 32) {
                     for(int l = -256; l < 256; l += 32) {
                        worldrenderer.func_181662_b((double)(k + 0), (double)f6, (double)(l + 32)).func_181673_a((double)((float)(k + 0) * 4.8828125E-4F + f7), (double)((float)(l + 32) * 4.8828125E-4F + f8)).func_181666_a(f, f1, f2, 0.8F).func_181675_d();
                        worldrenderer.func_181662_b((double)(k + 32), (double)f6, (double)(l + 32)).func_181673_a((double)((float)(k + 32) * 4.8828125E-4F + f7), (double)((float)(l + 32) * 4.8828125E-4F + f8)).func_181666_a(f, f1, f2, 0.8F).func_181675_d();
                        worldrenderer.func_181662_b((double)(k + 32), (double)f6, (double)(l + 0)).func_181673_a((double)((float)(k + 32) * 4.8828125E-4F + f7), (double)((float)(l + 0) * 4.8828125E-4F + f8)).func_181666_a(f, f1, f2, 0.8F).func_181675_d();
                        worldrenderer.func_181662_b((double)(k + 0), (double)f6, (double)(l + 0)).func_181673_a((double)((float)(k + 0) * 4.8828125E-4F + f7), (double)((float)(l + 0) * 4.8828125E-4F + f8)).func_181666_a(f, f1, f2, 0.8F).func_181675_d();
                     }
                  }

                  tessellator.draw();
                  this.cloudRenderer.endUpdateGlList();
               }

               this.cloudRenderer.renderGlList();
               GlStateManager.func_179131_c(1.0F, 1.0F, 1.0F, 1.0F);
               GlStateManager.func_179084_k();
               GlStateManager.func_179089_o();
            }

            if(Config.isShaders()) {
               Shaders.endClouds();
            }
         }

      }
   }

   public boolean func_72721_a(double p_72721_1_, double p_72721_3_, double p_72721_5_, float p_72721_7_) {
      return false;
   }

   private void func_180445_c(float p_180445_1_, int p_180445_2_) {
      this.cloudRenderer.prepareToRender(true, this.ticks, p_180445_1_);
      p_180445_1_ = 0.0F;
      GlStateManager.func_179129_p();
      float f = (float)(this.field_72777_q.func_175606_aa().lastTickPosY + (this.field_72777_q.func_175606_aa().posY - this.field_72777_q.func_175606_aa().lastTickPosY) * (double)p_180445_1_);
      Tessellator tessellator = Tessellator.getInstance();
      WorldRenderer worldrenderer = tessellator.getBuffer();
      float f1 = 12.0F;
      float f2 = 4.0F;
      double d0 = (double)((float)this.ticks + p_180445_1_);
      double d1 = (this.field_72777_q.func_175606_aa().prevPosX + (this.field_72777_q.func_175606_aa().posX - this.field_72777_q.func_175606_aa().prevPosX) * (double)p_180445_1_ + d0 * 0.029999999329447746D) / 12.0D;
      double d2 = (this.field_72777_q.func_175606_aa().prevPosZ + (this.field_72777_q.func_175606_aa().posZ - this.field_72777_q.func_175606_aa().prevPosZ) * (double)p_180445_1_) / 12.0D + 0.33000001311302185D;
      float f3 = this.field_72769_h.dimension.getCloudHeight() - f + 0.33F;
      f3 = f3 + this.field_72777_q.gameSettings.ofCloudsHeight * 128.0F;
      int i = MathHelper.floor(d1 / 2048.0D);
      int j = MathHelper.floor(d2 / 2048.0D);
      d1 = d1 - (double)(i * 2048);
      d2 = d2 - (double)(j * 2048);
      this.textureManager.bindTexture(CLOUDS_TEXTURES);
      GlStateManager.func_179147_l();
      GlStateManager.func_179120_a(770, 771, 1, 0);
      Vec3 vec3 = this.field_72769_h.func_72824_f(p_180445_1_);
      float f4 = (float)vec3.x;
      float f5 = (float)vec3.y;
      float f6 = (float)vec3.z;
      if(p_180445_2_ != 2) {
         float f7 = (f4 * 30.0F + f5 * 59.0F + f6 * 11.0F) / 100.0F;
         float f8 = (f4 * 30.0F + f5 * 70.0F) / 100.0F;
         float f9 = (f4 * 30.0F + f6 * 70.0F) / 100.0F;
         f4 = f7;
         f5 = f8;
         f6 = f9;
      }

      float f26 = f4 * 0.9F;
      float f27 = f5 * 0.9F;
      float f28 = f6 * 0.9F;
      float f10 = f4 * 0.7F;
      float f11 = f5 * 0.7F;
      float f12 = f6 * 0.7F;
      float f13 = f4 * 0.8F;
      float f14 = f5 * 0.8F;
      float f15 = f6 * 0.8F;
      float f16 = 0.00390625F;
      float f17 = (float)MathHelper.floor(d1) * 0.00390625F;
      float f18 = (float)MathHelper.floor(d2) * 0.00390625F;
      float f19 = (float)(d1 - (double)MathHelper.floor(d1));
      float f20 = (float)(d2 - (double)MathHelper.floor(d2));
      boolean flag = true;
      boolean flag1 = true;
      float f21 = 9.765625E-4F;
      GlStateManager.func_179152_a(12.0F, 1.0F, 12.0F);

      for(int k = 0; k < 2; ++k) {
         if(k == 0) {
            GlStateManager.func_179135_a(false, false, false, false);
         } else {
            switch(p_180445_2_) {
            case 0:
               GlStateManager.func_179135_a(false, true, true, true);
               break;
            case 1:
               GlStateManager.func_179135_a(true, false, false, true);
               break;
            case 2:
               GlStateManager.func_179135_a(true, true, true, true);
            }
         }

         this.cloudRenderer.renderGlList();
      }

      if(this.cloudRenderer.shouldUpdateGlList()) {
         this.cloudRenderer.startUpdateGlList();

         for(int j1 = -3; j1 <= 4; ++j1) {
            for(int l = -3; l <= 4; ++l) {
               worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
               float f22 = (float)(j1 * 8);
               float f23 = (float)(l * 8);
               float f24 = f22 - f19;
               float f25 = f23 - f20;
               if(f3 > -5.0F) {
                  worldrenderer.func_181662_b((double)(f24 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + 8.0F)).func_181673_a((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).func_181666_a(f10, f11, f12, 0.8F).func_181663_c(0.0F, -1.0F, 0.0F).func_181675_d();
                  worldrenderer.func_181662_b((double)(f24 + 8.0F), (double)(f3 + 0.0F), (double)(f25 + 8.0F)).func_181673_a((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).func_181666_a(f10, f11, f12, 0.8F).func_181663_c(0.0F, -1.0F, 0.0F).func_181675_d();
                  worldrenderer.func_181662_b((double)(f24 + 8.0F), (double)(f3 + 0.0F), (double)(f25 + 0.0F)).func_181673_a((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).func_181666_a(f10, f11, f12, 0.8F).func_181663_c(0.0F, -1.0F, 0.0F).func_181675_d();
                  worldrenderer.func_181662_b((double)(f24 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + 0.0F)).func_181673_a((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).func_181666_a(f10, f11, f12, 0.8F).func_181663_c(0.0F, -1.0F, 0.0F).func_181675_d();
               }

               if(f3 <= 5.0F) {
                  worldrenderer.func_181662_b((double)(f24 + 0.0F), (double)(f3 + 4.0F - 9.765625E-4F), (double)(f25 + 8.0F)).func_181673_a((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).func_181666_a(f4, f5, f6, 0.8F).func_181663_c(0.0F, 1.0F, 0.0F).func_181675_d();
                  worldrenderer.func_181662_b((double)(f24 + 8.0F), (double)(f3 + 4.0F - 9.765625E-4F), (double)(f25 + 8.0F)).func_181673_a((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).func_181666_a(f4, f5, f6, 0.8F).func_181663_c(0.0F, 1.0F, 0.0F).func_181675_d();
                  worldrenderer.func_181662_b((double)(f24 + 8.0F), (double)(f3 + 4.0F - 9.765625E-4F), (double)(f25 + 0.0F)).func_181673_a((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).func_181666_a(f4, f5, f6, 0.8F).func_181663_c(0.0F, 1.0F, 0.0F).func_181675_d();
                  worldrenderer.func_181662_b((double)(f24 + 0.0F), (double)(f3 + 4.0F - 9.765625E-4F), (double)(f25 + 0.0F)).func_181673_a((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).func_181666_a(f4, f5, f6, 0.8F).func_181663_c(0.0F, 1.0F, 0.0F).func_181675_d();
               }

               if(j1 > -1) {
                  for(int i1 = 0; i1 < 8; ++i1) {
                     worldrenderer.func_181662_b((double)(f24 + (float)i1 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + 8.0F)).func_181673_a((double)((f22 + (float)i1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).func_181666_a(f26, f27, f28, 0.8F).func_181663_c(-1.0F, 0.0F, 0.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + (float)i1 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + 8.0F)).func_181673_a((double)((f22 + (float)i1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).func_181666_a(f26, f27, f28, 0.8F).func_181663_c(-1.0F, 0.0F, 0.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + (float)i1 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + 0.0F)).func_181673_a((double)((f22 + (float)i1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).func_181666_a(f26, f27, f28, 0.8F).func_181663_c(-1.0F, 0.0F, 0.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + (float)i1 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + 0.0F)).func_181673_a((double)((f22 + (float)i1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).func_181666_a(f26, f27, f28, 0.8F).func_181663_c(-1.0F, 0.0F, 0.0F).func_181675_d();
                  }
               }

               if(j1 <= 1) {
                  for(int k1 = 0; k1 < 8; ++k1) {
                     worldrenderer.func_181662_b((double)(f24 + (float)k1 + 1.0F - 9.765625E-4F), (double)(f3 + 0.0F), (double)(f25 + 8.0F)).func_181673_a((double)((f22 + (float)k1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).func_181666_a(f26, f27, f28, 0.8F).func_181663_c(1.0F, 0.0F, 0.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + (float)k1 + 1.0F - 9.765625E-4F), (double)(f3 + 4.0F), (double)(f25 + 8.0F)).func_181673_a((double)((f22 + (float)k1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).func_181666_a(f26, f27, f28, 0.8F).func_181663_c(1.0F, 0.0F, 0.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + (float)k1 + 1.0F - 9.765625E-4F), (double)(f3 + 4.0F), (double)(f25 + 0.0F)).func_181673_a((double)((f22 + (float)k1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).func_181666_a(f26, f27, f28, 0.8F).func_181663_c(1.0F, 0.0F, 0.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + (float)k1 + 1.0F - 9.765625E-4F), (double)(f3 + 0.0F), (double)(f25 + 0.0F)).func_181673_a((double)((f22 + (float)k1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).func_181666_a(f26, f27, f28, 0.8F).func_181663_c(1.0F, 0.0F, 0.0F).func_181675_d();
                  }
               }

               if(l > -1) {
                  for(int l1 = 0; l1 < 8; ++l1) {
                     worldrenderer.func_181662_b((double)(f24 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + (float)l1 + 0.0F)).func_181673_a((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)l1 + 0.5F) * 0.00390625F + f18)).func_181666_a(f13, f14, f15, 0.8F).func_181663_c(0.0F, 0.0F, -1.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + 8.0F), (double)(f3 + 4.0F), (double)(f25 + (float)l1 + 0.0F)).func_181673_a((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)l1 + 0.5F) * 0.00390625F + f18)).func_181666_a(f13, f14, f15, 0.8F).func_181663_c(0.0F, 0.0F, -1.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + 8.0F), (double)(f3 + 0.0F), (double)(f25 + (float)l1 + 0.0F)).func_181673_a((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)l1 + 0.5F) * 0.00390625F + f18)).func_181666_a(f13, f14, f15, 0.8F).func_181663_c(0.0F, 0.0F, -1.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + (float)l1 + 0.0F)).func_181673_a((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)l1 + 0.5F) * 0.00390625F + f18)).func_181666_a(f13, f14, f15, 0.8F).func_181663_c(0.0F, 0.0F, -1.0F).func_181675_d();
                  }
               }

               if(l <= 1) {
                  for(int i2 = 0; i2 < 8; ++i2) {
                     worldrenderer.func_181662_b((double)(f24 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + (float)i2 + 1.0F - 9.765625E-4F)).func_181673_a((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)i2 + 0.5F) * 0.00390625F + f18)).func_181666_a(f13, f14, f15, 0.8F).func_181663_c(0.0F, 0.0F, 1.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + 8.0F), (double)(f3 + 4.0F), (double)(f25 + (float)i2 + 1.0F - 9.765625E-4F)).func_181673_a((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)i2 + 0.5F) * 0.00390625F + f18)).func_181666_a(f13, f14, f15, 0.8F).func_181663_c(0.0F, 0.0F, 1.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + 8.0F), (double)(f3 + 0.0F), (double)(f25 + (float)i2 + 1.0F - 9.765625E-4F)).func_181673_a((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)i2 + 0.5F) * 0.00390625F + f18)).func_181666_a(f13, f14, f15, 0.8F).func_181663_c(0.0F, 0.0F, 1.0F).func_181675_d();
                     worldrenderer.func_181662_b((double)(f24 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + (float)i2 + 1.0F - 9.765625E-4F)).func_181673_a((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)i2 + 0.5F) * 0.00390625F + f18)).func_181666_a(f13, f14, f15, 0.8F).func_181663_c(0.0F, 0.0F, 1.0F).func_181675_d();
                  }
               }

               tessellator.draw();
            }
         }

         this.cloudRenderer.endUpdateGlList();
      }

      GlStateManager.func_179131_c(1.0F, 1.0F, 1.0F, 1.0F);
      GlStateManager.func_179084_k();
      GlStateManager.func_179089_o();
   }

   public void updateChunks(long finishTimeNano) {
      finishTimeNano = (long)((double)finishTimeNano + 1.0E8D);
      this.displayListEntitiesDirty |= this.renderDispatcher.func_178516_a(finishTimeNano);
      if(this.chunksToUpdateForced.size() > 0) {
         Iterator iterator = this.chunksToUpdateForced.iterator();

         while(iterator.hasNext()) {
            RenderChunk renderchunk = (RenderChunk)iterator.next();
            if(!this.renderDispatcher.func_178507_a(renderchunk)) {
               break;
            }

            renderchunk.setNeedsUpdate(false);
            iterator.remove();
            this.chunksToUpdate.remove(renderchunk);
            this.chunksToResortTransparency.remove(renderchunk);
         }
      }

      if(this.chunksToResortTransparency.size() > 0) {
         Iterator iterator2 = this.chunksToResortTransparency.iterator();
         if(iterator2.hasNext()) {
            RenderChunk renderchunk2 = (RenderChunk)iterator2.next();
            if(this.renderDispatcher.func_178509_c(renderchunk2)) {
               iterator2.remove();
            }
         }
      }

      int j = 0;
      int k = Config.getUpdatesPerFrame();
      int i = k * 2;
      Iterator iterator1 = this.chunksToUpdate.iterator();

      while(iterator1.hasNext()) {
         RenderChunk renderchunk1 = (RenderChunk)iterator1.next();
         if(!this.renderDispatcher.func_178507_a(renderchunk1)) {
            break;
         }

         renderchunk1.setNeedsUpdate(false);
         iterator1.remove();
         if(renderchunk1.getCompiledChunk().isEmpty() && k < i) {
            ++k;
         }

         ++j;
         if(j >= k) {
            break;
         }
      }

   }

   public void func_180449_a(Entity p_180449_1_, float p_180449_2_) {
      Tessellator tessellator = Tessellator.getInstance();
      WorldRenderer worldrenderer = tessellator.getBuffer();
      WorldBorder worldborder = this.field_72769_h.getWorldBorder();
      double d0 = (double)(this.field_72777_q.gameSettings.renderDistanceChunks * 16);
      if(p_180449_1_.posX >= worldborder.maxX() - d0 || p_180449_1_.posX <= worldborder.minX() + d0 || p_180449_1_.posZ >= worldborder.maxZ() - d0 || p_180449_1_.posZ <= worldborder.minZ() + d0) {
         double d1 = 1.0D - worldborder.getClosestDistance(p_180449_1_) / d0;
         d1 = Math.pow(d1, 4.0D);
         double d2 = p_180449_1_.lastTickPosX + (p_180449_1_.posX - p_180449_1_.lastTickPosX) * (double)p_180449_2_;
         double d3 = p_180449_1_.lastTickPosY + (p_180449_1_.posY - p_180449_1_.lastTickPosY) * (double)p_180449_2_;
         double d4 = p_180449_1_.lastTickPosZ + (p_180449_1_.posZ - p_180449_1_.lastTickPosZ) * (double)p_180449_2_;
         GlStateManager.func_179147_l();
         GlStateManager.func_179120_a(770, 1, 1, 0);
         this.textureManager.bindTexture(FORCEFIELD_TEXTURES);
         GlStateManager.func_179132_a(false);
         GlStateManager.func_179094_E();
         int i = worldborder.getStatus().getColor();
         float f = (float)(i >> 16 & 255) / 255.0F;
         float f1 = (float)(i >> 8 & 255) / 255.0F;
         float f2 = (float)(i & 255) / 255.0F;
         GlStateManager.func_179131_c(f, f1, f2, (float)d1);
         GlStateManager.func_179136_a(-3.0F, -3.0F);
         GlStateManager.func_179088_q();
         GlStateManager.func_179092_a(516, 0.1F);
         GlStateManager.func_179141_d();
         GlStateManager.func_179129_p();
         float f3 = (float)(Minecraft.func_71386_F() % 3000L) / 3000.0F;
         float f4 = 0.0F;
         float f5 = 0.0F;
         float f6 = 128.0F;
         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
         worldrenderer.func_178969_c(-d2, -d3, -d4);
         double d5 = Math.max((double)MathHelper.floor(d4 - d0), worldborder.minZ());
         double d6 = Math.min((double)MathHelper.ceil(d4 + d0), worldborder.maxZ());
         if(d2 > worldborder.maxX() - d0) {
            float f7 = 0.0F;

            for(double d7 = d5; d7 < d6; f7 += 0.5F) {
               double d8 = Math.min(1.0D, d6 - d7);
               float f8 = (float)d8 * 0.5F;
               worldrenderer.func_181662_b(worldborder.maxX(), 256.0D, d7).func_181673_a((double)(f3 + f7), (double)(f3 + 0.0F)).func_181675_d();
               worldrenderer.func_181662_b(worldborder.maxX(), 256.0D, d7 + d8).func_181673_a((double)(f3 + f8 + f7), (double)(f3 + 0.0F)).func_181675_d();
               worldrenderer.func_181662_b(worldborder.maxX(), 0.0D, d7 + d8).func_181673_a((double)(f3 + f8 + f7), (double)(f3 + 128.0F)).func_181675_d();
               worldrenderer.func_181662_b(worldborder.maxX(), 0.0D, d7).func_181673_a((double)(f3 + f7), (double)(f3 + 128.0F)).func_181675_d();
               ++d7;
            }
         }

         if(d2 < worldborder.minX() + d0) {
            float f9 = 0.0F;

            for(double d9 = d5; d9 < d6; f9 += 0.5F) {
               double d12 = Math.min(1.0D, d6 - d9);
               float f12 = (float)d12 * 0.5F;
               worldrenderer.func_181662_b(worldborder.minX(), 256.0D, d9).func_181673_a((double)(f3 + f9), (double)(f3 + 0.0F)).func_181675_d();
               worldrenderer.func_181662_b(worldborder.minX(), 256.0D, d9 + d12).func_181673_a((double)(f3 + f12 + f9), (double)(f3 + 0.0F)).func_181675_d();
               worldrenderer.func_181662_b(worldborder.minX(), 0.0D, d9 + d12).func_181673_a((double)(f3 + f12 + f9), (double)(f3 + 128.0F)).func_181675_d();
               worldrenderer.func_181662_b(worldborder.minX(), 0.0D, d9).func_181673_a((double)(f3 + f9), (double)(f3 + 128.0F)).func_181675_d();
               ++d9;
            }
         }

         d5 = Math.max((double)MathHelper.floor(d2 - d0), worldborder.minX());
         d6 = Math.min((double)MathHelper.ceil(d2 + d0), worldborder.maxX());
         if(d4 > worldborder.maxZ() - d0) {
            float f10 = 0.0F;

            for(double d10 = d5; d10 < d6; f10 += 0.5F) {
               double d13 = Math.min(1.0D, d6 - d10);
               float f13 = (float)d13 * 0.5F;
               worldrenderer.func_181662_b(d10, 256.0D, worldborder.maxZ()).func_181673_a((double)(f3 + f10), (double)(f3 + 0.0F)).func_181675_d();
               worldrenderer.func_181662_b(d10 + d13, 256.0D, worldborder.maxZ()).func_181673_a((double)(f3 + f13 + f10), (double)(f3 + 0.0F)).func_181675_d();
               worldrenderer.func_181662_b(d10 + d13, 0.0D, worldborder.maxZ()).func_181673_a((double)(f3 + f13 + f10), (double)(f3 + 128.0F)).func_181675_d();
               worldrenderer.func_181662_b(d10, 0.0D, worldborder.maxZ()).func_181673_a((double)(f3 + f10), (double)(f3 + 128.0F)).func_181675_d();
               ++d10;
            }
         }

         if(d4 < worldborder.minZ() + d0) {
            float f11 = 0.0F;

            for(double d11 = d5; d11 < d6; f11 += 0.5F) {
               double d14 = Math.min(1.0D, d6 - d11);
               float f14 = (float)d14 * 0.5F;
               worldrenderer.func_181662_b(d11, 256.0D, worldborder.minZ()).func_181673_a((double)(f3 + f11), (double)(f3 + 0.0F)).func_181675_d();
               worldrenderer.func_181662_b(d11 + d14, 256.0D, worldborder.minZ()).func_181673_a((double)(f3 + f14 + f11), (double)(f3 + 0.0F)).func_181675_d();
               worldrenderer.func_181662_b(d11 + d14, 0.0D, worldborder.minZ()).func_181673_a((double)(f3 + f14 + f11), (double)(f3 + 128.0F)).func_181675_d();
               worldrenderer.func_181662_b(d11, 0.0D, worldborder.minZ()).func_181673_a((double)(f3 + f11), (double)(f3 + 128.0F)).func_181675_d();
               ++d11;
            }
         }

         tessellator.draw();
         worldrenderer.func_178969_c(0.0D, 0.0D, 0.0D);
         GlStateManager.func_179089_o();
         GlStateManager.func_179118_c();
         GlStateManager.func_179136_a(0.0F, 0.0F);
         GlStateManager.func_179113_r();
         GlStateManager.func_179141_d();
         GlStateManager.func_179084_k();
         GlStateManager.func_179121_F();
         GlStateManager.func_179132_a(true);
      }

   }

   private void func_180443_s() {
      GlStateManager.func_179120_a(774, 768, 1, 0);
      GlStateManager.func_179147_l();
      GlStateManager.func_179131_c(1.0F, 1.0F, 1.0F, 0.5F);
      GlStateManager.func_179136_a(-3.0F, -3.0F);
      GlStateManager.func_179088_q();
      GlStateManager.func_179092_a(516, 0.1F);
      GlStateManager.func_179141_d();
      GlStateManager.func_179094_E();
      if(Config.isShaders()) {
         ShadersRender.beginBlockDamage();
      }

   }

   private void func_174969_t() {
      GlStateManager.func_179118_c();
      GlStateManager.func_179136_a(0.0F, 0.0F);
      GlStateManager.func_179113_r();
      GlStateManager.func_179141_d();
      GlStateManager.func_179132_a(true);
      GlStateManager.func_179121_F();
      if(Config.isShaders()) {
         ShadersRender.endBlockDamage();
      }

   }

   public void func_174981_a(Tessellator p_174981_1_, WorldRenderer p_174981_2_, Entity p_174981_3_, float p_174981_4_) {
      double d0 = p_174981_3_.lastTickPosX + (p_174981_3_.posX - p_174981_3_.lastTickPosX) * (double)p_174981_4_;
      double d1 = p_174981_3_.lastTickPosY + (p_174981_3_.posY - p_174981_3_.lastTickPosY) * (double)p_174981_4_;
      double d2 = p_174981_3_.lastTickPosZ + (p_174981_3_.posZ - p_174981_3_.lastTickPosZ) * (double)p_174981_4_;
      if(!this.damagedBlocks.isEmpty()) {
         this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
         this.func_180443_s();
         p_174981_2_.begin(7, DefaultVertexFormats.BLOCK);
         p_174981_2_.func_178969_c(-d0, -d1, -d2);
         p_174981_2_.func_78914_f();
         Iterator iterator = this.damagedBlocks.values().iterator();

         while(iterator.hasNext()) {
            DestroyBlockProgress destroyblockprogress = (DestroyBlockProgress)iterator.next();
            BlockPos blockpos = destroyblockprogress.getPosition();
            double d3 = (double)blockpos.getX() - d0;
            double d4 = (double)blockpos.getY() - d1;
            double d5 = (double)blockpos.getZ() - d2;
            Block block = this.field_72769_h.getBlockState(blockpos).getBlock();
            boolean flag;
            if(Reflector.ForgeTileEntity_canRenderBreaking.exists()) {
               boolean flag1 = block instanceof BlockChest || block instanceof BlockEnderChest || block instanceof BlockSign || block instanceof BlockSkull;
               if(!flag1) {
                  TileEntity tileentity = this.field_72769_h.getTileEntity(blockpos);
                  if(tileentity != null) {
                     flag1 = Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_canRenderBreaking, new Object[0]);
                  }
               }

               flag = !flag1;
            } else {
               flag = !(block instanceof BlockChest) && !(block instanceof BlockEnderChest) && !(block instanceof BlockSign) && !(block instanceof BlockSkull);
            }

            if(flag) {
               if(d3 * d3 + d4 * d4 + d5 * d5 > 1024.0D) {
                  iterator.remove();
               } else {
                  IBlockState iblockstate = this.field_72769_h.getBlockState(blockpos);
                  if(iblockstate.getBlock().getMaterial() != Material.AIR) {
                     int i = destroyblockprogress.getPartialBlockDamage();
                     TextureAtlasSprite textureatlassprite = this.field_94141_F[i];
                     BlockRendererDispatcher blockrendererdispatcher = this.field_72777_q.getBlockRendererDispatcher();
                     blockrendererdispatcher.func_175020_a(iblockstate, blockpos, textureatlassprite, this.field_72769_h);
                  }
               }
            }
         }

         p_174981_1_.draw();
         p_174981_2_.func_178969_c(0.0D, 0.0D, 0.0D);
         this.func_174969_t();
      }

   }

   public void func_72731_b(EntityPlayer p_72731_1_, MovingObjectPosition p_72731_2_, int p_72731_3_, float p_72731_4_) {
      if(p_72731_3_ == 0 && p_72731_2_.field_72313_a == MovingObjectPosition.MovingObjectType.BLOCK) {
         GlStateManager.func_179147_l();
         GlStateManager.func_179120_a(770, 771, 1, 0);
         GlStateManager.func_179131_c(0.0F, 0.0F, 0.0F, 0.4F);
         GL11.glLineWidth(2.0F);
         GlStateManager.func_179090_x();
         if(Config.isShaders()) {
            Shaders.disableTexture2D();
         }

         GlStateManager.func_179132_a(false);
         float f = 0.002F;
         BlockPos blockpos = p_72731_2_.func_178782_a();
         Block block = this.field_72769_h.getBlockState(blockpos).getBlock();
         if(block.getMaterial() != Material.AIR && this.field_72769_h.getWorldBorder().contains(blockpos)) {
            block.func_180654_a(this.field_72769_h, blockpos);
            double d0 = p_72731_1_.lastTickPosX + (p_72731_1_.posX - p_72731_1_.lastTickPosX) * (double)p_72731_4_;
            double d1 = p_72731_1_.lastTickPosY + (p_72731_1_.posY - p_72731_1_.lastTickPosY) * (double)p_72731_4_;
            double d2 = p_72731_1_.lastTickPosZ + (p_72731_1_.posZ - p_72731_1_.lastTickPosZ) * (double)p_72731_4_;
            func_181561_a(block.func_180646_a(this.field_72769_h, blockpos).grow(0.0020000000949949026D, 0.0020000000949949026D, 0.0020000000949949026D).offset(-d0, -d1, -d2));
         }

         GlStateManager.func_179132_a(true);
         GlStateManager.func_179098_w();
         if(Config.isShaders()) {
            Shaders.enableTexture2D();
         }

         GlStateManager.func_179084_k();
      }

   }

   public static void func_181561_a(AxisAlignedBB p_181561_0_) {
      Tessellator tessellator = Tessellator.getInstance();
      WorldRenderer worldrenderer = tessellator.getBuffer();
      worldrenderer.begin(3, DefaultVertexFormats.POSITION);
      worldrenderer.func_181662_b(p_181561_0_.minX, p_181561_0_.minY, p_181561_0_.minZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.maxX, p_181561_0_.minY, p_181561_0_.minZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.maxX, p_181561_0_.minY, p_181561_0_.maxZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.minX, p_181561_0_.minY, p_181561_0_.maxZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.minX, p_181561_0_.minY, p_181561_0_.minZ).func_181675_d();
      tessellator.draw();
      worldrenderer.begin(3, DefaultVertexFormats.POSITION);
      worldrenderer.func_181662_b(p_181561_0_.minX, p_181561_0_.maxY, p_181561_0_.minZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.maxX, p_181561_0_.maxY, p_181561_0_.minZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.maxX, p_181561_0_.maxY, p_181561_0_.maxZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.minX, p_181561_0_.maxY, p_181561_0_.maxZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.minX, p_181561_0_.maxY, p_181561_0_.minZ).func_181675_d();
      tessellator.draw();
      worldrenderer.begin(1, DefaultVertexFormats.POSITION);
      worldrenderer.func_181662_b(p_181561_0_.minX, p_181561_0_.minY, p_181561_0_.minZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.minX, p_181561_0_.maxY, p_181561_0_.minZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.maxX, p_181561_0_.minY, p_181561_0_.minZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.maxX, p_181561_0_.maxY, p_181561_0_.minZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.maxX, p_181561_0_.minY, p_181561_0_.maxZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.maxX, p_181561_0_.maxY, p_181561_0_.maxZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.minX, p_181561_0_.minY, p_181561_0_.maxZ).func_181675_d();
      worldrenderer.func_181662_b(p_181561_0_.minX, p_181561_0_.maxY, p_181561_0_.maxZ).func_181675_d();
      tessellator.draw();
   }

   public static void func_181563_a(AxisAlignedBB p_181563_0_, int p_181563_1_, int p_181563_2_, int p_181563_3_, int p_181563_4_) {
      Tessellator tessellator = Tessellator.getInstance();
      WorldRenderer worldrenderer = tessellator.getBuffer();
      worldrenderer.begin(3, DefaultVertexFormats.POSITION_COLOR);
      worldrenderer.func_181662_b(p_181563_0_.minX, p_181563_0_.minY, p_181563_0_.minZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.maxX, p_181563_0_.minY, p_181563_0_.minZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.maxX, p_181563_0_.minY, p_181563_0_.maxZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.minX, p_181563_0_.minY, p_181563_0_.maxZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.minX, p_181563_0_.minY, p_181563_0_.minZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      tessellator.draw();
      worldrenderer.begin(3, DefaultVertexFormats.POSITION_COLOR);
      worldrenderer.func_181662_b(p_181563_0_.minX, p_181563_0_.maxY, p_181563_0_.minZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.maxX, p_181563_0_.maxY, p_181563_0_.minZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.maxX, p_181563_0_.maxY, p_181563_0_.maxZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.minX, p_181563_0_.maxY, p_181563_0_.maxZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.minX, p_181563_0_.maxY, p_181563_0_.minZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      tessellator.draw();
      worldrenderer.begin(1, DefaultVertexFormats.POSITION_COLOR);
      worldrenderer.func_181662_b(p_181563_0_.minX, p_181563_0_.minY, p_181563_0_.minZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.minX, p_181563_0_.maxY, p_181563_0_.minZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.maxX, p_181563_0_.minY, p_181563_0_.minZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.maxX, p_181563_0_.maxY, p_181563_0_.minZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.maxX, p_181563_0_.minY, p_181563_0_.maxZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.maxX, p_181563_0_.maxY, p_181563_0_.maxZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.minX, p_181563_0_.minY, p_181563_0_.maxZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      worldrenderer.func_181662_b(p_181563_0_.minX, p_181563_0_.maxY, p_181563_0_.maxZ).func_181669_b(p_181563_1_, p_181563_2_, p_181563_3_, p_181563_4_).func_181675_d();
      tessellator.draw();
   }

   private void func_72725_b(int p_72725_1_, int p_72725_2_, int p_72725_3_, int p_72725_4_, int p_72725_5_, int p_72725_6_) {
      this.viewFrustum.func_178162_a(p_72725_1_, p_72725_2_, p_72725_3_, p_72725_4_, p_72725_5_, p_72725_6_);
   }

   public void func_174960_a(BlockPos p_174960_1_) {
      int i = p_174960_1_.getX();
      int j = p_174960_1_.getY();
      int k = p_174960_1_.getZ();
      this.func_72725_b(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1);
   }

   public void func_174959_b(BlockPos p_174959_1_) {
      int i = p_174959_1_.getX();
      int j = p_174959_1_.getY();
      int k = p_174959_1_.getZ();
      this.func_72725_b(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1);
   }

   public void markBlockRangeForRenderUpdate(int x1, int y1, int z1, int x2, int y2, int z2) {
      this.func_72725_b(x1 - 1, y1 - 1, z1 - 1, x2 + 1, y2 + 1, z2 + 1);
   }

   public void func_174961_a(String p_174961_1_, BlockPos p_174961_2_) {
      ISound isound = (ISound)this.mapSoundPositions.get(p_174961_2_);
      if(isound != null) {
         this.field_72777_q.getSoundHandler().stop(isound);
         this.mapSoundPositions.remove(p_174961_2_);
      }

      if(p_174961_1_ != null) {
         ItemRecord itemrecord = ItemRecord.func_150926_b(p_174961_1_);
         if(itemrecord != null) {
            this.field_72777_q.ingameGUI.setRecordPlayingMessage(itemrecord.func_150927_i());
         }

         ResourceLocation resourcelocation = null;
         if(Reflector.ForgeItemRecord_getRecordResource.exists() && itemrecord != null) {
            resourcelocation = (ResourceLocation)Reflector.call(itemrecord, Reflector.ForgeItemRecord_getRecordResource, new Object[]{p_174961_1_});
         }

         if(resourcelocation == null) {
            resourcelocation = new ResourceLocation(p_174961_1_);
         }

         PositionedSoundRecord positionedsoundrecord = PositionedSoundRecord.func_147675_a(resourcelocation, (float)p_174961_2_.getX(), (float)p_174961_2_.getY(), (float)p_174961_2_.getZ());
         this.mapSoundPositions.put(p_174961_2_, positionedsoundrecord);
         this.field_72777_q.getSoundHandler().play(positionedsoundrecord);
      }

   }

   public void func_72704_a(String p_72704_1_, double p_72704_2_, double p_72704_4_, double p_72704_6_, float p_72704_8_, float p_72704_9_) {
   }

   public void func_85102_a(EntityPlayer p_85102_1_, String p_85102_2_, double p_85102_3_, double p_85102_5_, double p_85102_7_, float p_85102_9_, float p_85102_10_) {
   }

   public void func_180442_a(int p_180442_1_, boolean p_180442_2_, final double p_180442_3_, final double p_180442_5_, final double p_180442_7_, double p_180442_9_, double p_180442_11_, double p_180442_13_, int... p_180442_15_) {
      try {
         this.func_174974_b(p_180442_1_, p_180442_2_, p_180442_3_, p_180442_5_, p_180442_7_, p_180442_9_, p_180442_11_, p_180442_13_, p_180442_15_);
      } catch (Throwable throwable) {
         CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception while adding particle");
         CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being added");
         crashreportcategory.addDetail("ID", Integer.valueOf(p_180442_1_));
         if(p_180442_15_ != null) {
            crashreportcategory.addDetail("Parameters", p_180442_15_);
         }

         crashreportcategory.func_71500_a("Position", new Callable() {
            private static final String __OBFID = "CL_00000955";

            public String call() throws Exception {
               return CrashReportCategory.getCoordinateInfo(p_180442_3_, p_180442_5_, p_180442_7_);
            }
         });
         throw new ReportedException(crashreport);
      }
   }

   private void func_174972_a(EnumParticleTypes p_174972_1_, double p_174972_2_, double p_174972_4_, double p_174972_6_, double p_174972_8_, double p_174972_10_, double p_174972_12_, int... p_174972_14_) {
      this.func_180442_a(p_174972_1_.func_179348_c(), p_174972_1_.func_179344_e(), p_174972_2_, p_174972_4_, p_174972_6_, p_174972_8_, p_174972_10_, p_174972_12_, p_174972_14_);
   }

   private EntityFX func_174974_b(int p_174974_1_, boolean p_174974_2_, double p_174974_3_, double p_174974_5_, double p_174974_7_, double p_174974_9_, double p_174974_11_, double p_174974_13_, int... p_174974_15_) {
      if(this.field_72777_q != null && this.field_72777_q.func_175606_aa() != null && this.field_72777_q.particles != null) {
         int i = this.field_72777_q.gameSettings.particles;
         if(i == 1 && this.field_72769_h.rand.nextInt(3) == 0) {
            i = 2;
         }

         double d0 = this.field_72777_q.func_175606_aa().posX - p_174974_3_;
         double d1 = this.field_72777_q.func_175606_aa().posY - p_174974_5_;
         double d2 = this.field_72777_q.func_175606_aa().posZ - p_174974_7_;
         if(p_174974_1_ == EnumParticleTypes.EXPLOSION_HUGE.func_179348_c() && !Config.isAnimatedExplosion()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.EXPLOSION_LARGE.func_179348_c() && !Config.isAnimatedExplosion()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.EXPLOSION_NORMAL.func_179348_c() && !Config.isAnimatedExplosion()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.SUSPENDED.func_179348_c() && !Config.isWaterParticles()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.SUSPENDED_DEPTH.func_179348_c() && !Config.isVoidParticles()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.SMOKE_NORMAL.func_179348_c() && !Config.isAnimatedSmoke()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.SMOKE_LARGE.func_179348_c() && !Config.isAnimatedSmoke()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.SPELL_MOB.func_179348_c() && !Config.isPotionParticles()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.SPELL_MOB_AMBIENT.func_179348_c() && !Config.isPotionParticles()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.SPELL.func_179348_c() && !Config.isPotionParticles()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.SPELL_INSTANT.func_179348_c() && !Config.isPotionParticles()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.SPELL_WITCH.func_179348_c() && !Config.isPotionParticles()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.PORTAL.func_179348_c() && !Config.isAnimatedPortal()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.FLAME.func_179348_c() && !Config.isAnimatedFlame()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.REDSTONE.func_179348_c() && !Config.isAnimatedRedstone()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.DRIP_WATER.func_179348_c() && !Config.isDrippingWaterLava()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.DRIP_LAVA.func_179348_c() && !Config.isDrippingWaterLava()) {
            return null;
         } else if(p_174974_1_ == EnumParticleTypes.FIREWORKS_SPARK.func_179348_c() && !Config.isFireworkParticles()) {
            return null;
         } else if(p_174974_2_) {
            return this.field_72777_q.particles.func_178927_a(p_174974_1_, p_174974_3_, p_174974_5_, p_174974_7_, p_174974_9_, p_174974_11_, p_174974_13_, p_174974_15_);
         } else {
            double d3 = 16.0D;
            double d4 = 256.0D;
            if(p_174974_1_ == EnumParticleTypes.CRIT.func_179348_c()) {
               d4 = 38416.0D;
            }

            if(d0 * d0 + d1 * d1 + d2 * d2 > d4) {
               return null;
            } else if(i > 1) {
               return null;
            } else {
               EntityFX entityfx = this.field_72777_q.particles.func_178927_a(p_174974_1_, p_174974_3_, p_174974_5_, p_174974_7_, p_174974_9_, p_174974_11_, p_174974_13_, p_174974_15_);
               if(p_174974_1_ == EnumParticleTypes.WATER_BUBBLE.func_179348_c()) {
                  CustomColors.updateWaterFX(entityfx, this.field_72769_h, p_174974_3_, p_174974_5_, p_174974_7_);
               }

               if(p_174974_1_ == EnumParticleTypes.WATER_SPLASH.func_179348_c()) {
                  CustomColors.updateWaterFX(entityfx, this.field_72769_h, p_174974_3_, p_174974_5_, p_174974_7_);
               }

               if(p_174974_1_ == EnumParticleTypes.WATER_DROP.func_179348_c()) {
                  CustomColors.updateWaterFX(entityfx, this.field_72769_h, p_174974_3_, p_174974_5_, p_174974_7_);
               }

               if(p_174974_1_ == EnumParticleTypes.TOWN_AURA.func_179348_c()) {
                  CustomColors.updateMyceliumFX(entityfx);
               }

               if(p_174974_1_ == EnumParticleTypes.PORTAL.func_179348_c()) {
                  CustomColors.updatePortalFX(entityfx);
               }

               if(p_174974_1_ == EnumParticleTypes.REDSTONE.func_179348_c()) {
                  CustomColors.updateReddustFX(entityfx, this.field_72769_h, p_174974_3_, p_174974_5_, p_174974_7_);
               }

               return entityfx;
            }
         }
      } else {
         return null;
      }
   }

   public void func_72703_a(Entity p_72703_1_) {
      RandomMobs.entityLoaded(p_72703_1_, this.field_72769_h);
      if(Config.isDynamicLights()) {
         DynamicLights.entityAdded(p_72703_1_, this);
      }

   }

   public void func_72709_b(Entity p_72709_1_) {
      if(Config.isDynamicLights()) {
         DynamicLights.entityRemoved(p_72709_1_, this);
      }

   }

   public void deleteAllDisplayLists() {
   }

   public void broadcastSound(int soundID, BlockPos pos, int data) {
      switch(soundID) {
      case 1013:
      case 1018:
         if(this.field_72777_q.func_175606_aa() != null) {
            double d0 = (double)pos.getX() - this.field_72777_q.func_175606_aa().posX;
            double d1 = (double)pos.getY() - this.field_72777_q.func_175606_aa().posY;
            double d2 = (double)pos.getZ() - this.field_72777_q.func_175606_aa().posZ;
            double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
            double d4 = this.field_72777_q.func_175606_aa().posX;
            double d5 = this.field_72777_q.func_175606_aa().posY;
            double d6 = this.field_72777_q.func_175606_aa().posZ;
            if(d3 > 0.0D) {
               d4 += d0 / d3 * 2.0D;
               d5 += d1 / d3 * 2.0D;
               d6 += d2 / d3 * 2.0D;
            }

            if(soundID == 1013) {
               this.field_72769_h.func_72980_b(d4, d5, d6, "mob.wither.spawn", 1.0F, 1.0F, false);
            } else {
               this.field_72769_h.func_72980_b(d4, d5, d6, "mob.enderdragon.end", 5.0F, 1.0F, false);
            }
         }
      default:
      }
   }

   public void playEvent(EntityPlayer player, int type, BlockPos blockPosIn, int data) {
      Random random = this.field_72769_h.rand;
      switch(type) {
      case 1000:
         this.field_72769_h.func_175731_a(blockPosIn, "random.click", 1.0F, 1.0F, false);
         break;
      case 1001:
         this.field_72769_h.func_175731_a(blockPosIn, "random.click", 1.0F, 1.2F, false);
         break;
      case 1002:
         this.field_72769_h.func_175731_a(blockPosIn, "random.bow", 1.0F, 1.2F, false);
         break;
      case 1003:
         this.field_72769_h.func_175731_a(blockPosIn, "random.door_open", 1.0F, this.field_72769_h.rand.nextFloat() * 0.1F + 0.9F, false);
         break;
      case 1004:
         this.field_72769_h.func_175731_a(blockPosIn, "random.fizz", 0.5F, 2.6F + (random.nextFloat() - random.nextFloat()) * 0.8F, false);
         break;
      case 1005:
         if(Item.getItemById(data) instanceof ItemRecord) {
            this.field_72769_h.func_175717_a(blockPosIn, "records." + ((ItemRecord)Item.getItemById(data)).field_150929_a);
         } else {
            this.field_72769_h.func_175717_a(blockPosIn, (String)null);
         }
         break;
      case 1006:
         this.field_72769_h.func_175731_a(blockPosIn, "random.door_close", 1.0F, this.field_72769_h.rand.nextFloat() * 0.1F + 0.9F, false);
         break;
      case 1007:
         this.field_72769_h.func_175731_a(blockPosIn, "mob.ghast.charge", 10.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
         break;
      case 1008:
         this.field_72769_h.func_175731_a(blockPosIn, "mob.ghast.fireball", 10.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
         break;
      case 1009:
         this.field_72769_h.func_175731_a(blockPosIn, "mob.ghast.fireball", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
         break;
      case 1010:
         this.field_72769_h.func_175731_a(blockPosIn, "mob.zombie.wood", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
         break;
      case 1011:
         this.field_72769_h.func_175731_a(blockPosIn, "mob.zombie.metal", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
         break;
      case 1012:
         this.field_72769_h.func_175731_a(blockPosIn, "mob.zombie.woodbreak", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
         break;
      case 1014:
         this.field_72769_h.func_175731_a(blockPosIn, "mob.wither.shoot", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
         break;
      case 1015:
         this.field_72769_h.func_175731_a(blockPosIn, "mob.bat.takeoff", 0.05F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
         break;
      case 1016:
         this.field_72769_h.func_175731_a(blockPosIn, "mob.zombie.infect", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
         break;
      case 1017:
         this.field_72769_h.func_175731_a(blockPosIn, "mob.zombie.unfect", 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
         break;
      case 1020:
         this.field_72769_h.func_175731_a(blockPosIn, "random.anvil_break", 1.0F, this.field_72769_h.rand.nextFloat() * 0.1F + 0.9F, false);
         break;
      case 1021:
         this.field_72769_h.func_175731_a(blockPosIn, "random.anvil_use", 1.0F, this.field_72769_h.rand.nextFloat() * 0.1F + 0.9F, false);
         break;
      case 1022:
         this.field_72769_h.func_175731_a(blockPosIn, "random.anvil_land", 0.3F, this.field_72769_h.rand.nextFloat() * 0.1F + 0.9F, false);
         break;
      case 2000:
         int k = data % 3 - 1;
         int l = data / 3 % 3 - 1;
         double d13 = (double)p_180439_3_.getX() + (double)k * 0.6D + 0.5D;
         double d15 = (double)p_180439_3_.getY() + 0.5D;
         double d19 = (double)p_180439_3_.getZ() + (double)l * 0.6D + 0.5D;

         for(int l1 = 0; l1 < 10; ++l1) {
            double d20 = random.nextDouble() * 0.2D + 0.01D;
            double d21 = d13 + (double)k * 0.01D + (random.nextDouble() - 0.5D) * (double)l * 0.5D;
            double d22 = d15 + (random.nextDouble() - 0.5D) * 0.5D;
            double d23 = d19 + (double)l * 0.01D + (random.nextDouble() - 0.5D) * (double)k * 0.5D;
            double d24 = (double)k * d20 + random.nextGaussian() * 0.01D;
            double d9 = -0.03D + random.nextGaussian() * 0.01D;
            double d10 = (double)l * d20 + random.nextGaussian() * 0.01D;
            this.func_174972_a(EnumParticleTypes.SMOKE_NORMAL, d21, d22, d23, d24, d9, d10, new int[0]);
         }

         return;
      case 2001:
         Block block = Block.func_149729_e(data & 4095);
         if(block.getMaterial() != Material.AIR) {
            this.field_72777_q.getSoundHandler().play(new PositionedSoundRecord(new ResourceLocation(block.soundType.func_150495_a()), (block.soundType.func_150497_c() + 1.0F) / 2.0F, block.soundType.func_150494_d() * 0.8F, (float)p_180439_3_.getX() + 0.5F, (float)p_180439_3_.getY() + 0.5F, (float)p_180439_3_.getZ() + 0.5F));
         }

         this.field_72777_q.particles.addBlockDestroyEffects(p_180439_3_, block.func_176203_a(data >> 12 & 255));
         break;
      case 2002:
         double d11 = (double)p_180439_3_.getX();
         double d12 = (double)p_180439_3_.getY();
         double d14 = (double)p_180439_3_.getZ();

         for(int i1 = 0; i1 < 8; ++i1) {
            this.func_174972_a(EnumParticleTypes.ITEM_CRACK, d11, d12, d14, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, new int[]{Item.getIdFromItem(Items.POTION), data});
         }

         int j1 = Items.POTION.func_77620_a(data);
         float f = (float)(j1 >> 16 & 255) / 255.0F;
         float f1 = (float)(j1 >> 8 & 255) / 255.0F;
         float f2 = (float)(j1 >> 0 & 255) / 255.0F;
         EnumParticleTypes enumparticletypes = EnumParticleTypes.SPELL;
         if(Items.POTION.func_77833_h(data)) {
            enumparticletypes = EnumParticleTypes.SPELL_INSTANT;
         }

         for(int k1 = 0; k1 < 100; ++k1) {
            double d16 = random.nextDouble() * 4.0D;
            double d17 = random.nextDouble() * 3.141592653589793D * 2.0D;
            double d18 = Math.cos(d17) * d16;
            double d7 = 0.01D + random.nextDouble() * 0.5D;
            double d8 = Math.sin(d17) * d16;
            EntityFX entityfx = this.func_174974_b(enumparticletypes.func_179348_c(), enumparticletypes.func_179344_e(), d11 + d18 * 0.1D, d12 + 0.3D, d14 + d8 * 0.1D, d18, d7, d8, new int[0]);
            if(entityfx != null) {
               float f3 = 0.75F + random.nextFloat() * 0.25F;
               entityfx.setColor(f * f3, f1 * f3, f2 * f3);
               entityfx.multiplyVelocity((float)d16);
            }
         }

         this.field_72769_h.func_175731_a(p_180439_3_, "game.potion.smash", 1.0F, this.field_72769_h.rand.nextFloat() * 0.1F + 0.9F, false);
         break;
      case 2003:
         double var7 = (double)p_180439_3_.getX() + 0.5D;
         double var9 = (double)p_180439_3_.getY();
         double var11 = (double)p_180439_3_.getZ() + 0.5D;

         for(int var13 = 0; var13 < 8; ++var13) {
            this.func_174972_a(EnumParticleTypes.ITEM_CRACK, var7, var9, var11, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, new int[]{Item.getIdFromItem(Items.ENDER_EYE)});
         }

         for(double var32 = 0.0D; var32 < 6.283185307179586D; var32 += 0.15707963267948966D) {
            this.func_174972_a(EnumParticleTypes.PORTAL, var7 + Math.cos(var32) * 5.0D, var9 - 0.4D, var11 + Math.sin(var32) * 5.0D, Math.cos(var32) * -5.0D, 0.0D, Math.sin(var32) * -5.0D, new int[0]);
            this.func_174972_a(EnumParticleTypes.PORTAL, var7 + Math.cos(var32) * 5.0D, var9 - 0.4D, var11 + Math.sin(var32) * 5.0D, Math.cos(var32) * -7.0D, 0.0D, Math.sin(var32) * -7.0D, new int[0]);
         }

         return;
      case 2004:
         for(int var18 = 0; var18 < 20; ++var18) {
            double d3 = (double)p_180439_3_.getX() + 0.5D + ((double)this.field_72769_h.rand.nextFloat() - 0.5D) * 2.0D;
            double d4 = (double)p_180439_3_.getY() + 0.5D + ((double)this.field_72769_h.rand.nextFloat() - 0.5D) * 2.0D;
            double d5 = (double)p_180439_3_.getZ() + 0.5D + ((double)this.field_72769_h.rand.nextFloat() - 0.5D) * 2.0D;
            this.field_72769_h.func_175688_a(EnumParticleTypes.SMOKE_NORMAL, d3, d4, d5, 0.0D, 0.0D, 0.0D, new int[0]);
            this.field_72769_h.func_175688_a(EnumParticleTypes.FLAME, d3, d4, d5, 0.0D, 0.0D, 0.0D, new int[0]);
         }

         return;
      case 2005:
         ItemDye.func_180617_a(this.field_72769_h, p_180439_3_, data);
      }

   }

   public void sendBlockBreakProgress(int breakerId, BlockPos pos, int progress) {
      if(progress >= 0 && progress < 10) {
         DestroyBlockProgress destroyblockprogress = (DestroyBlockProgress)this.damagedBlocks.get(Integer.valueOf(breakerId));
         if(destroyblockprogress == null || destroyblockprogress.getPosition().getX() != pos.getX() || destroyblockprogress.getPosition().getY() != pos.getY() || destroyblockprogress.getPosition().getZ() != pos.getZ()) {
            destroyblockprogress = new DestroyBlockProgress(breakerId, pos);
            this.damagedBlocks.put(Integer.valueOf(breakerId), destroyblockprogress);
         }

         destroyblockprogress.setPartialBlockDamage(progress);
         destroyblockprogress.setCloudUpdateTick(this.ticks);
      } else {
         this.damagedBlocks.remove(Integer.valueOf(breakerId));
      }

   }

   public void setDisplayListEntitiesDirty() {
      this.displayListEntitiesDirty = true;
   }

   public void resetClouds() {
      this.cloudRenderer.reset();
   }

   public int getCountRenderers() {
      return this.viewFrustum.renderChunks.length;
   }

   public int getCountActiveRenderers() {
      return this.renderInfos.size();
   }

   public int getCountEntitiesRendered() {
      return this.countEntitiesRendered;
   }

   public int getCountTileEntitiesRendered() {
      return this.countTileEntitiesRendered;
   }

   public RenderChunk getRenderChunk(BlockPos p_getRenderChunk_1_) {
      return this.viewFrustum.getRenderChunk(p_getRenderChunk_1_);
   }

   public RenderChunk getRenderChunk(RenderChunk p_getRenderChunk_1_, EnumFacing p_getRenderChunk_2_) {
      if(p_getRenderChunk_1_ == null) {
         return null;
      } else {
         BlockPos blockpos = p_getRenderChunk_1_.getBlockPosOffset16(p_getRenderChunk_2_);
         return this.viewFrustum.getRenderChunk(blockpos);
      }
   }

   public WorldClient getWorld() {
      return this.field_72769_h;
   }

   public void updateTileEntities(Collection tileEntitiesToRemove, Collection tileEntitiesToAdd) {
      Set set = this.setTileEntities;
      synchronized(this.setTileEntities) {
         this.setTileEntities.removeAll(tileEntitiesToRemove);
         this.setTileEntities.addAll(tileEntitiesToAdd);
      }
   }

   static final class RenderGlobal$2 {
      static final int[] field_178037_a = new int[VertexFormatElement.EnumUsage.values().length];
      private static final String __OBFID = "CL_00002535";

      static {
         try {
            field_178037_a[VertexFormatElement.EnumUsage.POSITION.ordinal()] = 1;
         } catch (NoSuchFieldError var3) {
            ;
         }

         try {
            field_178037_a[VertexFormatElement.EnumUsage.UV.ordinal()] = 2;
         } catch (NoSuchFieldError var2) {
            ;
         }

         try {
            field_178037_a[VertexFormatElement.EnumUsage.COLOR.ordinal()] = 3;
         } catch (NoSuchFieldError var1) {
            ;
         }

      }
   }

   public static class ContainerLocalRenderInformation {
      final RenderChunk renderChunk;
      final EnumFacing facing;
      final Set setFacing;
      final int counter;
      private static final String __OBFID = "CL_00002534";

      public ContainerLocalRenderInformation(RenderChunk p_i4_1_, EnumFacing p_i4_2_, int p_i4_3_) {
         this.setFacing = EnumSet.noneOf(EnumFacing.class);
         this.renderChunk = p_i4_1_;
         this.facing = p_i4_2_;
         this.counter = p_i4_3_;
      }

      ContainerLocalRenderInformation(RenderChunk p_i5_1_, EnumFacing p_i5_2_, int p_i5_3_, Object p_i5_4_) {
         this(p_i5_1_, p_i5_2_, p_i5_3_);
      }
   }
}
