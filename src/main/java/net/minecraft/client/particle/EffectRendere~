package net.minecraft.client.particle;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.Callable;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.particle.Barrier;
import net.minecraft.client.particle.EntityAuraFX;
import net.minecraft.client.particle.EntityBlockDustFX;
import net.minecraft.client.particle.EntityBreakingFX;
import net.minecraft.client.particle.EntityBubbleFX;
import net.minecraft.client.particle.EntityCloudFX;
import net.minecraft.client.particle.EntityCrit2FX;
import net.minecraft.client.particle.EntityCritFX;
import net.minecraft.client.particle.EntityDiggingFX;
import net.minecraft.client.particle.EntityDropParticleFX;
import net.minecraft.client.particle.EntityEnchantmentTableParticleFX;
import net.minecraft.client.particle.EntityExplodeFX;
import net.minecraft.client.particle.EntityFX;
import net.minecraft.client.particle.EntityFirework;
import net.minecraft.client.particle.EntityFishWakeFX;
import net.minecraft.client.particle.EntityFlameFX;
import net.minecraft.client.particle.EntityFootStepFX;
import net.minecraft.client.particle.EntityHeartFX;
import net.minecraft.client.particle.EntityHugeExplodeFX;
import net.minecraft.client.particle.EntityLargeExplodeFX;
import net.minecraft.client.particle.EntityLavaFX;
import net.minecraft.client.particle.EntityNoteFX;
import net.minecraft.client.particle.EntityParticleEmitter;
import net.minecraft.client.particle.EntityPortalFX;
import net.minecraft.client.particle.EntityRainFX;
import net.minecraft.client.particle.EntityReddustFX;
import net.minecraft.client.particle.EntitySmokeFX;
import net.minecraft.client.particle.EntitySnowShovelFX;
import net.minecraft.client.particle.EntitySpellParticleFX;
import net.minecraft.client.particle.EntitySplashFX;
import net.minecraft.client.particle.EntitySuspendFX;
import net.minecraft.client.particle.IParticleFactory;
import net.minecraft.client.particle.MobAppearance;
import net.minecraft.client.renderer.ActiveRenderInfo;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.renderer.texture.TextureMap;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.crash.CrashReport;
import net.minecraft.crash.CrashReportCategory;
import net.minecraft.entity.Entity;
import net.minecraft.src.Config;
import net.minecraft.src.Reflector;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.MathHelper;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.ReportedException;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;

public class EffectRenderer {
   private static final ResourceLocation field_110737_b = new ResourceLocation("textures/particle/particles.png");
   protected World world;
   private List[][] byType = new List[4][];
   private List particleEmitters = Lists.newArrayList();
   private TextureManager renderer;
   private Random rand = new Random();
   private Map factories = Maps.newHashMap();
   private static final String __OBFID = "CL_00000915";

   public EffectRenderer(World worldIn, TextureManager rendererIn) {
      this.world = worldIn;
      this.renderer = rendererIn;

      for(int i = 0; i < 4; ++i) {
         this.byType[i] = new List[2];

         for(int j = 0; j < 2; ++j) {
            this.byType[i][j] = Lists.newArrayList();
         }
      }

      this.registerFactories();
   }

   private void registerFactories() {
      this.func_178929_a(EnumParticleTypes.EXPLOSION_NORMAL.func_179348_c(), new EntityExplodeFX.Factory());
      this.func_178929_a(EnumParticleTypes.WATER_BUBBLE.func_179348_c(), new EntityBubbleFX.Factory());
      this.func_178929_a(EnumParticleTypes.WATER_SPLASH.func_179348_c(), new EntitySplashFX.Factory());
      this.func_178929_a(EnumParticleTypes.WATER_WAKE.func_179348_c(), new EntityFishWakeFX.Factory());
      this.func_178929_a(EnumParticleTypes.WATER_DROP.func_179348_c(), new EntityRainFX.Factory());
      this.func_178929_a(EnumParticleTypes.SUSPENDED.func_179348_c(), new EntitySuspendFX.Factory());
      this.func_178929_a(EnumParticleTypes.SUSPENDED_DEPTH.func_179348_c(), new EntityAuraFX.Factory());
      this.func_178929_a(EnumParticleTypes.CRIT.func_179348_c(), new EntityCrit2FX.Factory());
      this.func_178929_a(EnumParticleTypes.CRIT_MAGIC.func_179348_c(), new EntityCrit2FX.MagicFactory());
      this.func_178929_a(EnumParticleTypes.SMOKE_NORMAL.func_179348_c(), new EntitySmokeFX.Factory());
      this.func_178929_a(EnumParticleTypes.SMOKE_LARGE.func_179348_c(), new EntityCritFX.Factory());
      this.func_178929_a(EnumParticleTypes.SPELL.func_179348_c(), new EntitySpellParticleFX.Factory());
      this.func_178929_a(EnumParticleTypes.SPELL_INSTANT.func_179348_c(), new EntitySpellParticleFX.InstantFactory());
      this.func_178929_a(EnumParticleTypes.SPELL_MOB.func_179348_c(), new EntitySpellParticleFX.MobFactory());
      this.func_178929_a(EnumParticleTypes.SPELL_MOB_AMBIENT.func_179348_c(), new EntitySpellParticleFX.AmbientMobFactory());
      this.func_178929_a(EnumParticleTypes.SPELL_WITCH.func_179348_c(), new EntitySpellParticleFX.WitchFactory());
      this.func_178929_a(EnumParticleTypes.DRIP_WATER.func_179348_c(), new EntityDropParticleFX.WaterFactory());
      this.func_178929_a(EnumParticleTypes.DRIP_LAVA.func_179348_c(), new EntityDropParticleFX.LavaFactory());
      this.func_178929_a(EnumParticleTypes.VILLAGER_ANGRY.func_179348_c(), new EntityHeartFX.AngryVillagerFactory());
      this.func_178929_a(EnumParticleTypes.VILLAGER_HAPPY.func_179348_c(), new EntityAuraFX.HappyVillagerFactory());
      this.func_178929_a(EnumParticleTypes.TOWN_AURA.func_179348_c(), new EntityAuraFX.Factory());
      this.func_178929_a(EnumParticleTypes.NOTE.func_179348_c(), new EntityNoteFX.Factory());
      this.func_178929_a(EnumParticleTypes.PORTAL.func_179348_c(), new EntityPortalFX.Factory());
      this.func_178929_a(EnumParticleTypes.ENCHANTMENT_TABLE.func_179348_c(), new EntityEnchantmentTableParticleFX.EnchantmentTable());
      this.func_178929_a(EnumParticleTypes.FLAME.func_179348_c(), new EntityFlameFX.Factory());
      this.func_178929_a(EnumParticleTypes.LAVA.func_179348_c(), new EntityLavaFX.Factory());
      this.func_178929_a(EnumParticleTypes.FOOTSTEP.func_179348_c(), new EntityFootStepFX.Factory());
      this.func_178929_a(EnumParticleTypes.CLOUD.func_179348_c(), new EntityCloudFX.Factory());
      this.func_178929_a(EnumParticleTypes.REDSTONE.func_179348_c(), new EntityReddustFX.Factory());
      this.func_178929_a(EnumParticleTypes.SNOWBALL.func_179348_c(), new EntityBreakingFX.SnowballFactory());
      this.func_178929_a(EnumParticleTypes.SNOW_SHOVEL.func_179348_c(), new EntitySnowShovelFX.Factory());
      this.func_178929_a(EnumParticleTypes.SLIME.func_179348_c(), new EntityBreakingFX.SlimeFactory());
      this.func_178929_a(EnumParticleTypes.HEART.func_179348_c(), new EntityHeartFX.Factory());
      this.func_178929_a(EnumParticleTypes.BARRIER.func_179348_c(), new Barrier.Factory());
      this.func_178929_a(EnumParticleTypes.ITEM_CRACK.func_179348_c(), new EntityBreakingFX.Factory());
      this.func_178929_a(EnumParticleTypes.BLOCK_CRACK.func_179348_c(), new EntityDiggingFX.Factory());
      this.func_178929_a(EnumParticleTypes.BLOCK_DUST.func_179348_c(), new EntityBlockDustFX.Factory());
      this.func_178929_a(EnumParticleTypes.EXPLOSION_HUGE.func_179348_c(), new EntityHugeExplodeFX.Factory());
      this.func_178929_a(EnumParticleTypes.EXPLOSION_LARGE.func_179348_c(), new EntityLargeExplodeFX.Factory());
      this.func_178929_a(EnumParticleTypes.FIREWORKS_SPARK.func_179348_c(), new EntityFirework.Factory());
      this.func_178929_a(EnumParticleTypes.MOB_APPEARANCE.func_179348_c(), new MobAppearance.Factory());
   }

   public void func_178929_a(int p_178929_1_, IParticleFactory p_178929_2_) {
      this.factories.put(Integer.valueOf(p_178929_1_), p_178929_2_);
   }

   public void func_178926_a(Entity p_178926_1_, EnumParticleTypes p_178926_2_) {
      this.particleEmitters.add(new EntityParticleEmitter(this.world, p_178926_1_, p_178926_2_));
   }

   public EntityFX func_178927_a(int p_178927_1_, double p_178927_2_, double p_178927_4_, double p_178927_6_, double p_178927_8_, double p_178927_10_, double p_178927_12_, int... p_178927_14_) {
      IParticleFactory iparticlefactory = (IParticleFactory)this.factories.get(Integer.valueOf(p_178927_1_));
      if(iparticlefactory != null) {
         EntityFX entityfx = iparticlefactory.func_178902_a(p_178927_1_, this.world, p_178927_2_, p_178927_4_, p_178927_6_, p_178927_8_, p_178927_10_, p_178927_12_, p_178927_14_);
         if(entityfx != null) {
            this.addEffect(entityfx);
            return entityfx;
         }
      }

      return null;
   }

   public void addEffect(EntityFX effect) {
      if(effect != null) {
         if(!(effect instanceof EntityFirework.SparkFX) || Config.isFireworkParticles()) {
            int i = effect.func_70537_b();
            int j = effect.func_174838_j() != 1.0F?0:1;
            if(this.byType[i][j].size() >= 4000) {
               this.byType[i][j].remove(0);
            }

            if(!(effect instanceof Barrier) || !this.reuseBarrierParticle(effect, this.byType[i][j])) {
               this.byType[i][j].add(effect);
            }
         }
      }
   }

   public void tick() {
      for(int i = 0; i < 4; ++i) {
         this.func_178922_a(i);
      }

      ArrayList arraylist = Lists.newArrayList();

      for(EntityParticleEmitter entityparticleemitter : this.particleEmitters) {
         entityparticleemitter.tick();
         if(entityparticleemitter.removed) {
            arraylist.add(entityparticleemitter);
         }
      }

      this.particleEmitters.removeAll(arraylist);
   }

   private void func_178922_a(int p_178922_1_) {
      for(int i = 0; i < 2; ++i) {
         this.func_178925_a(this.byType[p_178922_1_][i]);
      }

   }

   private void func_178925_a(List p_178925_1_) {
      ArrayList arraylist = Lists.newArrayList();

      for(int i = 0; i < p_178925_1_.size(); ++i) {
         EntityFX entityfx = (EntityFX)p_178925_1_.get(i);
         this.tickParticle(entityfx);
         if(entityfx.removed) {
            arraylist.add(entityfx);
         }
      }

      p_178925_1_.removeAll(arraylist);
   }

   private void tickParticle(final EntityFX particle) {
      try {
         particle.tick();
      } catch (Throwable throwable) {
         CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Ticking Particle");
         CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being ticked");
         final int i = particle.func_70537_b();
         crashreportcategory.func_71500_a("Particle", new Callable() {
            private static final String __OBFID = "CL_00000916";

            public String call() throws Exception {
               return particle.toString();
            }
         });
         crashreportcategory.func_71500_a("Particle Type", new Callable() {
            private static final String __OBFID = "CL_00000917";

            public String call() throws Exception {
               return i == 0?"MISC_TEXTURE":(i == 1?"TERRAIN_TEXTURE":(i == 3?"ENTITY_PARTICLE_TEXTURE":"Unknown - " + i));
            }
         });
         throw new ReportedException(crashreport);
      }
   }

   public void func_78874_a(Entity p_78874_1_, float p_78874_2_) {
      float f = ActiveRenderInfo.func_178808_b();
      float f1 = ActiveRenderInfo.func_178803_d();
      float f2 = ActiveRenderInfo.func_178805_e();
      float f3 = ActiveRenderInfo.func_178807_f();
      float f4 = ActiveRenderInfo.func_178809_c();
      EntityFX.field_70556_an = p_78874_1_.lastTickPosX + (p_78874_1_.posX - p_78874_1_.lastTickPosX) * (double)p_78874_2_;
      EntityFX.field_70554_ao = p_78874_1_.lastTickPosY + (p_78874_1_.posY - p_78874_1_.lastTickPosY) * (double)p_78874_2_;
      EntityFX.field_70555_ap = p_78874_1_.lastTickPosZ + (p_78874_1_.posZ - p_78874_1_.lastTickPosZ) * (double)p_78874_2_;
      GlStateManager.func_179147_l();
      GlStateManager.func_179112_b(770, 771);
      GlStateManager.func_179092_a(516, 0.003921569F);

      for(int i = 0; i < 3; ++i) {
         final int j = i;

         for(int k = 0; k < 2; ++k) {
            if(!this.byType[j][k].isEmpty()) {
               switch(k) {
               case 0:
                  GlStateManager.func_179132_a(false);
                  break;
               case 1:
                  GlStateManager.func_179132_a(true);
               }

               switch(j) {
               case 0:
               default:
                  this.renderer.bindTexture(field_110737_b);
                  break;
               case 1:
                  this.renderer.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
               }

               GlStateManager.func_179131_c(1.0F, 1.0F, 1.0F, 1.0F);
               Tessellator tessellator = Tessellator.getInstance();
               WorldRenderer worldrenderer = tessellator.getBuffer();
               worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);

               for(int l = 0; l < this.byType[j][k].size(); ++l) {
                  final EntityFX entityfx = (EntityFX)this.byType[j][k].get(l);

                  try {
                     entityfx.func_180434_a(worldrenderer, p_78874_1_, p_78874_2_, f, f4, f1, f2, f3);
                  } catch (Throwable throwable) {
                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering Particle");
                     CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being rendered");
                     crashreportcategory.func_71500_a("Particle", new Callable() {
                        private static final String __OBFID = "CL_00000918";

                        public String call() throws Exception {
                           return entityfx.toString();
                        }
                     });
                     crashreportcategory.func_71500_a("Particle Type", new Callable() {
                        private static final String __OBFID = "CL_00000919";

                        public String call() throws Exception {
                           return j == 0?"MISC_TEXTURE":(j == 1?"TERRAIN_TEXTURE":(j == 3?"ENTITY_PARTICLE_TEXTURE":"Unknown - " + j));
                        }
                     });
                     throw new ReportedException(crashreport);
                  }
               }

               tessellator.draw();
            }
         }
      }

      GlStateManager.func_179132_a(true);
      GlStateManager.func_179084_k();
      GlStateManager.func_179092_a(516, 0.1F);
   }

   public void func_78872_b(Entity p_78872_1_, float p_78872_2_) {
      float f = 0.017453292F;
      float f1 = MathHelper.cos(p_78872_1_.rotationYaw * 0.017453292F);
      float f2 = MathHelper.sin(p_78872_1_.rotationYaw * 0.017453292F);
      float f3 = -f2 * MathHelper.sin(p_78872_1_.rotationPitch * 0.017453292F);
      float f4 = f1 * MathHelper.sin(p_78872_1_.rotationPitch * 0.017453292F);
      float f5 = MathHelper.cos(p_78872_1_.rotationPitch * 0.017453292F);

      for(int i = 0; i < 2; ++i) {
         List list = this.byType[3][i];
         if(!list.isEmpty()) {
            Tessellator tessellator = Tessellator.getInstance();
            WorldRenderer worldrenderer = tessellator.getBuffer();

            for(int j = 0; j < list.size(); ++j) {
               EntityFX entityfx = (EntityFX)list.get(j);
               entityfx.func_180434_a(worldrenderer, p_78872_1_, p_78872_2_, f1, f5, f2, f3, f4);
            }
         }
      }

   }

   public void clearEffects(World worldIn) {
      this.world = worldIn;

      for(int i = 0; i < 4; ++i) {
         for(int j = 0; j < 2; ++j) {
            this.byType[i][j].clear();
         }
      }

      this.particleEmitters.clear();
   }

   public void addBlockDestroyEffects(BlockPos pos, IBlockState state) {
      boolean flag;
      if(Reflector.ForgeBlock_addDestroyEffects.exists() && Reflector.ForgeBlock_isAir.exists()) {
         Block block = state.getBlock();
         Reflector.callBoolean(block, Reflector.ForgeBlock_isAir, new Object[]{this.world, pos});
         flag = !Reflector.callBoolean(block, Reflector.ForgeBlock_isAir, new Object[]{this.world, pos}) && !Reflector.callBoolean(block, Reflector.ForgeBlock_addDestroyEffects, new Object[]{this.world, pos, this});
      } else {
         flag = state.getBlock().getMaterial() != Material.AIR;
      }

      if(flag) {
         state = state.getBlock().func_176221_a(state, this.world, pos);
         byte b0 = 4;

         for(int i = 0; i < b0; ++i) {
            for(int j = 0; j < b0; ++j) {
               for(int k = 0; k < b0; ++k) {
                  double d0 = (double)pos.getX() + ((double)i + 0.5D) / (double)b0;
                  double d1 = (double)pos.getY() + ((double)j + 0.5D) / (double)b0;
                  double d2 = (double)pos.getZ() + ((double)k + 0.5D) / (double)b0;
                  this.addEffect((new EntityDiggingFX(this.world, d0, d1, d2, d0 - (double)pos.getX() - 0.5D, d1 - (double)pos.getY() - 0.5D, d2 - (double)pos.getZ() - 0.5D, state)).setBlockPos(pos));
               }
            }
         }
      }

   }

   public void addBlockHitEffects(BlockPos pos, EnumFacing side) {
      IBlockState iblockstate = this.world.getBlockState(pos);
      Block block = iblockstate.getBlock();
      if(block.getRenderType() != -1) {
         int i = pos.getX();
         int j = pos.getY();
         int k = pos.getZ();
         float f = 0.1F;
         double d0 = (double)i + this.rand.nextDouble() * (block.func_149753_y() - block.func_149704_x() - (double)(f * 2.0F)) + (double)f + block.func_149704_x();
         double d1 = (double)j + this.rand.nextDouble() * (block.func_149669_A() - block.func_149665_z() - (double)(f * 2.0F)) + (double)f + block.func_149665_z();
         double d2 = (double)k + this.rand.nextDouble() * (block.func_149693_C() - block.func_149706_B() - (double)(f * 2.0F)) + (double)f + block.func_149706_B();
         if(side == EnumFacing.DOWN) {
            d1 = (double)j + block.func_149665_z() - (double)f;
         }

         if(side == EnumFacing.UP) {
            d1 = (double)j + block.func_149669_A() + (double)f;
         }

         if(side == EnumFacing.NORTH) {
            d2 = (double)k + block.func_149706_B() - (double)f;
         }

         if(side == EnumFacing.SOUTH) {
            d2 = (double)k + block.func_149693_C() + (double)f;
         }

         if(side == EnumFacing.WEST) {
            d0 = (double)i + block.func_149704_x() - (double)f;
         }

         if(side == EnumFacing.EAST) {
            d0 = (double)i + block.func_149753_y() + (double)f;
         }

         this.addEffect((new EntityDiggingFX(this.world, d0, d1, d2, 0.0D, 0.0D, 0.0D, iblockstate)).setBlockPos(pos).multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F));
      }

   }

   public void func_178928_b(EntityFX p_178928_1_) {
      this.func_178924_a(p_178928_1_, 1, 0);
   }

   public void func_178931_c(EntityFX p_178931_1_) {
      this.func_178924_a(p_178931_1_, 0, 1);
   }

   private void func_178924_a(EntityFX p_178924_1_, int p_178924_2_, int p_178924_3_) {
      for(int i = 0; i < 4; ++i) {
         if(this.byType[i][p_178924_2_].contains(p_178924_1_)) {
            this.byType[i][p_178924_2_].remove(p_178924_1_);
            this.byType[i][p_178924_3_].add(p_178924_1_);
         }
      }

   }

   public String getStatistics() {
      int i = 0;

      for(int j = 0; j < 4; ++j) {
         for(int k = 0; k < 2; ++k) {
            i += this.byType[j][k].size();
         }
      }

      return "" + i;
   }

   private boolean reuseBarrierParticle(EntityFX p_reuseBarrierParticle_1_, List<EntityFX> p_reuseBarrierParticle_2_) {
      for(EntityFX entityfx : p_reuseBarrierParticle_2_) {
         if(entityfx instanceof Barrier && p_reuseBarrierParticle_1_.posX == entityfx.posX && p_reuseBarrierParticle_1_.posY == entityfx.posY && p_reuseBarrierParticle_1_.posZ == entityfx.posZ) {
            entityfx.age = 0;
            return true;
         }
      }

      return false;
   }

   public void addBlockHitEffects(BlockPos p_addBlockHitEffects_1_, MovingObjectPosition p_addBlockHitEffects_2_) {
      Block block = this.world.getBlockState(p_addBlockHitEffects_1_).getBlock();
      boolean flag = Reflector.callBoolean(block, Reflector.ForgeBlock_addHitEffects, new Object[]{this.world, p_addBlockHitEffects_2_, this});
      if(block != null && !flag) {
         this.addBlockHitEffects(p_addBlockHitEffects_1_, p_addBlockHitEffects_2_.field_178784_b);
      }

   }
}
